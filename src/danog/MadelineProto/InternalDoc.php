<?php
/**
 * This file is automatic generated by build_docs.php file
 * and is used only for autocomplete in multiple IDE
 * don't modify manually.
 */

namespace danog\MadelineProto;

interface auth
{
    /**
     * @param array params [
     *               string phone_number,
     *              ]
     *
     * @return auth_CheckedPhone
     */
    public function checkPhone(array $params);

    /**
     * @param array params [
     *               string phone_number,
     *               int sms_type,
     *               int api_id,
     *               string api_hash,
     *               string lang_code,
     *              ]
     *
     * @return auth_SentCode
     */
    public function sendCode(array $params);

    /**
     * @param array params [
     *               string phone_number,
     *               string phone_code_hash,
     *              ]
     *
     * @return bool
     */
    public function sendCall(array $params);

    /**
     * @param array params [
     *               string phone_number,
     *               string phone_code_hash,
     *               string phone_code,
     *               string first_name,
     *               string last_name,
     *              ]
     *
     * @return auth_Authorization
     */
    public function signUp(array $params);

    /**
     * @param array params [
     *               string phone_number,
     *               string phone_code_hash,
     *               string phone_code,
     *              ]
     *
     * @return auth_Authorization
     */
    public function signIn(array $params);

    /**
     * @return bool
     */
    public function logOut();

    /**
     * @return bool
     */
    public function resetAuthorizations();

    /**
     * @param array params [
     *               string phone_numbers,
     *               string message,
     *              ]
     *
     * @return bool
     */
    public function sendInvites(array $params);

    /**
     * @param array params [
     *               int dc_id,
     *              ]
     *
     * @return auth_ExportedAuthorization
     */
    public function exportAuthorization(array $params);

    /**
     * @param array params [
     *               int id,
     *               bytes bytes,
     *              ]
     *
     * @return auth_Authorization
     */
    public function importAuthorization(array $params);

    /**
     * @param array params [
     *               long perm_auth_key_id,
     *               long nonce,
     *               int expires_at,
     *               bytes encrypted_message,
     *              ]
     *
     * @return bool
     */
    public function bindTempAuthKey(array $params);

    /**
     * @param array params [
     *               string phone_number,
     *               string phone_code_hash,
     *              ]
     *
     * @return bool
     */
    public function sendSms(array $params);
}

interface account
{
    /**
     * @param array params [
     *               int token_type,
     *               string token,
     *               string device_model,
     *               string system_version,
     *               string app_version,
     *               Bool app_sandbox,
     *               string lang_code,
     *              ]
     *
     * @return bool
     */
    public function registerDevice(array $params);

    /**
     * @param array params [
     *               int token_type,
     *               string token,
     *              ]
     *
     * @return bool
     */
    public function unregisterDevice(array $params);

    /**
     * @param array params [
     *               InputNotifyPeer peer,
     *               InputPeerNotifySettings settings,
     *              ]
     *
     * @return bool
     */
    public function updateNotifySettings(array $params);

    /**
     * @param array params [
     *               InputNotifyPeer peer,
     *              ]
     *
     * @return PeerNotifySettings
     */
    public function getNotifySettings(array $params);

    /**
     * @return bool
     */
    public function resetNotifySettings();

    /**
     * @param array params [
     *               string first_name,
     *               string last_name,
     *              ]
     *
     * @return User
     */
    public function updateProfile(array $params);

    /**
     * @param array params [
     *               Bool offline,
     *              ]
     *
     * @return bool
     */
    public function updateStatus(array $params);

    /**
     * @return Vector_of_WallPaper
     */
    public function getWallPapers();

    /**
     * @param array params [
     *               string username,
     *              ]
     *
     * @return bool
     */
    public function checkUsername(array $params);

    /**
     * @param array params [
     *               string username,
     *              ]
     *
     * @return User
     */
    public function updateUsername(array $params);
}

interface users
{
    /**
     * @param array params [
     *               InputUser id,
     *              ]
     *
     * @return Vector_of_User
     */
    public function getUsers(array $params);

    /**
     * @param array params [
     *               InputUser id,
     *              ]
     *
     * @return UserFull
     */
    public function getFullUser(array $params);
}

interface contacts
{
    /**
     * @return Vector_of_ContactStatus
     */
    public function getStatuses();

    /**
     * @param array params [
     *               string hash,
     *              ]
     *
     * @return contacts_Contacts
     */
    public function getContacts(array $params);

    /**
     * @param array params [
     *               InputContact contacts,
     *               Bool replace,
     *              ]
     *
     * @return contacts_ImportedContacts
     */
    public function importContacts(array $params);

    /**
     * @param array params [
     *               int limit,
     *              ]
     *
     * @return contacts_Suggested
     */
    public function getSuggested(array $params);

    /**
     * @param array params [
     *               InputUser id,
     *              ]
     *
     * @return contacts_Link
     */
    public function deleteContact(array $params);

    /**
     * @param array params [
     *               InputUser id,
     *              ]
     *
     * @return bool
     */
    public function deleteContacts(array $params);

    /**
     * @param array params [
     *               InputUser id,
     *              ]
     *
     * @return bool
     */
    public function block(array $params);

    /**
     * @param array params [
     *               InputUser id,
     *              ]
     *
     * @return bool
     */
    public function unblock(array $params);

    /**
     * @param array params [
     *               int offset,
     *               int limit,
     *              ]
     *
     * @return contacts_Blocked
     */
    public function getBlocked(array $params);

    /**
     * @return Vector_of_int
     */
    public function exportCard();

    /**
     * @param array params [
     *               int export_card,
     *              ]
     *
     * @return User
     */
    public function importCard(array $params);

    /**
     * @param array params [
     *               string q,
     *               int limit,
     *              ]
     *
     * @return contacts_Found
     */
    public function search(array $params);
}

interface messages
{
    /**
     * @param array params [
     *               int id,
     *              ]
     *
     * @return messages_Messages
     */
    public function getMessages(array $params);

    /**
     * @param array params [
     *               int offset,
     *               int max_id,
     *               int limit,
     *              ]
     *
     * @return messages_Dialogs
     */
    public function getDialogs(array $params);

    /**
     * @param array params [
     *               InputPeer peer,
     *               int offset,
     *               int max_id,
     *               int limit,
     *              ]
     *
     * @return messages_Messages
     */
    public function getHistory(array $params);

    /**
     * @param array params [
     *               InputPeer peer,
     *               string q,
     *               MessagesFilter filter,
     *               int min_date,
     *               int max_date,
     *               int offset,
     *               int max_id,
     *               int limit,
     *              ]
     *
     * @return messages_Messages
     */
    public function search(array $params);

    /**
     * @param array params [
     *               InputPeer peer,
     *               int max_id,
     *               int offset,
     *               Bool read_contents,
     *              ]
     *
     * @return messages_AffectedHistory
     */
    public function readHistory(array $params);

    /**
     * @param array params [
     *               InputPeer peer,
     *               int offset,
     *              ]
     *
     * @return messages_AffectedHistory
     */
    public function deleteHistory(array $params);

    /**
     * @param array params [
     *               int id,
     *              ]
     *
     * @return Vector_of_int
     */
    public function deleteMessages(array $params);

    /**
     * @param array params [
     *               int max_id,
     *              ]
     *
     * @return Vector_of_int
     */
    public function receivedMessages(array $params);

    /**
     * @param array params [
     *               InputPeer peer,
     *               SendMessageAction action,
     *              ]
     *
     * @return bool
     */
    public function setTyping(array $params);

    /**
     * @param array params [
     *               InputPeer peer,
     *               string message,
     *              ]
     *
     * @return messages_SentMessage
     */
    public function sendMessage(array $params);

    /**
     * @param array params [
     *               InputPeer peer,
     *               InputMedia media,
     *              ]
     *
     * @return messages_StatedMessage
     */
    public function sendMedia(array $params);

    /**
     * @param array params [
     *               InputPeer peer,
     *               int id,
     *              ]
     *
     * @return messages_StatedMessages
     */
    public function forwardMessages(array $params);

    /**
     * @param array params [
     *               InputPeer peer,
     *              ]
     *
     * @return bool
     */
    public function reportSpam(array $params);

    /**
     * @param array params [
     *               int id,
     *              ]
     *
     * @return messages_Chats
     */
    public function getChats(array $params);

    /**
     * @param array params [
     *               int chat_id,
     *              ]
     *
     * @return messages_ChatFull
     */
    public function getFullChat(array $params);

    /**
     * @param array params [
     *               int chat_id,
     *               string title,
     *              ]
     *
     * @return messages_StatedMessage
     */
    public function editChatTitle(array $params);

    /**
     * @param array params [
     *               int chat_id,
     *               InputChatPhoto photo,
     *              ]
     *
     * @return messages_StatedMessage
     */
    public function editChatPhoto(array $params);

    /**
     * @param array params [
     *               int chat_id,
     *               InputUser user_id,
     *               int fwd_limit,
     *              ]
     *
     * @return messages_StatedMessage
     */
    public function addChatUser(array $params);

    /**
     * @param array params [
     *               int chat_id,
     *               InputUser user_id,
     *              ]
     *
     * @return messages_StatedMessage
     */
    public function deleteChatUser(array $params);

    /**
     * @param array params [
     *               InputUser users,
     *               string title,
     *              ]
     *
     * @return messages_StatedMessage
     */
    public function createChat(array $params);

    /**
     * @param array params [
     *               InputPeer peer,
     *               int id,
     *              ]
     *
     * @return messages_StatedMessage
     */
    public function forwardMessage(array $params);

    /**
     * @param array params [
     *               InputUser contacts,
     *               string message,
     *               InputMedia media,
     *              ]
     *
     * @return messages_StatedMessages
     */
    public function sendBroadcast(array $params);

    /**
     * @param array params [
     *               int version,
     *               int random_length,
     *              ]
     *
     * @return messages_DhConfig
     */
    public function getDhConfig(array $params);

    /**
     * @param array params [
     *               InputUser user_id,
     *               bytes g_a,
     *              ]
     *
     * @return EncryptedChat
     */
    public function requestEncryption(array $params);

    /**
     * @param array params [
     *               InputEncryptedChat peer,
     *               bytes g_b,
     *               long key_fingerprint,
     *              ]
     *
     * @return EncryptedChat
     */
    public function acceptEncryption(array $params);

    /**
     * @param array params [
     *               int chat_id,
     *              ]
     *
     * @return bool
     */
    public function discardEncryption(array $params);

    /**
     * @param array params [
     *               InputEncryptedChat peer,
     *               Bool typing,
     *              ]
     *
     * @return bool
     */
    public function setEncryptedTyping(array $params);

    /**
     * @param array params [
     *               InputEncryptedChat peer,
     *               int max_date,
     *              ]
     *
     * @return bool
     */
    public function readEncryptedHistory(array $params);

    /**
     * @param array params [
     *               InputEncryptedChat peer,
     *               bytes data,
     *              ]
     *
     * @return messages_SentEncryptedMessage
     */
    public function sendEncrypted(array $params);

    /**
     * @param array params [
     *               InputEncryptedChat peer,
     *               bytes data,
     *               InputEncryptedFile file,
     *              ]
     *
     * @return messages_SentEncryptedMessage
     */
    public function sendEncryptedFile(array $params);

    /**
     * @param array params [
     *               InputEncryptedChat peer,
     *               bytes data,
     *              ]
     *
     * @return messages_SentEncryptedMessage
     */
    public function sendEncryptedService(array $params);

    /**
     * @param array params [
     *               int max_qts,
     *              ]
     *
     * @return Vector_of_long
     */
    public function receivedQueue(array $params);

    /**
     * @param array params [
     *               int id,
     *              ]
     *
     * @return Vector_of_int
     */
    public function readMessageContents(array $params);
}

interface updates
{
    /**
     * @return updates_State
     */
    public function getState();

    /**
     * @param array params [
     *               int pts,
     *               int date,
     *               int qts,
     *              ]
     *
     * @return updates_Difference
     */
    public function getDifference(array $params);
}

interface photos
{
    /**
     * @param array params [
     *               InputPhoto id,
     *               InputPhotoCrop crop,
     *              ]
     *
     * @return UserProfilePhoto
     */
    public function updateProfilePhoto(array $params);

    /**
     * @param array params [
     *               InputFile file,
     *               string caption,
     *               InputGeoPoint geo_point,
     *               InputPhotoCrop crop,
     *              ]
     *
     * @return photos_Photo
     */
    public function uploadProfilePhoto(array $params);

    /**
     * @param array params [
     *               InputPhoto id,
     *              ]
     *
     * @return Vector_of_long
     */
    public function deletePhotos(array $params);

    /**
     * @param array params [
     *               InputUser user_id,
     *               int offset,
     *               int max_id,
     *               int limit,
     *              ]
     *
     * @return photos_Photos
     */
    public function getUserPhotos(array $params);
}

interface upload
{
    /**
     * @param array params [
     *               long file_id,
     *               int file_part,
     *               bytes bytes,
     *              ]
     *
     * @return bool
     */
    public function saveFilePart(array $params);

    /**
     * @param array params [
     *               InputFileLocation location,
     *               int offset,
     *               int limit,
     *              ]
     *
     * @return upload_File
     */
    public function getFile(array $params);

    /**
     * @param array params [
     *               long file_id,
     *               int file_part,
     *               int file_total_parts,
     *               bytes bytes,
     *              ]
     *
     * @return bool
     */
    public function saveBigFilePart(array $params);
}

interface help
{
    /**
     * @return Config
     */
    public function getConfig();

    /**
     * @return NearestDc
     */
    public function getNearestDc();

    /**
     * @param array params [
     *               string device_model,
     *               string system_version,
     *               string app_version,
     *               string lang_code,
     *              ]
     *
     * @return help_AppUpdate
     */
    public function getAppUpdate(array $params);

    /**
     * @param array params [
     *               InputAppEvent events,
     *              ]
     *
     * @return bool
     */
    public function saveAppLog(array $params);

    /**
     * @param array params [
     *               string lang_code,
     *              ]
     *
     * @return help_InviteText
     */
    public function getInviteText(array $params);

    /**
     * @return help_Support
     */
    public function getSupport();
}
