<?php

declare(strict_types=1);

/**
 * This file is automatic generated by build_docs.php file
 * and is used only for autocomplete in multiple IDE
 * don't modify manually.
 */

namespace danog\MadelineProto;

use Amp\Dns\Resolver;
use Amp\Future;
use Amp\Http\Client\HttpClient;
use Amp\Http\Server\Request;
use Amp\Http\Server\Response;
use danog\MadelineProto\TL\Conversion\Extension;
use danog\MadelineProto\TL\TL;
use Generator;
use Psr\Log\LoggerInterface;
use Throwable;
use TypeError;

interface auth
{
    /**
     * You cannot use this method directly, use the phoneLogin method instead (see https://docs.madelineproto.xyz for more info).
     *
     * Parameters:
     * * `string`       **phone_number** - Phone number in international format
     * * `int`          **api_id**       - Application identifier (see [App configuration](https://core.telegram.org/myapp))
     * * `string`       **api_hash**     - Application secret hash (see [App configuration](https://core.telegram.org/myapp))
     * * `CodeSettings` **settings**     - Settings for the code type to send
     *
     * @param array $params Parameters
     * @return auth.SentCode
     */
    public function sendCode(array $params): auth;

    /**
     * You cannot use this method directly, use the completeSignup method instead (see https://docs.madelineproto.xyz for more info).
     *
     * Parameters:
     * * `string` **phone_number**    - Phone number in the international format
     * * `string` **phone_code_hash** - SMS-message ID
     * * `string` **first_name**      - New user first name
     * * `string` **last_name**       - New user last name
     *
     * @param array $params Parameters
     * @return auth.Authorization
     */
    public function signUp(array $params): auth;

    /**
     * You cannot use this method directly, use the completePhoneLogin method instead (see https://docs.madelineproto.xyz for more info).
     *
     * Parameters:
     * * `string`            **phone_number**       - Phone number in the international format
     * * `string`            **phone_code_hash**    - SMS-message ID, obtained from [auth.sendCode](https://docs.madelineproto.xyz/API_docs/methods/auth.sendCode.html)
     * * `string`            **phone_code**         - Optional: Valid numerical code from the SMS-message
     * * `EmailVerification` **email_verification** - Optional:
     *
     * @param array $params Parameters
     * @return auth.Authorization
     */
    public function signIn(array $params): auth;

    /**
     * You cannot use this method directly, use the logout method instead (see https://docs.madelineproto.xyz for more info).
     *
     * @return auth.LoggedOut
     */
    public function logOut(): auth;

    /**
     * Terminates all user's authorized sessions except for the current one.
     *
     * After calling this method it is necessary to reregister the current device using the method [account.registerDevice](https://docs.madelineproto.xyz/API_docs/methods/account.registerDevice.html)
     */
    public function resetAuthorizations(): bool;

    /**
     * You cannot use this method directly, use $MadelineProto->exportAuthorization() instead, see https://docs.madelineproto.xyz/docs/LOGIN.html.
     *
     * Parameters:
     * * `int` **dc_id** - Number of a target data-center
     *
     * @param array $params Parameters
     * @return auth.ExportedAuthorization
     */
    public function exportAuthorization(array $params): auth;

    /**
     * You cannot use this method directly, use $MadelineProto->importAuthorization($authorization) instead, see https://docs.madelineproto.xyz/docs/LOGIN.html.
     *
     * Parameters:
     * * `long`  **id**    - User ID
     * * `bytes` **bytes** - Authorization key
     *
     * @param array $params Parameters
     * @return auth.Authorization
     */
    public function importAuthorization(array $params): auth;

    /**
     * You cannot use this method directly, instead modify the PFS and default_temp_auth_key_expires_in settings, see https://docs.madelineproto.xyz/docs/SETTINGS.html for more info.
     *
     * Parameters:
     * * `long`  **perm_auth_key_id**  - Permanent auth\_key\_id to bind to
     * * `long`  **nonce**             - Random long from [Binding message contents](#binding-message-contents)
     * * `int`   **expires_at**        - Unix timestamp to invalidate temporary key, see [Binding message contents](#binding-message-contents)
     * * `bytes` **encrypted_message** - See [Generating encrypted\_message](#generating-encrypted-message)
     *
     * @param array $params Parameters
     */
    public function bindTempAuthKey(array $params): bool;

    /**
     * You cannot use this method directly, use the botLogin method instead (see https://docs.madelineproto.xyz for more info).
     *
     * Parameters:
     * * `int`    **api_id**         - Application identifier (see. [App configuration](https://core.telegram.org/myapp))
     * * `string` **api_hash**       - Application identifier hash (see. [App configuration](https://core.telegram.org/myapp))
     * * `string` **bot_auth_token** - Bot token (see [bots](https://core.telegram.org/bots))
     *
     * @param array $params Parameters
     * @return auth.Authorization
     */
    public function importBotAuthorization(array $params): auth;

    /**
     * You cannot use this method directly, use the complete2falogin method instead (see https://docs.madelineproto.xyz for more info).
     *
     * Parameters:
     * * `InputCheckPasswordSRP` **password** - The account's password (see [SRP](https://core.telegram.org/api/srp))
     *
     * @param array $params Parameters
     * @return auth.Authorization
     */
    public function checkPassword(array $params): auth;

    /**
     * Request recovery code of a [2FA password](https://core.telegram.org/api/srp), only for accounts with a [recovery email configured](https://core.telegram.org/api/srp#email-verification).
     *
     * @return auth.PasswordRecovery
     */
    public function requestPasswordRecovery(): auth;

    /**
     * Reset the [2FA password](https://core.telegram.org/api/srp) using the recovery code sent using [auth.requestPasswordRecovery](https://docs.madelineproto.xyz/API_docs/methods/auth.requestPasswordRecovery.html).
     *
     * Parameters:
     * * `string`                        **code**         - Code received via email
     * * `account.PasswordInputSettings` **new_settings** - Optional: New password
     *
     * @param array $params Parameters
     * @return auth.Authorization
     */
    public function recoverPassword(array $params): auth;

    /**
     * Resend the login code via another medium, the phone code type is determined by the return value of the previous auth.sendCode/auth.resendCode: see [login](https://core.telegram.org/api/auth) for more info.
     *
     * Parameters:
     * * `string` **phone_number**    - The phone number
     * * `string` **phone_code_hash** - The phone code hash obtained from [auth.sendCode](https://docs.madelineproto.xyz/API_docs/methods/auth.sendCode.html)
     *
     * @param array $params Parameters
     * @return auth.SentCode
     */
    public function resendCode(array $params): auth;

    /**
     * Cancel the login verification code.
     *
     * Parameters:
     * * `string` **phone_number**    - Phone number
     * * `string` **phone_code_hash** - Phone code hash from [auth.sendCode](https://docs.madelineproto.xyz/API_docs/methods/auth.sendCode.html)
     *
     * @param array $params Parameters
     */
    public function cancelCode(array $params): bool;

    /**
     * Delete all temporary authorization keys **except for** the ones specified.
     *
     * Parameters:
     * * `[long]` **except_auth_keys** - The auth keys that **shouldn't** be dropped.
     *
     * @param array $params Parameters
     */
    public function dropTempAuthKeys(array $params): bool;

    /**
     * Generate a login token, for [login via QR code](https://core.telegram.org/api/qr-login).
     * The generated login token should be encoded using base64url, then shown as a `tg://login?token=base64encodedtoken` [deep link Â»](https://core.telegram.org/api/links#qr-code-login-links) in the QR code.
     *
     * For more info, see [login via QR code](https://core.telegram.org/api/qr-login).
     *
     * Parameters:
     * * `int`    **api_id**     - Application identifier (see. [App configuration](https://core.telegram.org/myapp))
     * * `string` **api_hash**   - Application identifier hash (see. [App configuration](https://core.telegram.org/myapp))
     * * `[long]` **except_ids** - List of already logged-in user IDs, to prevent logging in twice with the same user
     *
     * @param array $params Parameters
     * @return auth.LoginToken
     */
    public function exportLoginToken(array $params): auth;

    /**
     * Login using a redirected login token, generated in case of DC mismatch during [QR code login](https://core.telegram.org/api/qr-login).
     *
     * For more info, see [login via QR code](https://core.telegram.org/api/qr-login).
     *
     * Parameters:
     * * `bytes` **token** - Login token
     *
     * @param array $params Parameters
     * @return auth.LoginToken
     */
    public function importLoginToken(array $params): auth;

    /**
     * Accept QR code login token, logging in the app that generated it.
     *
     * Returns info about the new session.
     *
     * For more info, see [login via QR code](https://core.telegram.org/api/qr-login).
     *
     * Parameters:
     * * `bytes` **token** - Login token embedded in QR code, for more info, see [login via QR code](https://core.telegram.org/api/qr-login).
     *
     * @param array $params Parameters
     */
    public function acceptLoginToken(array $params): Authorization;

    /**
     * Check if the [2FA recovery code](https://core.telegram.org/api/srp) sent using [auth.requestPasswordRecovery](https://docs.madelineproto.xyz/API_docs/methods/auth.requestPasswordRecovery.html) is valid, before passing it to [auth.recoverPassword](https://docs.madelineproto.xyz/API_docs/methods/auth.recoverPassword.html).
     *
     * Parameters:
     * * `string` **code** - Code received via email
     *
     * @param array $params Parameters
     */
    public function checkRecoveryPassword(array $params): bool;

    /**
     * Parameters:
     * * `int`    **api_id**         -
     * * `string` **api_hash**       -
     * * `string` **web_auth_token** -.
     *
     * @param array $params Parameters
     * @return auth.Authorization
     */
    public function importWebTokenAuthorization(array $params): auth;
}

interface account
{
    /**
     * Register device to receive [PUSH notifications](https://core.telegram.org/api/push-updates).
     *
     * Parameters:
     * * `boolean` **no_muted**    - Optional: Avoid receiving (silent and invisible background) notifications. Useful to save battery.
     * * `int`     **token_type**  - Device token type.<br>**Possible values**:<br>`1` \- APNS (device token for apple push)<br>`2` \- FCM (firebase token for google firebase)<br>`3` \- MPNS (channel URI for microsoft push)<br>`4` \- Simple push (endpoint for firefox's simple push API)<br>`5` \- Ubuntu phone (token for ubuntu push)<br>`6` \- Blackberry (token for blackberry push)<br>`7` \- Unused<br>`8` \- WNS (windows push)<br>`9` \- APNS VoIP (token for apple push VoIP)<br>`10` \- Web push (web push, see below)<br>`11` \- MPNS VoIP (token for microsoft push VoIP)<br>`12` \- Tizen (token for tizen push)<br><br>For `10` web push, the token must be a JSON-encoded object containing the keys described in [PUSH updates](https://core.telegram.org/api/push-updates)
     * * `string`  **token**       - Device token
     * * `Bool`    **app_sandbox** - If [(boolTrue)](https://docs.madelineproto.xyz/API_docs/constructors/boolTrue.html) is transmitted, a sandbox-certificate will be used during transmission.
     * * `bytes`   **secret**      - For FCM and APNS VoIP, optional encryption key used to encrypt push notifications
     * * `[long]`  **other_uids**  - List of user identifiers of other users currently using the client
     *
     * @param array $params Parameters
     */
    public function registerDevice(array $params): bool;

    /**
     * Deletes a device by its token, stops sending PUSH-notifications to it.
     *
     * Parameters:
     * * `int`    **token_type** - Device token type.<br>**Possible values**:<br>`1` \- APNS (device token for apple push)<br>`2` \- FCM (firebase token for google firebase)<br>`3` \- MPNS (channel URI for microsoft push)<br>`4` \- Simple push (endpoint for firefox's simple push API)<br>`5` \- Ubuntu phone (token for ubuntu push)<br>`6` \- Blackberry (token for blackberry push)<br>`7` \- Unused<br>`8` \- WNS (windows push)<br>`9` \- APNS VoIP (token for apple push VoIP)<br>`10` \- Web push (web push, see below)<br>`11` \- MPNS VoIP (token for microsoft push VoIP)<br>`12` \- Tizen (token for tizen push)<br><br>For `10` web push, the token must be a JSON-encoded object containing the keys described in [PUSH updates](https://core.telegram.org/api/push-updates)
     * * `string` **token**      - Device token
     * * `[long]` **other_uids** - List of user identifiers of other users currently using the client
     *
     * @param array $params Parameters
     */
    public function unregisterDevice(array $params): bool;

    /**
     * Edits notification settings from a given user/group, from all users/all groups.
     *
     * Parameters:
     * * `InputNotifyPeer`         **peer**     - Notification source
     * * `InputPeerNotifySettings` **settings** - Notification settings
     *
     * @param array $params Parameters
     */
    public function updateNotifySettings(array $params): bool;

    /**
     * Gets current notification settings for a given user/group, from all users/all groups.
     *
     * Parameters:
     * * `InputNotifyPeer` **peer** - Notification source
     *
     * @param array $params Parameters
     */
    public function getNotifySettings(array $params): PeerNotifySettings;

    /**
     * Resets all notification settings from users and groups.
     */
    public function resetNotifySettings(): bool;

    /**
     * Updates user profile.
     *
     * Parameters:
     * * `string` **first_name** - Optional: New user first name
     * * `string` **last_name**  - Optional: New user last name
     * * `string` **about**      - Optional: New bio
     *
     * @param array $params Parameters
     */
    public function updateProfile(array $params): User;

    /**
     * Updates online user status.
     *
     * Parameters:
     * * `Bool` **offline** - If [(boolTrue)](https://docs.madelineproto.xyz/API_docs/constructors/boolTrue.html) is transmitted, user status will change to [(userStatusOffline)](https://docs.madelineproto.xyz/API_docs/constructors/userStatusOffline.html).
     *
     * @param array $params Parameters
     */
    public function updateStatus(array $params): bool;

    /**
     * Returns a list of available [wallpapers](https://core.telegram.org/api/wallpapers).
     *
     * Parameters:
     * * `long` **hash** - [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)
     *
     * @param array $params Parameters
     * @return account.WallPapers
     */
    public function getWallPapers(array $params): account;

    /**
     * Report a peer for violation of telegram's Terms of Service.
     *
     * Parameters:
     * * `InputPeer`    **peer**    - The peer to report
     * * `ReportReason` **reason**  - The reason why this peer is being reported
     * * `string`       **message** - Comment for report moderation
     *
     * @param array $params Parameters
     */
    public function reportPeer(array $params): bool;

    /**
     * Validates a username and checks availability.
     *
     * Parameters:
     * * `string` **username** - username<br>Accepted characters: A-z (case-insensitive), 0-9 and underscores.<br>Length: 5-32 characters.
     *
     * @param array $params Parameters
     */
    public function checkUsername(array $params): bool;

    /**
     * Changes username for the current user.
     *
     * Parameters:
     * * `string` **username** - username or empty string if username is to be removed<br>Accepted characters: a-z (case-insensitive), 0-9 and underscores.<br>Length: 5-32 characters.
     *
     * @param array $params Parameters
     */
    public function updateUsername(array $params): User;

    /**
     * Get privacy settings of current account.
     *
     * Parameters:
     * * `InputPrivacyKey` **key** - Peer category whose privacy settings should be fetched
     *
     * @param array $params Parameters
     * @return account.PrivacyRules
     */
    public function getPrivacy(array $params): account;

    /**
     * Change privacy settings of current account.
     *
     * Parameters:
     * * `InputPrivacyKey`    **key**   - Peers to which the privacy rules apply
     * * `[InputPrivacyRule]` **rules** - New privacy rules
     *
     * @param array $params Parameters
     * @return account.PrivacyRules
     */
    public function setPrivacy(array $params): account;

    /**
     * Delete the user's account from the telegram servers.
     *
     * Can also be used to delete the account of a user that provided the login code, but forgot the 2FA password and no recovery method is configured, see [here Â»](https://core.telegram.org/api/srp#password-recovery) for more info on password recovery, and [here Â»](https://core.telegram.org/api/account-deletion) for more info on account deletion.
     *
     * Parameters:
     * * `string`                **reason**   - Why is the account being deleted, can be empty
     * * `InputCheckPasswordSRP` **password** - Optional: [2FA password](https://core.telegram.org/api/srp): this field can be omitted even for accounts with 2FA enabled: in this case account account deletion will be delayed by 7 days [as specified in the docs Â»](https://core.telegram.org/api/account-deletion)
     *
     * @param array $params Parameters
     */
    public function deleteAccount(array $params): bool;

    /**
     * Get days to live of account.
     */
    public function getAccountTTL(): AccountDaysTTL;

    /**
     * Set account self-destruction period.
     *
     * Parameters:
     * * `AccountDaysTTL` **ttl** - Time to live in days
     *
     * @param array $params Parameters
     */
    public function setAccountTTL(array $params): bool;

    /**
     * Verify a new phone number to associate to the current account.
     *
     * Parameters:
     * * `string`       **phone_number** - New phone number
     * * `CodeSettings` **settings**     - Phone code settings
     *
     * @param array $params Parameters
     * @return auth.SentCode
     */
    public function sendChangePhoneCode(array $params): auth;

    /**
     * Change the phone number of the current account.
     *
     * Parameters:
     * * `string` **phone_number**    - New phone number
     * * `string` **phone_code_hash** - Phone code hash received when calling [account.sendChangePhoneCode](https://docs.madelineproto.xyz/API_docs/methods/account.sendChangePhoneCode.html)
     * * `string` **phone_code**      - Phone code received when calling [account.sendChangePhoneCode](https://docs.madelineproto.xyz/API_docs/methods/account.sendChangePhoneCode.html)
     *
     * @param array $params Parameters
     */
    public function changePhone(array $params): User;

    /**
     * When client-side passcode lock feature is enabled, will not show message texts in incoming [PUSH notifications](https://core.telegram.org/api/push-updates).
     *
     * Parameters:
     * * `int` **period** - Inactivity period after which to start hiding message texts in [PUSH notifications](https://core.telegram.org/api/push-updates).
     *
     * @param array $params Parameters
     */
    public function updateDeviceLocked(array $params): bool;

    /**
     * Get logged-in sessions.
     *
     * @return account.Authorizations
     */
    public function getAuthorizations(): account;

    /**
     * Log out an active [authorized session](https://core.telegram.org/api/auth) by its hash.
     *
     * Parameters:
     * * `long` **hash** - Session hash
     *
     * @param array $params Parameters
     */
    public function resetAuthorization(array $params): bool;

    /**
     * Obtain configuration for two-factor authorization with password.
     *
     * @return account.Password
     */
    public function getPassword(): account;

    /**
     * You cannot use this method directly; use $MadelineProto->update2fa($params), instead (see https://docs.madelineproto.xyz for more info).
     *
     * Parameters:
     * * `InputCheckPasswordSRP` **password** - The password (see [SRP](https://core.telegram.org/api/srp))
     *
     * @param array $params Parameters
     * @return account.PasswordSettings
     */
    public function getPasswordSettings(array $params): account;

    /**
     * You cannot use this method directly; use $MadelineProto->update2fa($params), instead (see https://docs.madelineproto.xyz for more info).
     *
     * Parameters:
     * * `InputCheckPasswordSRP`         **password**     - The old password (see [SRP](https://core.telegram.org/api/srp))
     * * `account.PasswordInputSettings` **new_settings** - The new password (see [SRP](https://core.telegram.org/api/srp))
     *
     * @param array $params Parameters
     */
    public function updatePasswordSettings(array $params): bool;

    /**
     * Send confirmation code to cancel account deletion, for more info [click here Â»](https://core.telegram.org/api/account-deletion).
     *
     * Parameters:
     * * `string`       **hash**     - The hash from the service notification, for more info [click here Â»](https://core.telegram.org/api/account-deletion)
     * * `CodeSettings` **settings** - Phone code settings
     *
     * @param array $params Parameters
     * @return auth.SentCode
     */
    public function sendConfirmPhoneCode(array $params): auth;

    /**
     * Confirm a phone number to cancel account deletion, for more info [click here Â»](https://core.telegram.org/api/account-deletion).
     *
     * Parameters:
     * * `string` **phone_code_hash** - Phone code hash, for more info [click here Â»](https://core.telegram.org/api/account-deletion)
     * * `string` **phone_code**      - SMS code, for more info [click here Â»](https://core.telegram.org/api/account-deletion)
     *
     * @param array $params Parameters
     */
    public function confirmPhone(array $params): bool;

    /**
     * Get temporary payment password.
     *
     * Parameters:
     * * `InputCheckPasswordSRP` **password** - SRP password parameters
     * * `int`                   **period**   - Time during which the temporary password will be valid, in seconds; should be between 60 and 86400
     *
     * @param array $params Parameters
     * @return account.TmpPassword
     */
    public function getTmpPassword(array $params): account;

    /**
     * Get web [login widget](https://core.telegram.org/widgets/login) authorizations.
     *
     * @return account.WebAuthorizations
     */
    public function getWebAuthorizations(): account;

    /**
     * Log out an active web [telegram login](https://core.telegram.org/widgets/login) session.
     *
     * Parameters:
     * * `long` **hash** - [Session](https://docs.madelineproto.xyz/API_docs/constructors/webAuthorization.html) hash
     *
     * @param array $params Parameters
     */
    public function resetWebAuthorization(array $params): bool;

    /**
     * Reset all active web [telegram login](https://core.telegram.org/widgets/login) sessions.
     */
    public function resetWebAuthorizations(): bool;

    /**
     * Get all saved [Telegram Passport](https://core.telegram.org/passport) documents, [for more info see the passport docs Â»](https://core.telegram.org/passport/encryption#encryption).
     *
     * @return  of SecureValue[]
     */
    public function getAllSecureValues(): of;

    /**
     * Get saved [Telegram Passport](https://core.telegram.org/passport) document, [for more info see the passport docs Â»](https://core.telegram.org/passport/encryption#encryption).
     *
     * Parameters:
     * * `[SecureValueType]` **types** - Requested value types
     *
     * @param array $params Parameters
     * @return  of SecureValue[]
     */
    public function getSecureValue(array $params): of;

    /**
     * Securely save [Telegram Passport](https://core.telegram.org/passport) document, [for more info see the passport docs Â»](https://core.telegram.org/passport/encryption#encryption).
     *
     * Parameters:
     * * `InputSecureValue` **value**            - Secure value, [for more info see the passport docs Â»](https://core.telegram.org/passport/encryption#encryption)
     * * `long`             **secure_secret_id** - Passport secret hash, [for more info see the passport docs Â»](https://core.telegram.org/passport/encryption#encryption)
     *
     * @param array $params Parameters
     */
    public function saveSecureValue(array $params): SecureValue;

    /**
     * Delete stored [Telegram Passport](https://core.telegram.org/passport) documents, [for more info see the passport docs Â»](https://core.telegram.org/passport/encryption#encryption).
     *
     * Parameters:
     * * `[SecureValueType]` **types** - Document types to delete
     *
     * @param array $params Parameters
     */
    public function deleteSecureValue(array $params): bool;

    /**
     * Returns a Telegram Passport authorization form for sharing data with a service.
     *
     * Parameters:
     * * `long`   **bot_id**     - User identifier of the service's bot
     * * `string` **scope**      - Telegram Passport element types requested by the service
     * * `string` **public_key** - Service's public key
     *
     * @param array $params Parameters
     * @return account.AuthorizationForm
     */
    public function getAuthorizationForm(array $params): account;

    /**
     * Sends a Telegram Passport authorization form, effectively sharing data with the service.
     *
     * Parameters:
     * * `long`                       **bot_id**       - Bot ID
     * * `string`                     **scope**        - Telegram Passport element types requested by the service
     * * `string`                     **public_key**   - Service's public key
     * * `[SecureValueHash]`          **value_hashes** - Types of values sent and their hashes
     * * `SecureCredentialsEncrypted` **credentials**  - Encrypted values
     *
     * @param array $params Parameters
     */
    public function acceptAuthorization(array $params): bool;

    /**
     * Send the verification phone code for telegram [passport](https://core.telegram.org/passport).
     *
     * Parameters:
     * * `string`       **phone_number** - The phone number to verify
     * * `CodeSettings` **settings**     - Phone code settings
     *
     * @param array $params Parameters
     * @return auth.SentCode
     */
    public function sendVerifyPhoneCode(array $params): auth;

    /**
     * Verify a phone number for telegram [passport](https://core.telegram.org/passport).
     *
     * Parameters:
     * * `string` **phone_number**    - Phone number
     * * `string` **phone_code_hash** - Phone code hash received from the call to [account.sendVerifyPhoneCode](https://docs.madelineproto.xyz/API_docs/methods/account.sendVerifyPhoneCode.html)
     * * `string` **phone_code**      - Code received after the call to [account.sendVerifyPhoneCode](https://docs.madelineproto.xyz/API_docs/methods/account.sendVerifyPhoneCode.html)
     *
     * @param array $params Parameters
     */
    public function verifyPhone(array $params): bool;

    /**
     * Send an email verification code.
     *
     * Parameters:
     * * `EmailVerifyPurpose` **purpose** -
     * * `string`             **email**   - The email where to send the code.
     *
     * @param array $params Parameters
     * @return account.SentEmailCode
     */
    public function sendVerifyEmailCode(array $params): account;

    /**
     * Verify an email address.
     *
     * Parameters:
     * * `EmailVerifyPurpose` **purpose**      -
     * * `EmailVerification`  **verification** -
     *
     * @param array $params Parameters
     * @return account.EmailVerified
     */
    public function verifyEmail(array $params): account;

    /**
     * Initialize account takeout session.
     *
     * Parameters:
     * * `boolean` **contacts**           - Optional: Whether to export contacts
     * * `boolean` **message_users**      - Optional: Whether to export messages in private chats
     * * `boolean` **message_chats**      - Optional: Whether to export messages in [basic groups](https://core.telegram.org/api/channel#basic-groups)
     * * `boolean` **message_megagroups** - Optional: Whether to export messages in [supergroups](https://core.telegram.org/api/channel#supergroups)
     * * `boolean` **message_channels**   - Optional: Whether to export messages in [channels](https://core.telegram.org/api/channel#channels)
     * * `boolean` **files**              - Optional: Whether to export files
     * * `long`    **file_max_size**      - Optional: Maximum size of files to export
     *
     * @param array $params Parameters
     * @return account.Takeout
     */
    public function initTakeoutSession(array $params): account;

    /**
     * Finish account takeout session.
     *
     * Parameters:
     * * `boolean` **success** - Optional: Data exported successfully
     *
     * @param array $params Parameters
     */
    public function finishTakeoutSession(array $params): bool;

    /**
     * Verify an email to use as [2FA recovery method](https://core.telegram.org/api/srp).
     *
     * Parameters:
     * * `string` **code** - The phone code that was received after [setting a recovery email](https://core.telegram.org/api/srp#email-verification)
     *
     * @param array $params Parameters
     */
    public function confirmPasswordEmail(array $params): bool;

    /**
     * Resend the code to verify an email to use as [2FA recovery method](https://core.telegram.org/api/srp).
     */
    public function resendPasswordEmail(): bool;

    /**
     * Cancel the code that was sent to verify an email to use as [2FA recovery method](https://core.telegram.org/api/srp).
     */
    public function cancelPasswordEmail(): bool;

    /**
     * Whether the user will receive notifications when contacts sign up.
     */
    public function getContactSignUpNotification(): bool;

    /**
     * Toggle contact sign up notifications.
     *
     * Parameters:
     * * `Bool` **silent** - Whether to disable contact sign up notifications
     *
     * @param array $params Parameters
     */
    public function setContactSignUpNotification(array $params): bool;

    /**
     * Returns list of chats with non-default notification settings.
     *
     * Parameters:
     * * `boolean`         **compare_sound** - Optional: If true, chats with non-default sound will also be returned
     * * `InputNotifyPeer` **peer**          - Optional: If specified, only chats of the specified category will be returned
     *
     * @param array $params Parameters
     */
    public function getNotifyExceptions(array $params): Updates;

    /**
     * Get info about a certain [wallpaper](https://core.telegram.org/api/wallpapers).
     *
     * Parameters:
     * * `InputWallPaper` **wallpaper** - The [wallpaper](https://core.telegram.org/api/wallpapers) to get info about
     *
     * @param array $params Parameters
     */
    public function getWallPaper(array $params): WallPaper;

    /**
     * Create and upload a new [wallpaper](https://core.telegram.org/api/wallpapers).
     *
     * Parameters:
     * * `InputFile`         **file**      - The JPG/PNG wallpaper
     * * `string`            **mime_type** - MIME type of uploaded wallpaper
     * * `WallPaperSettings` **settings**  - Wallpaper settings
     *
     * @param array $params Parameters
     */
    public function uploadWallPaper(array $params): WallPaper;

    /**
     * Install/uninstall [wallpaper](https://core.telegram.org/api/wallpapers).
     *
     * Parameters:
     * * `InputWallPaper`    **wallpaper** - [Wallpaper](https://core.telegram.org/api/wallpapers) to install or uninstall
     * * `Bool`              **unsave**    - Uninstall wallpaper?
     * * `WallPaperSettings` **settings**  - Wallpaper settings
     *
     * @param array $params Parameters
     */
    public function saveWallPaper(array $params): bool;

    /**
     * Install [wallpaper](https://core.telegram.org/api/wallpapers).
     *
     * Parameters:
     * * `InputWallPaper`    **wallpaper** - [Wallpaper](https://core.telegram.org/api/wallpapers) to install
     * * `WallPaperSettings` **settings**  - [Wallpaper](https://core.telegram.org/api/wallpapers) settings
     *
     * @param array $params Parameters
     */
    public function installWallPaper(array $params): bool;

    /**
     * Delete all installed [wallpapers](https://core.telegram.org/api/wallpapers), reverting to the default wallpaper set.
     */
    public function resetWallPapers(): bool;

    /**
     * Get media autodownload settings.
     *
     * @return account.AutoDownloadSettings
     */
    public function getAutoDownloadSettings(): account;

    /**
     * Change media autodownload settings.
     *
     * Parameters:
     * * `boolean`              **low**      - Optional: Whether to save media in the low data usage preset
     * * `boolean`              **high**     - Optional: Whether to save media in the high data usage preset
     * * `AutoDownloadSettings` **settings** - Media autodownload settings
     *
     * @param array $params Parameters
     */
    public function saveAutoDownloadSettings(array $params): bool;

    /**
     * Upload theme.
     *
     * Parameters:
     * * `InputFile` **file**      - [Previously uploaded](https://core.telegram.org/api/themes#uploading-theme-files) theme file with platform-specific colors for UI components, can be left unset when creating themes that only modify the wallpaper or accent colors.
     * * `InputFile` **thumb**     - Optional: Thumbnail
     * * `string`    **file_name** - File name
     * * `string`    **mime_type** - MIME type, must be `application/x-tgtheme-{format}`, where `format` depends on the client
     *
     * @param array $params Parameters
     */
    public function uploadTheme(array $params): Document;

    /**
     * Create a theme.
     *
     * Parameters:
     * * `string`               **slug**     - Unique theme ID used to generate [theme deep links](https://core.telegram.org/api/links#theme-links), can be empty to autogenerate a random ID.
     * * `string`               **title**    - Theme name
     * * `InputDocument`        **document** - Optional: Theme file
     * * `[InputThemeSettings]` **settings** - Optional: Theme settings, multiple values can be provided for the different base themes (day/night mode, etc).
     *
     * @param array $params Parameters
     */
    public function createTheme(array $params): Theme;

    /**
     * Update theme.
     *
     * Parameters:
     * * `string`               **format**   - Theme format, a string that identifies the theming engines supported by the client
     * * `InputTheme`           **theme**    - Theme to update
     * * `string`               **slug**     - Optional: Unique theme ID
     * * `string`               **title**    - Optional: Theme name
     * * `InputDocument`        **document** - Optional: Theme file
     * * `[InputThemeSettings]` **settings** - Optional: Theme settings
     *
     * @param array $params Parameters
     */
    public function updateTheme(array $params): Theme;

    /**
     * Save a theme.
     *
     * Parameters:
     * * `InputTheme` **theme**  - Theme to save
     * * `Bool`       **unsave** - Unsave
     *
     * @param array $params Parameters
     */
    public function saveTheme(array $params): bool;

    /**
     * Install a theme.
     *
     * Parameters:
     * * `boolean`    **dark**       - Optional: Whether to install the dark version
     * * `InputTheme` **theme**      - Optional: Theme to install
     * * `string`     **format**     - Optional: Theme format, a string that identifies the theming engines supported by the client
     * * `BaseTheme`  **base_theme** - Optional: Indicates a basic theme provided by all clients
     *
     * @param array $params Parameters
     */
    public function installTheme(array $params): bool;

    /**
     * Get theme information.
     *
     * Parameters:
     * * `string`     **format** - Theme format, a string that identifies the theming engines supported by the client
     * * `InputTheme` **theme**  - Theme
     *
     * @param array $params Parameters
     */
    public function getTheme(array $params): Theme;

    /**
     * Get installed themes.
     *
     * Parameters:
     * * `string` **format** - Theme format, a string that identifies the theming engines supported by the client
     * * `long`   **hash**   - [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)
     *
     * @param array $params Parameters
     * @return account.Themes
     */
    public function getThemes(array $params): account;

    /**
     * Set sensitive content settings (for viewing or hiding NSFW content).
     *
     * Parameters:
     * * `boolean` **sensitive_enabled** - Optional: Enable NSFW content
     *
     * @param array $params Parameters
     */
    public function setContentSettings(array $params): bool;

    /**
     * Get sensitive content settings.
     *
     * @return account.ContentSettings
     */
    public function getContentSettings(): account;

    /**
     * Get info about multiple [wallpapers](https://core.telegram.org/api/wallpapers).
     *
     * Parameters:
     * * `[InputWallPaper]` **wallpapers** - [Wallpapers](https://core.telegram.org/api/wallpapers) to fetch info about
     *
     * @param array $params Parameters
     * @return  of WallPaper[]
     */
    public function getMultiWallPapers(array $params): of;

    /**
     * Get global privacy settings.
     */
    public function getGlobalPrivacySettings(): GlobalPrivacySettings;

    /**
     * Set global privacy settings.
     *
     * Parameters:
     * * `GlobalPrivacySettings` **settings** - Global privacy settings
     *
     * @param array $params Parameters
     */
    public function setGlobalPrivacySettings(array $params): GlobalPrivacySettings;

    /**
     * Report a profile photo of a dialog.
     *
     * Parameters:
     * * `InputPeer`    **peer**     - The dialog
     * * `InputPhoto`   **photo_id** - Dialog photo ID
     * * `ReportReason` **reason**   - Report reason
     * * `string`       **message**  - Comment for report moderation
     *
     * @param array $params Parameters
     */
    public function reportProfilePhoto(array $params): bool;

    /**
     * Initiate a 2FA password reset: can only be used if the user is already logged-in, [see here for more info Â»](https://core.telegram.org/api/srp#password-reset).
     *
     * @return account.ResetPasswordResult
     */
    public function resetPassword(): account;

    /**
     * Abort a pending 2FA password reset, [see here for more info Â»](https://core.telegram.org/api/srp#password-reset).
     */
    public function declinePasswordReset(): bool;

    /**
     * Get all available chat themes.
     *
     * Parameters:
     * * `long` **hash** - [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)
     *
     * @param array $params Parameters
     * @return account.Themes
     */
    public function getChatThemes(array $params): account;

    /**
     * Set time-to-live of current session.
     *
     * Parameters:
     * * `int` **authorization_ttl_days** - Time-to-live of current session in days
     *
     * @param array $params Parameters
     */
    public function setAuthorizationTTL(array $params): bool;

    /**
     * Change authorization settings.
     *
     * Parameters:
     * * `long` **hash**                        - Session ID from the [authorization](https://docs.madelineproto.xyz/API_docs/constructors/authorization.html) constructor, fetchable using [account.getAuthorizations](https://docs.madelineproto.xyz/API_docs/methods/account.getAuthorizations.html)
     * * `Bool` **encrypted_requests_disabled** - Optional: Whether to enable or disable receiving encrypted chats: if the flag is not set, the previous setting is not changed
     * * `Bool` **call_requests_disabled**      - Optional: Whether to enable or disable receiving calls: if the flag is not set, the previous setting is not changed
     *
     * @param array $params Parameters
     */
    public function changeAuthorizationSettings(array $params): bool;

    /**
     * Fetch saved notification sounds.
     *
     * Parameters:
     * * `long` **hash** - [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)
     *
     * @param array $params Parameters
     * @return account.SavedRingtones
     */
    public function getSavedRingtones(array $params): account;

    /**
     * Save or remove saved notification sound.
     *
     * If the notification sound is already in MP3 format, [account.savedRingtone](https://docs.madelineproto.xyz/API_docs/constructors/account.savedRingtone.html) will be returned.
     * Otherwise, it will be automatically converted and a [account.savedRingtoneConverted](https://docs.madelineproto.xyz/API_docs/constructors/account.savedRingtoneConverted.html) will be returned, containing a new [document](https://docs.madelineproto.xyz/API_docs/constructors/document.html) object that should be used to refer to the ringtone from now on (ie when deleting it using the `unsave` parameter, or when downloading it).
     *
     * Parameters:
     * * `InputDocument` **id**     - Notification sound uploaded using [account.uploadRingtone](https://docs.madelineproto.xyz/API_docs/methods/account.uploadRingtone.html)
     * * `Bool`          **unsave** - Whether to add or delete the notification sound
     *
     * @param array $params Parameters
     * @return account.SavedRingtone
     */
    public function saveRingtone(array $params): account;

    /**
     * Upload notification sound, use [account.saveRingtone](https://docs.madelineproto.xyz/API_docs/methods/account.saveRingtone.html) to convert it and add it to the list of saved notification sounds.
     *
     * Parameters:
     * * `InputFile` **file**      - Notification sound
     * * `string`    **file_name** - File name
     * * `string`    **mime_type** - MIME type of file
     *
     * @param array $params Parameters
     */
    public function uploadRingtone(array $params): Document;

    /**
     * Parameters:
     * * `EmojiStatus` **emoji_status** -.
     *
     * @param array $params Parameters
     */
    public function updateEmojiStatus(array $params): bool;

    /**
     * Parameters:
     * * `long` **hash** -.
     *
     * @param array $params Parameters
     * @return account.EmojiStatuses
     */
    public function getDefaultEmojiStatuses(array $params): account;

    /**
     * Parameters:
     * * `long` **hash** -.
     *
     * @param array $params Parameters
     * @return account.EmojiStatuses
     */
    public function getRecentEmojiStatuses(array $params): account;

    public function clearRecentEmojiStatuses(): bool;

    /**
     * Parameters:
     * * `[string]` **order** -.
     *
     * @param array $params Parameters
     */
    public function reorderUsernames(array $params): bool;

    /**
     * Parameters:
     * * `string` **username** -
     * * `Bool`   **active**   -.
     *
     * @param array $params Parameters
     */
    public function toggleUsername(array $params): bool;
}

interface users
{
    /**
     * You cannot use this method directly, use the getPwrChat, getInfo, getFullInfo methods instead (see https://docs.madelineproto.xyz for more info).
     *
     * Parameters:
     * * `[InputUser]` **id** - List of user identifiers
     *
     * @param array $params Parameters
     * @return  of User[]
     */
    public function getUsers(array $params): of;

    /**
     * You cannot use this method directly, use the getPwrChat, getInfo, getFullInfo methods instead (see https://docs.madelineproto.xyz for more info).
     *
     * Parameters:
     * * `InputUser` **id** - User ID
     *
     * @param array $params Parameters
     * @return users.UserFull
     */
    public function getFullUser(array $params): users;

    /**
     * Notify the user that the sent [passport](https://core.telegram.org/passport) data contains some errors The user will not be able to re-submit their Passport data to you until the errors are fixed (the contents of the field for which you returned the error must change).
     *
     * Use this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.
     *
     * Parameters:
     * * `InputUser`          **id**     - The user
     * * `[SecureValueError]` **errors** - Errors
     *
     * @param array $params Parameters
     */
    public function setSecureValueErrors(array $params): bool;
}

interface contacts
{
    /**
     * Get contact by telegram IDs.
     *
     * Parameters:
     * * `long` **hash** - [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)
     *
     * @param array $params Parameters
     * @return  of int[]
     */
    public function getContactIDs(array $params): of;

    /**
     * Returns the list of contact statuses.
     *
     * @return  of ContactStatus[]
     */
    public function getStatuses(): of;

    /**
     * Returns the current user's contact list.
     *
     * Parameters:
     * * `long` **hash** - If there already is a full contact list on the client, a [hash](https://core.telegram.org/api/offsets#hash-generation) of a the list of contact IDs in ascending order may be passed in this parameter. If the contact set was not changed, [(contacts.contactsNotModified)](https://docs.madelineproto.xyz/API_docs/constructors/contacts.contactsNotModified.html) will be returned.
     *
     * @param array $params Parameters
     * @return contacts.Contacts
     */
    public function getContacts(array $params): contacts;

    /**
     * Imports contacts: saves a full list on the server, adds already registered contacts to the contact list, returns added contacts and their info.
     *
     * Use [contacts.addContact](https://docs.madelineproto.xyz/API_docs/methods/contacts.addContact.html) to add Telegram contacts without actually using their phone number.
     *
     * Parameters:
     * * `[InputContact]` **contacts** - List of contacts to import
     *
     * @param array $params Parameters
     * @return contacts.ImportedContacts
     */
    public function importContacts(array $params): contacts;

    /**
     * Deletes several contacts from the list.
     *
     * Parameters:
     * * `[InputUser]` **id** - User ID list
     *
     * @param array $params Parameters
     */
    public function deleteContacts(array $params): Updates;

    /**
     * Delete contacts by phone number.
     *
     * Parameters:
     * * `[string]` **phones** - Phone numbers
     *
     * @param array $params Parameters
     */
    public function deleteByPhones(array $params): bool;

    /**
     * Adds the user to the blacklist.
     *
     * Parameters:
     * * `InputPeer` **id** - User ID
     *
     * @param array $params Parameters
     */
    public function block(array $params): bool;

    /**
     * Deletes the user from the blacklist.
     *
     * Parameters:
     * * `InputPeer` **id** - User ID
     *
     * @param array $params Parameters
     */
    public function unblock(array $params): bool;

    /**
     * Returns the list of blocked users.
     *
     * Parameters:
     * * `int` **offset** - The number of list elements to be skipped
     * * `int` **limit**  - The number of list elements to be returned
     *
     * @param array $params Parameters
     * @return contacts.Blocked
     */
    public function getBlocked(array $params): contacts;

    /**
     * Returns users found by username substring.
     *
     * Parameters:
     * * `string` **q**     - Target substring
     * * `int`    **limit** - Maximum number of users to be returned
     *
     * @param array $params Parameters
     * @return contacts.Found
     */
    public function search(array $params): contacts;

    /**
     * You cannot use this method directly, use the resolveUsername, getPwrChat, getInfo, getFullInfo methods instead (see https://docs.madelineproto.xyz for more info).
     *
     * Parameters:
     * * `string` **username** - @username to resolve
     *
     * @param array $params Parameters
     * @return contacts.ResolvedPeer
     */
    public function resolveUsername(array $params): contacts;

    /**
     * Get most used peers.
     *
     * Parameters:
     * * `boolean` **correspondents** - Optional: Users we've chatted most frequently with
     * * `boolean` **bots_pm**        - Optional: Most used bots
     * * `boolean` **bots_inline**    - Optional: Most used inline bots
     * * `boolean` **phone_calls**    - Optional: Most frequently called users
     * * `boolean` **forward_users**  - Optional: Users to which the users often forwards messages to
     * * `boolean` **forward_chats**  - Optional: Chats to which the users often forwards messages to
     * * `boolean` **groups**         - Optional: Often-opened groups and supergroups
     * * `boolean` **channels**       - Optional: Most frequently visited channels
     * * `int`     **offset**         - Offset for [pagination](https://core.telegram.org/api/offsets)
     * * `int`     **limit**          - Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)
     * * `long`    **hash**           - [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)
     *
     * @param array $params Parameters
     * @return contacts.TopPeers
     */
    public function getTopPeers(array $params): contacts;

    /**
     * Reset [rating](https://core.telegram.org/api/top-rating) of top peer.
     *
     * Parameters:
     * * `TopPeerCategory` **category** - Top peer category
     * * `InputPeer`       **peer**     - Peer whose rating should be reset
     *
     * @param array $params Parameters
     */
    public function resetTopPeerRating(array $params): bool;

    /**
     * Delete saved contacts.
     */
    public function resetSaved(): bool;

    /**
     * Get all contacts.
     *
     * @return  of SavedContact[]
     */
    public function getSaved(): of;

    /**
     * Enable/disable [top peers](https://core.telegram.org/api/top-rating).
     *
     * Parameters:
     * * `Bool` **enabled** - Enable/disable
     *
     * @param array $params Parameters
     */
    public function toggleTopPeers(array $params): bool;

    /**
     * Add an existing telegram user as contact.
     *
     * Use [contacts.importContacts](https://docs.madelineproto.xyz/API_docs/methods/contacts.importContacts.html) to add contacts by phone number, without knowing their Telegram ID.
     *
     * Parameters:
     * * `boolean`   **add_phone_privacy_exception** - Optional: Allow the other user to see our phone number?
     * * `InputUser` **id**                          - Telegram ID of the other user
     * * `string`    **first_name**                  - First name
     * * `string`    **last_name**                   - Last name
     * * `string`    **phone**                       - User's phone number
     *
     * @param array $params Parameters
     */
    public function addContact(array $params): Updates;

    /**
     * If the [peer settings](https://docs.madelineproto.xyz/API_docs/constructors/peerSettings.html) of a new user allow us to add them as contact, add that user as contact.
     *
     * Parameters:
     * * `InputUser` **id** - The user to add as contact
     *
     * @param array $params Parameters
     */
    public function acceptContact(array $params): Updates;

    /**
     * Get contacts near you.
     *
     * Parameters:
     * * `boolean`       **background**   - Optional: While the geolocation of the current user is public, clients should update it in the background every half-an-hour or so, while setting this flag. <br>Do this only if the new location is more than 1 KM away from the previous one, or if the previous location is unknown.
     * * `InputGeoPoint` **geo_point**    - Geolocation
     * * `int`           **self_expires** - Optional: If set, the geolocation of the current user will be public for the specified number of seconds; pass 0x7fffffff to disable expiry, 0 to make the current geolocation private; if the flag isn't set, no changes will be applied.
     *
     * @param array $params Parameters
     */
    public function getLocated(array $params): Updates;

    /**
     * Stop getting notifications about [thread replies](https://core.telegram.org/api/threads) of a certain user in `@replies`.
     *
     * Parameters:
     * * `boolean` **delete_message** - Optional: Whether to delete the specified message as well
     * * `boolean` **delete_history** - Optional: Whether to delete all `@replies` messages from this user as well
     * * `boolean` **report_spam**    - Optional: Whether to also report this user for spam
     * * `int`     **msg_id**         - ID of the message in the [@replies](https://core.telegram.org/api/threads#replies) chat
     *
     * @param array $params Parameters
     */
    public function blockFromReplies(array $params): Updates;

    /**
     * Resolve a phone number to get user info, if their privacy settings allow it.
     *
     * Parameters:
     * * `string` **phone** - Phone number in international format, possibly obtained from a [phone number deep link](https://core.telegram.org/api/links#phone-number-links).
     *
     * @param array $params Parameters
     * @return contacts.ResolvedPeer
     */
    public function resolvePhone(array $params): contacts;

    public function exportContactToken(): ExportedContactToken;

    /**
     * Parameters:
     * * `string` **token** -.
     *
     * @param array $params Parameters
     */
    public function importContactToken(array $params): User;
}

interface messages
{
    /**
     * Please use the [event handler](https://docs.madelineproto.xyz/docs/UPDATES.html).
     *
     * Parameters:
     * * `[InputMessage]` **id** - Message ID list
     *
     * @param array $params Parameters
     * @return messages.Messages
     */
    public function getMessages(array $params): messages;

    /**
     * Returns the current user dialog list.
     *
     * Parameters:
     * * `boolean`   **exclude_pinned** - Optional: Exclude pinned dialogs
     * * `int`       **folder_id**      - Optional: [Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders)
     * * `int`       **offset_date**    - [Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)
     * * `int`       **offset_id**      - [Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)
     * * `InputPeer` **offset_peer**    - [Offset peer for pagination](https://core.telegram.org/api/offsets)
     * * `int`       **limit**          - Number of list elements to be returned
     * * `long`      **hash**           - [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)
     *
     * @param array $params Parameters
     * @return messages.Dialogs
     */
    public function getDialogs(array $params): messages;

    /**
     * Please use the [event handler](https://docs.madelineproto.xyz/docs/UPDATES.html).
     *
     * Parameters:
     * * `InputPeer` **peer**        - Target peer
     * * `int`       **offset_id**   - Only return messages starting from the specified message ID
     * * `int`       **offset_date** - Only return messages sent before the specified date
     * * `int`       **add_offset**  - Number of list elements to be skipped, negative values are also accepted.
     * * `int`       **limit**       - Number of results to return
     * * `int`       **max_id**      - If a positive value was transferred, the method will return only messages with IDs less than **max\_id**
     * * `int`       **min_id**      - If a positive value was transferred, the method will return only messages with IDs more than **min\_id**
     * * `long`      **hash**        - [Result hash](https://core.telegram.org/api/offsets)
     *
     * @param array $params Parameters
     * @return messages.Messages
     */
    public function getHistory(array $params): messages;

    /**
     * Returns found messages.
     *
     * Parameters:
     * * `InputPeer`      **peer**       - User or chat, histories with which are searched, or [(inputPeerEmpty)](https://docs.madelineproto.xyz/API_docs/constructors/inputPeerEmpty.html) constructor for global search
     * * `string`         **q**          - Text search request
     * * `InputPeer`      **from_id**    - Optional: Only return messages sent by the specified user ID
     * * `int`            **top_msg_id** - Optional: [Thread ID](https://core.telegram.org/api/threads)
     * * `MessagesFilter` **filter**     - Filter to return only specified message types
     * * `int`            **min_date**   - If a positive value was transferred, only messages with a sending date bigger than the transferred one will be returned
     * * `int`            **max_date**   - If a positive value was transferred, only messages with a sending date smaller than the transferred one will be returned
     * * `int`            **offset_id**  - Only return messages starting from the specified message ID
     * * `int`            **add_offset** - [Additional offset](https://core.telegram.org/api/offsets)
     * * `int`            **limit**      - [Number of results to return](https://core.telegram.org/api/offsets)
     * * `int`            **max_id**     - [Maximum message ID to return](https://core.telegram.org/api/offsets)
     * * `int`            **min_id**     - [Minimum message ID to return](https://core.telegram.org/api/offsets)
     * * `long`           **hash**       - [Hash](https://core.telegram.org/api/offsets)
     *
     * @param array $params Parameters
     * @return messages.Messages
     */
    public function search(array $params): messages;

    /**
     * Marks message history as read.
     *
     * Parameters:
     * * `InputPeer` **peer**   - Target user or group
     * * `int`       **max_id** - If a positive value is passed, only messages with identifiers less or equal than the given one will be read
     *
     * @param array $params Parameters
     * @return messages.AffectedMessages
     */
    public function readHistory(array $params): messages;

    /**
     * Deletes communication history.
     *
     * Parameters:
     * * `boolean`   **just_clear** - Optional: Just clear history for the current user, without actually removing messages for every chat user
     * * `boolean`   **revoke**     - Optional: Whether to delete the message history for all chat participants
     * * `InputPeer` **peer**       - User or chat, communication history of which will be deleted
     * * `int`       **max_id**     - Maximum ID of message to delete
     * * `int`       **min_date**   - Optional: Delete all messages newer than this UNIX timestamp
     * * `int`       **max_date**   - Optional: Delete all messages older than this UNIX timestamp
     *
     * @param array $params Parameters
     * @return messages.AffectedHistory
     */
    public function deleteHistory(array $params): messages;

    /**
     * Deletes messages by their identifiers.
     *
     * Parameters:
     * * `boolean` **revoke** - Optional: Whether to delete messages for all participants of the chat
     * * `[int]`   **id**     - Message ID list
     *
     * @param array $params Parameters
     * @return messages.AffectedMessages
     */
    public function deleteMessages(array $params): messages;

    /**
     * Confirms receipt of messages by a client, cancels PUSH-notification sending.
     *
     * Parameters:
     * * `int` **max_id** - Maximum message ID available in a client.
     *
     * @param array $params Parameters
     * @return  of ReceivedNotifyMessage[]
     */
    public function receivedMessages(array $params): of;

    /**
     * Sends a current user typing event (see [SendMessageAction](https://docs.madelineproto.xyz/API_docs/types/SendMessageAction.html) for all event types) to a conversation partner or group.
     *
     * Parameters:
     * * `InputPeer`         **peer**       - Target user or group
     * * `int`               **top_msg_id** - Optional: [Thread ID](https://core.telegram.org/api/threads)
     * * `SendMessageAction` **action**     - Type of action
     *
     * @param array $params Parameters
     */
    public function setTyping(array $params): bool;

    /**
     * Sends a message to a chat.
     *
     * Parameters:
     * * `boolean`         **no_webpage**               - Optional: Set this flag to disable generation of the webpage preview
     * * `boolean`         **silent**                   - Optional: Send this message silently (no notifications for the receivers)
     * * `boolean`         **background**               - Optional: Send this message as background message
     * * `boolean`         **clear_draft**              - Optional: Clear the draft field
     * * `boolean`         **noforwards**               - Optional: Only for bots, disallows forwarding and saving of the messages, even if the destination chat doesn't have [content protection](https://telegram.org/blog/protected-content-delete-by-date-and-more) enabled
     * * `boolean`         **update_stickersets_order** - Optional:
     * * `InputPeer`       **peer**                     - The destination where the message will be sent
     * * `int`             **reply_to_msg_id**          - Optional: The message ID to which this message will reply to
     * * `int`             **top_msg_id**               - Optional:
     * * `string`          **message**                  - The message
     * * `ReplyMarkup`     **reply_markup**             - Optional: Reply markup for sending bot buttons
     * * `[MessageEntity]` **entities**                 - Optional: Message [entities](https://core.telegram.org/api/entities) for sending styled text
     * * `int`             **schedule_date**            - Optional: Scheduled message date for [scheduled messages](https://core.telegram.org/api/scheduled-messages)
     * * `InputPeer`       **send_as**                  - Optional: Send this message as the specified peer
     *
     * @param array $params Parameters
     */
    public function sendMessage(array $params): Updates;

    /**
     * Send a media.
     *
     * Parameters:
     * * `boolean`         **silent**                   - Optional: Send message silently (no notification should be triggered)
     * * `boolean`         **background**               - Optional: Send message in background
     * * `boolean`         **clear_draft**              - Optional: Clear the draft
     * * `boolean`         **noforwards**               - Optional: Only for bots, disallows forwarding and saving of the messages, even if the destination chat doesn't have [content protection](https://telegram.org/blog/protected-content-delete-by-date-and-more) enabled
     * * `boolean`         **update_stickersets_order** - Optional:
     * * `InputPeer`       **peer**                     - Destination
     * * `int`             **reply_to_msg_id**          - Optional: Message ID to which this message should reply to
     * * `int`             **top_msg_id**               - Optional:
     * * `InputMedia`      **media**                    - Attached media
     * * `string`          **message**                  - Caption
     * * `ReplyMarkup`     **reply_markup**             - Optional: Reply markup for bot keyboards
     * * `[MessageEntity]` **entities**                 - Optional: Message [entities](https://core.telegram.org/api/entities) for styled text
     * * `int`             **schedule_date**            - Optional: Scheduled message date for [scheduled messages](https://core.telegram.org/api/scheduled-messages)
     * * `InputPeer`       **send_as**                  - Optional: Send this message as the specified peer
     *
     * @param array $params Parameters
     */
    public function sendMedia(array $params): Updates;

    /**
     * Forwards messages by their IDs.
     *
     * Parameters:
     * * `boolean`   **silent**              - Optional: Whether to send messages silently (no notification will be triggered on the destination clients)
     * * `boolean`   **background**          - Optional: Whether to send the message in background
     * * `boolean`   **with_my_score**       - Optional: When forwarding games, whether to include your score in the game
     * * `boolean`   **drop_author**         - Optional: Whether to forward messages without quoting the original author
     * * `boolean`   **drop_media_captions** - Optional: Whether to strip captions from media
     * * `boolean`   **noforwards**          - Optional: Only for bots, disallows further re-forwarding and saving of the messages, even if the destination chat doesn't have [content protection](https://telegram.org/blog/protected-content-delete-by-date-and-more) enabled
     * * `InputPeer` **from_peer**           - Source of messages
     * * `[int]`     **id**                  - IDs of messages
     * * `InputPeer` **to_peer**             - Destination peer
     * * `int`       **top_msg_id**          - Optional:
     * * `int`       **schedule_date**       - Optional: Scheduled message date for scheduled messages
     * * `InputPeer` **send_as**             - Optional: Forward the messages as the specified peer
     *
     * @param array $params Parameters
     */
    public function forwardMessages(array $params): Updates;

    /**
     * Report a new incoming chat for spam, if the [peer settings](https://docs.madelineproto.xyz/API_docs/constructors/peerSettings.html) of the chat allow us to do that.
     *
     * Parameters:
     * * `InputPeer` **peer** - Peer to report
     *
     * @param array $params Parameters
     */
    public function reportSpam(array $params): bool;

    /**
     * Get peer settings.
     *
     * Parameters:
     * * `InputPeer` **peer** - The peer
     *
     * @param array $params Parameters
     * @return messages.PeerSettings
     */
    public function getPeerSettings(array $params): messages;

    /**
     * Report a message in a chat for violation of telegram's Terms of Service.
     *
     * Parameters:
     * * `InputPeer`    **peer**    - Peer
     * * `[int]`        **id**      - IDs of messages to report
     * * `ReportReason` **reason**  - Why are these messages being reported
     * * `string`       **message** - Comment for report moderation
     *
     * @param array $params Parameters
     */
    public function report(array $params): bool;

    /**
     * Returns chat basic info on their IDs.
     *
     * Parameters:
     * * `[long]` **id** - List of chat IDs
     *
     * @param array $params Parameters
     * @return messages.Chats
     */
    public function getChats(array $params): messages;

    /**
     * You cannot use this method directly, use the getPwrChat, getInfo, getFullInfo methods instead (see https://docs.madelineproto.xyz for more info).
     *
     * Parameters:
     * * `InputPeer` **chat_id** -
     *
     * @param array $params Parameters
     * @return messages.ChatFull
     */
    public function getFullChat(array $params): messages;

    /**
     * Changes chat name and sends a service message on it.
     *
     * Parameters:
     * * `InputPeer` **chat_id** -
     * * `string`    **title**   - New chat name, different from the old one
     *
     * @param array $params Parameters
     */
    public function editChatTitle(array $params): Updates;

    /**
     * Changes chat photo and sends a service message on it.
     *
     * Parameters:
     * * `InputPeer`      **chat_id** -
     * * `InputChatPhoto` **photo**   - Photo to be set
     *
     * @param array $params Parameters
     */
    public function editChatPhoto(array $params): Updates;

    /**
     * Adds a user to a chat and sends a service message on it.
     *
     * Parameters:
     * * `InputPeer` **chat_id**   -
     * * `InputUser` **user_id**   - User ID to be added
     * * `int`       **fwd_limit** - Number of last messages to be forwarded
     *
     * @param array $params Parameters
     */
    public function addChatUser(array $params): Updates;

    /**
     * Deletes a user from a chat and sends a service message on it.
     *
     * Parameters:
     * * `boolean`   **revoke_history** - Optional: Remove the entire chat history of the specified user in this chat.
     * * `InputPeer` **chat_id**        -
     * * `InputUser` **user_id**        - User ID to be deleted
     *
     * @param array $params Parameters
     */
    public function deleteChatUser(array $params): Updates;

    /**
     * Creates a new chat.
     *
     * Parameters:
     * * `[InputUser]` **users**      - List of user IDs to be invited
     * * `string`      **title**      - Chat name
     * * `int`         **ttl_period** - Optional:
     *
     * @param array $params Parameters
     */
    public function createChat(array $params): Updates;

    /**
     * You cannot use this method directly, instead use $MadelineProto->getDhConfig();.
     *
     * Parameters:
     * * `int` **version**       - Value of the **version** parameter from [messages.dhConfig](https://docs.madelineproto.xyz/API_docs/constructors/messages.dhConfig.html), available at the client
     * * `int` **random_length** - Length of the required random sequence
     *
     * @param array $params Parameters
     * @return messages.DhConfig
     */
    public function getDhConfig(array $params): messages;

    /**
     * You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling secret chats.
     *
     * Parameters:
     * * `InputUser` **user_id** - User ID
     * * `bytes`     **g_a**     - `A = g ^ a mod p`, see [Wikipedia](https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange)
     *
     * @param array $params Parameters
     */
    public function requestEncryption(array $params): EncryptedChat;

    /**
     * You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling secret chats.
     *
     * Parameters:
     * * `InputEncryptedChat` **peer**            - Secret chat ID
     * * `bytes`              **g_b**             - `B = g ^ b mod p`, see [Wikipedia](https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange)
     * * `long`               **key_fingerprint** - 64-bit fingerprint of the received key
     *
     * @param array $params Parameters
     */
    public function acceptEncryption(array $params): EncryptedChat;

    /**
     * You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling secret chats.
     *
     * Parameters:
     * * `boolean` **delete_history** - Optional: Whether to delete the entire chat history for the other user as well
     * * `int`     **chat_id**        - Secret chat ID
     *
     * @param array $params Parameters
     */
    public function discardEncryption(array $params): bool;

    /**
     * Send typing event by the current user to a secret chat.
     *
     * Parameters:
     * * `InputEncryptedChat` **peer**   - Secret chat ID
     * * `Bool`               **typing** - Typing.<br>**Possible values**:<br>[(boolTrue)](https://docs.madelineproto.xyz/API_docs/constructors/boolTrue.html), if the user started typing and more than **5 seconds** have passed since the last request<br>[(boolFalse)](https://docs.madelineproto.xyz/API_docs/constructors/boolFalse.html), if the user stopped typing
     *
     * @param array $params Parameters
     */
    public function setEncryptedTyping(array $params): bool;

    /**
     * Marks message history within a secret chat as read.
     *
     * Parameters:
     * * `InputEncryptedChat` **peer**     - Secret chat ID
     * * `int`                **max_date** - Maximum date value for received messages in history
     *
     * @param array $params Parameters
     */
    public function readEncryptedHistory(array $params): bool;

    /**
     * Sends a text message to a secret chat.
     *
     * Parameters:
     * * `boolean`            **silent**  - Optional: Send encrypted message without a notification
     * * `InputEncryptedChat` **peer**    - Secret chat ID
     * * `DecryptedMessage`   **message** -
     *
     * @param array $params Parameters
     * @return messages.SentEncryptedMessage
     */
    public function sendEncrypted(array $params): messages;

    /**
     * Sends a message with a file attachment to a secret chat.
     *
     * Parameters:
     * * `boolean`            **silent**  - Optional: Whether to send the file without triggering a notification
     * * `InputEncryptedChat` **peer**    - Secret chat ID
     * * `DecryptedMessage`   **message** -
     * * `InputEncryptedFile` **file**    - File attachment for the secret chat
     *
     * @param array $params Parameters
     * @return messages.SentEncryptedMessage
     */
    public function sendEncryptedFile(array $params): messages;

    /**
     * Sends a service message to a secret chat.
     *
     * Parameters:
     * * `InputEncryptedChat` **peer**    - Secret chat ID
     * * `DecryptedMessage`   **message** -
     *
     * @param array $params Parameters
     * @return messages.SentEncryptedMessage
     */
    public function sendEncryptedService(array $params): messages;

    /**
     * You cannot use this method directly.
     *
     * Parameters:
     * * `int` **max_qts** - Maximum qts value available at the client
     *
     * @param array $params Parameters
     * @return  of long[]
     */
    public function receivedQueue(array $params): of;

    /**
     * Report a secret chat for spam.
     *
     * Parameters:
     * * `InputEncryptedChat` **peer** - The secret chat to report
     *
     * @param array $params Parameters
     */
    public function reportEncryptedSpam(array $params): bool;

    /**
     * Notifies the sender about the recipient having listened a voice message or watched a video.
     *
     * Parameters:
     * * `[int]` **id** - Message ID list
     *
     * @param array $params Parameters
     * @return messages.AffectedMessages
     */
    public function readMessageContents(array $params): messages;

    /**
     * Get stickers by emoji.
     *
     * Parameters:
     * * `string` **emoticon** - The emoji
     * * `long`   **hash**     - [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)
     *
     * @param array $params Parameters
     * @return messages.Stickers
     */
    public function getStickers(array $params): messages;

    /**
     * Get all installed stickers.
     *
     * Parameters:
     * * `long` **hash** - [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)
     *
     * @param array $params Parameters
     * @return messages.AllStickers
     */
    public function getAllStickers(array $params): messages;

    /**
     * Get preview of webpage.
     *
     * Parameters:
     * * `string`          **message**  - Message from which to extract the preview
     * * `[MessageEntity]` **entities** - Optional: [Message entities for styled text](https://core.telegram.org/api/entities)
     *
     * @param array $params Parameters
     */
    public function getWebPagePreview(array $params): MessageMedia;

    /**
     * Export an invite link for a chat.
     *
     * Parameters:
     * * `boolean`   **legacy_revoke_permanent** - Optional: Legacy flag, reproducing legacy behavior of this method: if set, revokes all previous links before creating a new one. Kept for bot API BC, should not be used by modern clients.
     * * `boolean`   **request_needed**          - Optional: Whether admin confirmation is required before admitting each separate user into the chat
     * * `InputPeer` **peer**                    - Chat
     * * `int`       **expire_date**             - Optional: Expiration date
     * * `int`       **usage_limit**             - Optional: Maximum number of users that can join using this link
     * * `string`    **title**                   - Optional: Description of the invite link, visible only to administrators
     *
     * @param array $params Parameters
     */
    public function exportChatInvite(array $params): ExportedChatInvite;

    /**
     * Check the validity of a chat invite link and get basic info about it.
     *
     * Parameters:
     * * `string` **hash** - Invite hash from [chat invite deep link Â»](https://core.telegram.org/api/links#chat-invite-links).
     *
     * @param array $params Parameters
     */
    public function checkChatInvite(array $params): ChatInvite;

    /**
     * Import a chat invite and join a private chat/supergroup/channel.
     *
     * Parameters:
     * * `string` **hash** - `hash` from a [chat invite deep link](https://core.telegram.org/api/links#chat-invite-links)
     *
     * @param array $params Parameters
     */
    public function importChatInvite(array $params): Updates;

    /**
     * Get info about a stickerset.
     *
     * Parameters:
     * * `InputStickerSet` **stickerset** - Stickerset
     * * `[int]`           **hash**       - Optional: [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)
     *
     * @param array $params Parameters
     * @return messages.StickerSet
     */
    public function getStickerSet(array $params): messages;

    /**
     * Install a stickerset.
     *
     * Parameters:
     * * `InputStickerSet` **stickerset** - Stickerset to install
     * * `Bool`            **archived**   - Whether to archive stickerset
     *
     * @param array $params Parameters
     * @return messages.StickerSetInstallResult
     */
    public function installStickerSet(array $params): messages;

    /**
     * Uninstall a stickerset.
     *
     * Parameters:
     * * `InputStickerSet` **stickerset** - The stickerset to uninstall
     *
     * @param array $params Parameters
     */
    public function uninstallStickerSet(array $params): bool;

    /**
     * Start a conversation with a bot using a [deep linking parameter](https://core.telegram.org/api/links#bot-links).
     *
     * Parameters:
     * * `InputUser` **bot**         - The bot
     * * `InputPeer` **peer**        - The chat where to start the bot, can be the bot's private chat or a group
     * * `string`    **start_param** - [Deep linking parameter](https://core.telegram.org/api/links#bot-links)
     *
     * @param array $params Parameters
     */
    public function startBot(array $params): Updates;

    /**
     * Get and increase the view counter of a message sent or forwarded from a [channel](https://core.telegram.org/api/channel).
     *
     * Parameters:
     * * `InputPeer` **peer**      - Peer where the message was found
     * * `[int]`     **id**        - ID of message
     * * `Bool`      **increment** - Whether to mark the message as viewed and increment the view counter
     *
     * @param array $params Parameters
     * @return messages.MessageViews
     */
    public function getMessagesViews(array $params): messages;

    /**
     * Make a user admin in a [basic group](https://core.telegram.org/api/channel#basic-groups).
     *
     * Parameters:
     * * `InputPeer` **chat_id**  -
     * * `InputUser` **user_id**  - The user to make admin
     * * `Bool`      **is_admin** - Whether to make them admin
     *
     * @param array $params Parameters
     */
    public function editChatAdmin(array $params): bool;

    /**
     * Turn a [basic group into a supergroup](https://core.telegram.org/api/channel#migration).
     *
     * Parameters:
     * * `InputPeer` **chat_id** -
     *
     * @param array $params Parameters
     */
    public function migrateChat(array $params): Updates;

    /**
     * Search for messages and peers globally.
     *
     * Parameters:
     * * `int`            **folder_id**   - Optional: [Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders)
     * * `string`         **q**           - Query
     * * `MessagesFilter` **filter**      - Global search filter
     * * `int`            **min_date**    - If a positive value was specified, the method will return only messages with date bigger than min\_date
     * * `int`            **max_date**    - If a positive value was transferred, the method will return only messages with date smaller than max\_date
     * * `int`            **offset_rate** - Initially 0, then set to the [`next_rate` parameter of messages.messagesSlice](https://docs.madelineproto.xyz/API_docs/constructors/messages.messagesSlice.html)
     * * `InputPeer`      **offset_peer** - [Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)
     * * `int`            **offset_id**   - [Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)
     * * `int`            **limit**       - [Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)
     *
     * @param array $params Parameters
     * @return messages.Messages
     */
    public function searchGlobal(array $params): messages;

    /**
     * Reorder installed stickersets.
     *
     * Parameters:
     * * `boolean` **masks**  - Optional: Reorder mask stickersets
     * * `boolean` **emojis** - Optional: Reorder [custom emoji stickersets](https://core.telegram.org/api/custom-emoji)
     * * `[long]`  **order**  - New stickerset order by stickerset IDs
     *
     * @param array $params Parameters
     */
    public function reorderStickerSets(array $params): bool;

    /**
     * Get a document by its SHA256 hash, mainly used for gifs.
     *
     * Parameters:
     * * `bytes`  **sha256**    - SHA256 of file
     * * `long`   **size**      - Size of the file in bytes
     * * `string` **mime_type** - Mime type
     *
     * @param array $params Parameters
     */
    public function getDocumentByHash(array $params): Document;

    /**
     * Get saved GIFs.
     *
     * Parameters:
     * * `long` **hash** - [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)
     *
     * @param array $params Parameters
     * @return messages.SavedGifs
     */
    public function getSavedGifs(array $params): messages;

    /**
     * Add GIF to saved gifs list.
     *
     * Parameters:
     * * `InputDocument` **id**     - GIF to save
     * * `Bool`          **unsave** - Whether to remove GIF from saved gifs list
     *
     * @param array $params Parameters
     */
    public function saveGif(array $params): bool;

    /**
     * Query an inline bot.
     *
     * Parameters:
     * * `InputUser`     **bot**       - The bot to query
     * * `InputPeer`     **peer**      - The currently opened chat
     * * `InputGeoPoint` **geo_point** - Optional: The geolocation, if requested
     * * `string`        **query**     - The query
     * * `string`        **offset**    - The offset within the results, will be passed directly as-is to the bot.
     *
     * @param array $params Parameters
     * @return messages.BotResults
     */
    public function getInlineBotResults(array $params): messages;

    /**
     * Answer an inline query, for bots only.
     *
     * Parameters:
     * * `boolean`                **gallery**     - Optional: Set this flag if the results are composed of media files
     * * `boolean`                **private**     - Optional: Set this flag if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query
     * * `long`                   **query_id**    - Unique identifier for the answered query
     * * `[InputBotInlineResult]` **results**     - Vector of results for the inline query
     * * `int`                    **cache_time**  - The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.
     * * `string`                 **next_offset** - Optional: Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes.
     * * `InlineBotSwitchPM`      **switch_pm**   - Optional: If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with a certain parameter.
     *
     * @param array $params Parameters
     */
    public function setInlineBotResults(array $params): bool;

    /**
     * Send a result obtained using [messages.getInlineBotResults](https://docs.madelineproto.xyz/API_docs/methods/messages.getInlineBotResults.html).
     *
     * Parameters:
     * * `boolean`   **silent**          - Optional: Whether to send the message silently (no notification will be triggered on the other client)
     * * `boolean`   **background**      - Optional: Whether to send the message in background
     * * `boolean`   **clear_draft**     - Optional: Whether to clear the [draft](https://core.telegram.org/api/drafts)
     * * `boolean`   **hide_via**        - Optional: Whether to hide the `via @botname` in the resulting message (only for bot usernames encountered in the [config](https://docs.madelineproto.xyz/API_docs/constructors/config.html))
     * * `InputPeer` **peer**            - Destination
     * * `int`       **reply_to_msg_id** - Optional: ID of the message this message should reply to
     * * `int`       **top_msg_id**      - Optional:
     * * `long`      **query_id**        - Query ID from [messages.getInlineBotResults](https://docs.madelineproto.xyz/API_docs/methods/messages.getInlineBotResults.html)
     * * `string`    **id**              - Result ID from [messages.getInlineBotResults](https://docs.madelineproto.xyz/API_docs/methods/messages.getInlineBotResults.html)
     * * `int`       **schedule_date**   - Optional: Scheduled message date for scheduled messages
     * * `InputPeer` **send_as**         - Optional: Send this message as the specified peer
     *
     * @param array $params Parameters
     */
    public function sendInlineBotResult(array $params): Updates;

    /**
     * Find out if a media message's caption can be edited.
     *
     * Parameters:
     * * `InputPeer` **peer** - Peer where the media was sent
     * * `int`       **id**   - ID of message
     *
     * @param array $params Parameters
     * @return messages.MessageEditData
     */
    public function getMessageEditData(array $params): messages;

    /**
     * Edit message.
     *
     * Parameters:
     * * `boolean`         **no_webpage**    - Optional: Disable webpage preview
     * * `InputPeer`       **peer**          - Where was the message sent
     * * `int`             **id**            - ID of the message to edit
     * * `string`          **message**       - Optional: New message
     * * `InputMedia`      **media**         - Optional: New attached media
     * * `ReplyMarkup`     **reply_markup**  - Optional: Reply markup for inline keyboards
     * * `[MessageEntity]` **entities**      - Optional: [Message entities for styled text](https://core.telegram.org/api/entities)
     * * `int`             **schedule_date** - Optional: Scheduled message date for [scheduled messages](https://core.telegram.org/api/scheduled-messages)
     *
     * @param array $params Parameters
     */
    public function editMessage(array $params): Updates;

    /**
     * Edit an inline bot message.
     *
     * Parameters:
     * * `boolean`                 **no_webpage**   - Optional: Disable webpage preview
     * * `InputBotInlineMessageID` **id**           - Sent inline message ID
     * * `string`                  **message**      - Optional: Message
     * * `InputMedia`              **media**        - Optional: Media
     * * `ReplyMarkup`             **reply_markup** - Optional: Reply markup for inline keyboards
     * * `[MessageEntity]`         **entities**     - Optional: [Message entities for styled text](https://core.telegram.org/api/entities)
     *
     * @param array $params Parameters
     */
    public function editInlineBotMessage(array $params): bool;

    /**
     * Press an inline callback button and get a callback answer from the bot.
     *
     * Parameters:
     * * `boolean`               **game**     - Optional: Whether this is a "play game" button
     * * `InputPeer`             **peer**     - Where was the inline keyboard sent
     * * `int`                   **msg_id**   - ID of the Message with the inline keyboard
     * * `bytes`                 **data**     - Optional: Callback data
     * * `InputCheckPasswordSRP` **password** - Optional: For buttons [requiring you to verify your identity with your 2FA password](https://docs.madelineproto.xyz/API_docs/constructors/keyboardButtonCallback.html), the SRP payload generated using [SRP](https://core.telegram.org/api/srp).
     *
     * @param array $params Parameters
     * @return messages.BotCallbackAnswer
     */
    public function getBotCallbackAnswer(array $params): messages;

    /**
     * Set the callback answer to a user button press (bots only).
     *
     * Parameters:
     * * `boolean` **alert**      - Optional: Whether to show the message as a popup instead of a toast notification
     * * `long`    **query_id**   - Query ID
     * * `string`  **message**    - Optional: Popup to show
     * * `string`  **url**        - Optional: URL to open
     * * `int`     **cache_time** - Cache validity
     *
     * @param array $params Parameters
     */
    public function setBotCallbackAnswer(array $params): bool;

    /**
     * Get dialog info of specified peers.
     *
     * Parameters:
     * * `[InputDialogPeer]` **peers** - Peers
     *
     * @param array $params Parameters
     * @return messages.PeerDialogs
     */
    public function getPeerDialogs(array $params): messages;

    /**
     * Save a message [draft](https://core.telegram.org/api/drafts) associated to a chat.
     *
     * Parameters:
     * * `boolean`         **no_webpage**      - Optional: Disable generation of the webpage preview
     * * `int`             **reply_to_msg_id** - Optional: Message ID the message should reply to
     * * `int`             **top_msg_id**      - Optional:
     * * `InputPeer`       **peer**            - Destination of the message that should be sent
     * * `string`          **message**         - The draft
     * * `[MessageEntity]` **entities**        - Optional: Message [entities](https://core.telegram.org/api/entities) for styled text
     *
     * @param array $params Parameters
     */
    public function saveDraft(array $params): bool;

    /**
     * Return all message [drafts](https://core.telegram.org/api/drafts).
     * Returns all the latest [updateDraftMessage](https://docs.madelineproto.xyz/API_docs/constructors/updateDraftMessage.html) updates related to all chats with drafts.
     */
    public function getAllDrafts(): Updates;

    /**
     * Get featured stickers.
     *
     * Parameters:
     * * `long` **hash** - [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)
     *
     * @param array $params Parameters
     * @return messages.FeaturedStickers
     */
    public function getFeaturedStickers(array $params): messages;

    /**
     * Mark new featured stickers as read.
     *
     * Parameters:
     * * `[long]` **id** - IDs of stickersets to mark as read
     *
     * @param array $params Parameters
     */
    public function readFeaturedStickers(array $params): bool;

    /**
     * Get recent stickers.
     *
     * Parameters:
     * * `boolean` **attached** - Optional: Get stickers recently attached to photo or video files
     * * `long`    **hash**     - [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)
     *
     * @param array $params Parameters
     * @return messages.RecentStickers
     */
    public function getRecentStickers(array $params): messages;

    /**
     * Add/remove sticker from recent stickers list.
     *
     * Parameters:
     * * `boolean`       **attached** - Optional: Whether to add/remove stickers recently attached to photo or video files
     * * `InputDocument` **id**       - Sticker
     * * `Bool`          **unsave**   - Whether to save or unsave the sticker
     *
     * @param array $params Parameters
     */
    public function saveRecentSticker(array $params): bool;

    /**
     * Clear recent stickers.
     *
     * Parameters:
     * * `boolean` **attached** - Optional: Set this flag to clear the list of stickers recently attached to photo or video files
     *
     * @param array $params Parameters
     */
    public function clearRecentStickers(array $params): bool;

    /**
     * Get all archived stickers.
     *
     * Parameters:
     * * `boolean` **masks**     - Optional: Get [mask stickers](https://core.telegram.org/api/stickers#mask-stickers)
     * * `boolean` **emojis**    - Optional: Get [custom emoji stickers](https://core.telegram.org/api/custom-emoji)
     * * `long`    **offset_id** - [Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)
     * * `int`     **limit**     - Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)
     *
     * @param array $params Parameters
     * @return messages.ArchivedStickers
     */
    public function getArchivedStickers(array $params): messages;

    /**
     * Get installed mask stickers.
     *
     * Parameters:
     * * `long` **hash** - [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)
     *
     * @param array $params Parameters
     * @return messages.AllStickers
     */
    public function getMaskStickers(array $params): messages;

    /**
     * Get stickers attached to a photo or video.
     *
     * Parameters:
     * * `InputStickeredMedia` **media** - Stickered media
     *
     * @param array $params Parameters
     * @return  of StickerSetCovered[]
     */
    public function getAttachedStickers(array $params): of;

    /**
     * Use this method to set the score of the specified user in a game sent as a normal message (bots only).
     *
     * Parameters:
     * * `boolean`   **edit_message** - Optional: Set this flag if the game message should be automatically edited to include the current scoreboard
     * * `boolean`   **force**        - Optional: Set this flag if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters
     * * `InputPeer` **peer**         - Unique identifier of target chat
     * * `int`       **id**           - Identifier of the sent message
     * * `InputUser` **user_id**      - User identifier
     * * `int`       **score**        - New score
     *
     * @param array $params Parameters
     */
    public function setGameScore(array $params): Updates;

    /**
     * Use this method to set the score of the specified user in a game sent as an inline message (bots only).
     *
     * Parameters:
     * * `boolean`                 **edit_message** - Optional: Set this flag if the game message should be automatically edited to include the current scoreboard
     * * `boolean`                 **force**        - Optional: Set this flag if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters
     * * `InputBotInlineMessageID` **id**           - ID of the inline message
     * * `InputUser`               **user_id**      - User identifier
     * * `int`                     **score**        - New score
     *
     * @param array $params Parameters
     */
    public function setInlineGameScore(array $params): bool;

    /**
     * Get highscores of a game.
     *
     * Parameters:
     * * `InputPeer` **peer**    - Where was the game sent
     * * `int`       **id**      - ID of message with game media attachment
     * * `InputUser` **user_id** - Get high scores made by a certain user
     *
     * @param array $params Parameters
     * @return messages.HighScores
     */
    public function getGameHighScores(array $params): messages;

    /**
     * Get highscores of a game sent using an inline bot.
     *
     * Parameters:
     * * `InputBotInlineMessageID` **id**      - ID of inline message
     * * `InputUser`               **user_id** - Get high scores of a certain user
     *
     * @param array $params Parameters
     * @return messages.HighScores
     */
    public function getInlineGameHighScores(array $params): messages;

    /**
     * Get chats in common with a user.
     *
     * Parameters:
     * * `InputUser` **user_id** - User ID
     * * `long`      **max_id**  - Maximum ID of chat to return (see [pagination](https://core.telegram.org/api/offsets))
     * * `int`       **limit**   - Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)
     *
     * @param array $params Parameters
     * @return messages.Chats
     */
    public function getCommonChats(array $params): messages;

    /**
     * Get all chats, channels and supergroups.
     *
     * Parameters:
     * * `[long]` **except_ids** - Except these chats/channels/supergroups
     *
     * @param array $params Parameters
     * @return messages.Chats
     */
    public function getAllChats(array $params): messages;

    /**
     * Get [instant view](https://instantview.telegram.org) page.
     *
     * Parameters:
     * * `string` **url**  - URL of IV page to fetch
     * * `[int]`  **hash** - Optional: [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)
     *
     * @param array $params Parameters
     */
    public function getWebPage(array $params): WebPage;

    /**
     * Pin/unpin a dialog.
     *
     * Parameters:
     * * `boolean`         **pinned** - Optional: Whether to pin or unpin the dialog
     * * `InputDialogPeer` **peer**   - The dialog to pin
     *
     * @param array $params Parameters
     */
    public function toggleDialogPin(array $params): bool;

    /**
     * Reorder pinned dialogs.
     *
     * Parameters:
     * * `boolean`           **force**     - Optional: If set, dialogs pinned server-side but not present in the `order` field will be unpinned.
     * * `int`               **folder_id** - [Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders)
     * * `[InputDialogPeer]` **order**     - New dialog order
     *
     * @param array $params Parameters
     */
    public function reorderPinnedDialogs(array $params): bool;

    /**
     * Get pinned dialogs.
     *
     * Parameters:
     * * `int` **folder_id** - [Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders)
     *
     * @param array $params Parameters
     * @return messages.PeerDialogs
     */
    public function getPinnedDialogs(array $params): messages;

    /**
     * If you sent an invoice requesting a shipping address and the parameter is\_flexible was specified, the bot will receive an [updateBotShippingQuery](https://docs.madelineproto.xyz/API_docs/constructors/updateBotShippingQuery.html) update. Use this method to reply to shipping queries.
     *
     * Parameters:
     * * `long`             **query_id**         - Unique identifier for the query to be answered
     * * `string`           **error**            - Optional: Error message in human readable form that explains why it is impossible to complete the order (e.g. "Sorry, delivery to your desired address is unavailable"). Telegram will display this message to the user.
     * * `[ShippingOption]` **shipping_options** - Optional: A vector of available shipping options.
     *
     * @param array $params Parameters
     */
    public function setBotShippingResults(array $params): bool;

    /**
     * Once the user has confirmed their payment and shipping details, the bot receives an [updateBotPrecheckoutQuery](https://docs.madelineproto.xyz/API_docs/constructors/updateBotPrecheckoutQuery.html) update.
     * Use this method to respond to such pre-checkout queries.
     * **Note**: Telegram must receive an answer within 10 seconds after the pre-checkout query was sent.
     *
     * Parameters:
     * * `boolean` **success**  - Optional: Set this flag if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order, otherwise do not set it, and set the `error` field, instead
     * * `long`    **query_id** - Unique identifier for the query to be answered
     * * `string`  **error**    - Optional: Required if the `success` isn't set. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. "Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!"). Telegram will display this message to the user.
     *
     * @param array $params Parameters
     */
    public function setBotPrecheckoutResults(array $params): bool;

    /**
     * Upload a file and associate it to a chat (without actually sending it to the chat).
     *
     * Parameters:
     * * `InputPeer`  **peer**  - The chat, can be [inputPeerEmpty](https://docs.madelineproto.xyz/API_docs/constructors/inputPeerEmpty.html) for bots and [inputPeerSelf](https://docs.madelineproto.xyz/API_docs/constructors/inputPeerSelf.html) for users.
     * * `InputMedia` **media** - File uploaded in chunks as described in [files Â»](https://core.telegram.org/api/files)
     *
     * @param array $params Parameters
     */
    public function uploadMedia(array $params): MessageMedia;

    /**
     * Notify the other user in a private chat that a screenshot of the chat was taken.
     *
     * Parameters:
     * * `InputPeer` **peer**            - Other user
     * * `int`       **reply_to_msg_id** - ID of message that was screenshotted, can be 0
     *
     * @param array $params Parameters
     */
    public function sendScreenshotNotification(array $params): Updates;

    /**
     * Get faved stickers.
     *
     * Parameters:
     * * `long` **hash** - [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)
     *
     * @param array $params Parameters
     * @return messages.FavedStickers
     */
    public function getFavedStickers(array $params): messages;

    /**
     * Mark or unmark a sticker as favorite.
     *
     * Parameters:
     * * `InputDocument` **id**     - Sticker in question
     * * `Bool`          **unfave** - Whether to add or remove a sticker from favorites
     *
     * @param array $params Parameters
     */
    public function faveSticker(array $params): bool;

    /**
     * Get unread messages where we were mentioned.
     *
     * Parameters:
     * * `InputPeer` **peer**       - Peer where to look for mentions
     * * `int`       **top_msg_id** - Optional:
     * * `int`       **offset_id**  - [Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)
     * * `int`       **add_offset** - [Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)
     * * `int`       **limit**      - Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)
     * * `int`       **max_id**     - Maximum message ID to return, [see pagination](https://core.telegram.org/api/offsets)
     * * `int`       **min_id**     - Minimum message ID to return, [see pagination](https://core.telegram.org/api/offsets)
     *
     * @param array $params Parameters
     * @return messages.Messages
     */
    public function getUnreadMentions(array $params): messages;

    /**
     * Mark mentions as read.
     *
     * Parameters:
     * * `InputPeer` **peer**       - Dialog
     * * `int`       **top_msg_id** - Optional:
     *
     * @param array $params Parameters
     * @return messages.AffectedHistory
     */
    public function readMentions(array $params): messages;

    /**
     * Get live location history of a certain user.
     *
     * Parameters:
     * * `InputPeer` **peer**  - User
     * * `int`       **limit** - Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)
     * * `long`      **hash**  - [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)
     *
     * @param array $params Parameters
     * @return messages.Messages
     */
    public function getRecentLocations(array $params): messages;

    /**
     * Send an [album or grouped media](https://core.telegram.org/api/files#albums-grouped-media).
     *
     * Parameters:
     * * `boolean`            **silent**                   - Optional: Whether to send the album silently (no notification triggered)
     * * `boolean`            **background**               - Optional: Send in background?
     * * `boolean`            **clear_draft**              - Optional: Whether to clear [drafts](https://core.telegram.org/api/drafts)
     * * `boolean`            **noforwards**               - Optional: Only for bots, disallows forwarding and saving of the messages, even if the destination chat doesn't have [content protection](https://telegram.org/blog/protected-content-delete-by-date-and-more) enabled
     * * `boolean`            **update_stickersets_order** - Optional:
     * * `InputPeer`          **peer**                     - The destination chat
     * * `int`                **reply_to_msg_id**          - Optional: The message to reply to
     * * `int`                **top_msg_id**               - Optional:
     * * `[InputSingleMedia]` **multi_media**              - The medias to send
     * * `int`                **schedule_date**            - Optional: Scheduled message date for scheduled messages
     * * `InputPeer`          **send_as**                  - Optional: Send this message as the specified peer
     *
     * @param array $params Parameters
     */
    public function sendMultiMedia(array $params): Updates;

    /**
     * Upload encrypted file and associate it to a secret chat.
     *
     * Parameters:
     * * `InputEncryptedChat` **peer** - The secret chat to associate the file to
     * * `InputEncryptedFile` **file** - The file
     *
     * @param array $params Parameters
     */
    public function uploadEncryptedFile(array $params): EncryptedFile;

    /**
     * Search for stickersets.
     *
     * Parameters:
     * * `boolean` **exclude_featured** - Optional: Exclude featured stickersets from results
     * * `string`  **q**                - Query string
     * * `long`    **hash**             - [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)
     *
     * @param array $params Parameters
     * @return messages.FoundStickerSets
     */
    public function searchStickerSets(array $params): messages;

    /**
     * Get message ranges for saving the user's chat history.
     *
     * @return  of MessageRange[]
     */
    public function getSplitRanges(): of;

    /**
     * Manually mark dialog as unread.
     *
     * Parameters:
     * * `boolean`         **unread** - Optional: Mark as unread/read
     * * `InputDialogPeer` **peer**   - Dialog
     *
     * @param array $params Parameters
     */
    public function markDialogUnread(array $params): bool;

    /**
     * Get dialogs manually marked as unread.
     *
     * @return  of DialogPeer[]
     */
    public function getDialogUnreadMarks(): of;

    /**
     * Clear all [drafts](https://core.telegram.org/api/drafts).
     */
    public function clearAllDrafts(): bool;

    /**
     * Pin a message.
     *
     * Parameters:
     * * `boolean`   **silent**     - Optional: Pin the message silently, without triggering a notification
     * * `boolean`   **unpin**      - Optional: Whether the message should unpinned or pinned
     * * `boolean`   **pm_oneside** - Optional: Whether the message should only be pinned on the local side of a one-to-one chat
     * * `InputPeer` **peer**       - The peer where to pin the message
     * * `int`       **id**         - The message to pin or unpin
     *
     * @param array $params Parameters
     */
    public function updatePinnedMessage(array $params): Updates;

    /**
     * Vote in a [poll](https://docs.madelineproto.xyz/API_docs/constructors/poll.html).
     *
     * Parameters:
     * * `InputPeer` **peer**    - The chat where the poll was sent
     * * `int`       **msg_id**  - The message ID of the poll
     * * `[bytes]`   **options** - The options that were chosen
     *
     * @param array $params Parameters
     */
    public function sendVote(array $params): Updates;

    /**
     * Get poll results.
     *
     * Parameters:
     * * `InputPeer` **peer**   - Peer where the poll was found
     * * `int`       **msg_id** - Message ID of poll message
     *
     * @param array $params Parameters
     */
    public function getPollResults(array $params): Updates;

    /**
     * Get count of online users in a chat.
     *
     * Parameters:
     * * `InputPeer` **peer** - The chat
     *
     * @param array $params Parameters
     */
    public function getOnlines(array $params): ChatOnlines;

    /**
     * Edit the description of a [group/supergroup/channel](https://core.telegram.org/api/channel).
     *
     * Parameters:
     * * `InputPeer` **peer**  - The [group/supergroup/channel](https://core.telegram.org/api/channel).
     * * `string`    **about** - The new description
     *
     * @param array $params Parameters
     */
    public function editChatAbout(array $params): bool;

    /**
     * Edit the default banned rights of a [channel/supergroup/group](https://core.telegram.org/api/channel).
     *
     * Parameters:
     * * `InputPeer`        **peer**          - The peer
     * * `ChatBannedRights` **banned_rights** - The new global rights
     *
     * @param array $params Parameters
     */
    public function editChatDefaultBannedRights(array $params): Updates;

    /**
     * Get localized emoji keywords.
     *
     * Parameters:
     * * `string` **lang_code** - Language code
     *
     * @param array $params Parameters
     */
    public function getEmojiKeywords(array $params): EmojiKeywordsDifference;

    /**
     * Get changed emoji keywords.
     *
     * Parameters:
     * * `string` **lang_code**    - Language code
     * * `int`    **from_version** - Previous emoji keyword localization version
     *
     * @param array $params Parameters
     */
    public function getEmojiKeywordsDifference(array $params): EmojiKeywordsDifference;

    /**
     * Get info about an emoji keyword localization.
     *
     * Parameters:
     * * `[string]` **lang_codes** - Language codes
     *
     * @param array $params Parameters
     * @return  of EmojiLanguage[]
     */
    public function getEmojiKeywordsLanguages(array $params): of;

    /**
     * Returns an HTTP URL which can be used to automatically log in into translation platform and suggest new emoji replacements. The URL will be valid for 30 seconds after generation.
     *
     * Parameters:
     * * `string` **lang_code** - Language code for which the emoji replacements will be suggested
     *
     * @param array $params Parameters
     */
    public function getEmojiURL(array $params): EmojiURL;

    /**
     * Get the number of results that would be found by a [messages.search](https://docs.madelineproto.xyz/API_docs/methods/messages.search.html) call with the same parameters.
     *
     * Parameters:
     * * `InputPeer`        **peer**       - Peer where to search
     * * `int`              **top_msg_id** - Optional:
     * * `[MessagesFilter]` **filters**    - Search filters
     *
     * @param array $params Parameters
     * @return  of messages.SearchCounter[]
     */
    public function getSearchCounters(array $params): of;

    /**
     * Get more info about a Seamless Telegram Login authorization request, for more info [click here Â»](https://core.telegram.org/api/url-authorization).
     *
     * Parameters:
     * * `InputPeer` **peer**      - Optional: Peer where the message is located
     * * `int`       **msg_id**    - Optional: The message
     * * `int`       **button_id** - Optional: The ID of the button with the authorization request
     * * `string`    **url**       - Optional: URL used for [link URL authorization, click here for more info Â»](https://core.telegram.org/api/url-authorization#link-url-authorization)
     *
     * @param array $params Parameters
     */
    public function requestUrlAuth(array $params): UrlAuthResult;

    /**
     * Use this to accept a Seamless Telegram Login authorization request, for more info [click here Â»](https://core.telegram.org/api/url-authorization).
     *
     * Parameters:
     * * `boolean`   **write_allowed** - Optional: Set this flag to allow the bot to send messages to you (if requested)
     * * `InputPeer` **peer**          - Optional: The location of the message
     * * `int`       **msg_id**        - Optional: Message ID of the message with the login button
     * * `int`       **button_id**     - Optional: ID of the login button
     * * `string`    **url**           - Optional: URL used for [link URL authorization, click here for more info Â»](https://core.telegram.org/api/url-authorization#link-url-authorization)
     *
     * @param array $params Parameters
     */
    public function acceptUrlAuth(array $params): UrlAuthResult;

    /**
     * Should be called after the user hides the report spam/add as contact bar of a new chat, effectively prevents the user from executing the actions specified in the [peer's settings](https://docs.madelineproto.xyz/API_docs/constructors/peerSettings.html).
     *
     * Parameters:
     * * `InputPeer` **peer** - Peer
     *
     * @param array $params Parameters
     */
    public function hidePeerSettingsBar(array $params): bool;

    /**
     * Get scheduled messages.
     *
     * Parameters:
     * * `InputPeer` **peer** - Peer
     * * `long`      **hash** - [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)
     *
     * @param array $params Parameters
     * @return messages.Messages
     */
    public function getScheduledHistory(array $params): messages;

    /**
     * Get scheduled messages.
     *
     * Parameters:
     * * `InputPeer` **peer** - Peer
     * * `[int]`     **id**   - IDs of scheduled messages
     *
     * @param array $params Parameters
     * @return messages.Messages
     */
    public function getScheduledMessages(array $params): messages;

    /**
     * Send scheduled messages right away.
     *
     * Parameters:
     * * `InputPeer` **peer** - Peer
     * * `[int]`     **id**   - Scheduled message IDs
     *
     * @param array $params Parameters
     */
    public function sendScheduledMessages(array $params): Updates;

    /**
     * Delete scheduled messages.
     *
     * Parameters:
     * * `InputPeer` **peer** - Peer
     * * `[int]`     **id**   - Scheduled message IDs
     *
     * @param array $params Parameters
     */
    public function deleteScheduledMessages(array $params): Updates;

    /**
     * Get poll results for non-anonymous polls.
     *
     * Parameters:
     * * `InputPeer` **peer**   - Chat where the poll was sent
     * * `int`       **id**     - Message ID
     * * `bytes`     **option** - Optional: Get only results for the specified poll `option`
     * * `string`    **offset** - Optional: Offset for results, taken from the `next_offset` field of [messages.votesList](https://docs.madelineproto.xyz/API_docs/constructors/messages.votesList.html), initially an empty string. <br>Note: if no more results are available, the method call will return an empty `next_offset`; thus, avoid providing the `next_offset` returned in [messages.votesList](https://docs.madelineproto.xyz/API_docs/constructors/messages.votesList.html) if it is empty, to avoid an infinite loop.
     * * `int`       **limit**  - Number of results to return
     *
     * @param array $params Parameters
     * @return messages.VotesList
     */
    public function getPollVotes(array $params): messages;

    /**
     * Apply changes to multiple stickersets.
     *
     * Parameters:
     * * `boolean`           **uninstall**   - Optional: Uninstall the specified stickersets
     * * `boolean`           **archive**     - Optional: Archive the specified stickersets
     * * `boolean`           **unarchive**   - Optional: Unarchive the specified stickersets
     * * `[InputStickerSet]` **stickersets** - Stickersets to act upon
     *
     * @param array $params Parameters
     */
    public function toggleStickerSets(array $params): bool;

    /**
     * Get [folders](https://core.telegram.org/api/folders).
     *
     * @return  of DialogFilter[]
     */
    public function getDialogFilters(): of;

    /**
     * Get [suggested folders](https://core.telegram.org/api/folders).
     *
     * @return  of DialogFilterSuggested[]
     */
    public function getSuggestedDialogFilters(): of;

    /**
     * Update [folder](https://core.telegram.org/api/folders).
     *
     * Parameters:
     * * `int`          **id**     - [Folder](https://core.telegram.org/api/folders) ID
     * * `DialogFilter` **filter** - Optional: [Folder](https://core.telegram.org/api/folders) info
     *
     * @param array $params Parameters
     */
    public function updateDialogFilter(array $params): bool;

    /**
     * Reorder [folders](https://core.telegram.org/api/folders).
     *
     * Parameters:
     * * `[int]` **order** - New [folder](https://core.telegram.org/api/folders) order
     *
     * @param array $params Parameters
     */
    public function updateDialogFiltersOrder(array $params): bool;

    /**
     * Method for fetching previously featured stickers.
     *
     * Parameters:
     * * `int`  **offset** - Offset
     * * `int`  **limit**  - Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)
     * * `long` **hash**   - [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)
     *
     * @param array $params Parameters
     * @return messages.FeaturedStickers
     */
    public function getOldFeaturedStickers(array $params): messages;

    /**
     * Get messages in a reply thread.
     *
     * Parameters:
     * * `InputPeer` **peer**        - Peer
     * * `int`       **msg_id**      - Message ID
     * * `int`       **offset_id**   - [Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)
     * * `int`       **offset_date** - [Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)
     * * `int`       **add_offset**  - [Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)
     * * `int`       **limit**       - Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)
     * * `int`       **max_id**      - If a positive value was transferred, the method will return only messages with ID smaller than max\_id
     * * `int`       **min_id**      - If a positive value was transferred, the method will return only messages with ID bigger than min\_id
     * * `long`      **hash**        - [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)
     *
     * @param array $params Parameters
     * @return messages.Messages
     */
    public function getReplies(array $params): messages;

    /**
     * Get [discussion message](https://core.telegram.org/api/threads) from the [associated discussion group](https://core.telegram.org/api/discussion) of a channel to show it on top of the comment section, without actually joining the group.
     *
     * Parameters:
     * * `InputPeer` **peer**   - [Channel ID](https://core.telegram.org/api/channel)
     * * `int`       **msg_id** - Message ID
     *
     * @param array $params Parameters
     * @return messages.DiscussionMessage
     */
    public function getDiscussionMessage(array $params): messages;

    /**
     * Mark a [thread](https://core.telegram.org/api/threads) as read.
     *
     * Parameters:
     * * `InputPeer` **peer**        - Group ID
     * * `int`       **msg_id**      - ID of message that started the thread
     * * `int`       **read_max_id** - ID up to which thread messages were read
     *
     * @param array $params Parameters
     */
    public function readDiscussion(array $params): bool;

    /**
     * [Unpin](https://core.telegram.org/api/pin) all pinned messages.
     *
     * Parameters:
     * * `InputPeer` **peer**       - Chat where to unpin
     * * `int`       **top_msg_id** - Optional:
     *
     * @param array $params Parameters
     * @return messages.AffectedHistory
     */
    public function unpinAllMessages(array $params): messages;

    /**
     * Delete a [chat](https://core.telegram.org/api/channel).
     *
     * Parameters:
     * * `InputPeer` **chat_id** -
     *
     * @param array $params Parameters
     */
    public function deleteChat(array $params): bool;

    /**
     * Delete the entire phone call history.
     *
     * Parameters:
     * * `boolean` **revoke** - Optional: Whether to remove phone call history for participants as well
     *
     * @param array $params Parameters
     * @return messages.AffectedFoundMessages
     */
    public function deletePhoneCallHistory(array $params): messages;

    /**
     * Obtains information about a chat export file, generated by a foreign chat app, [click here for more info about imported chats Â»](https://core.telegram.org/api/import).
     *
     * Parameters:
     * * `string` **import_head** - Beginning of the message file; up to 100 lines.
     *
     * @param array $params Parameters
     * @return messages.HistoryImportParsed
     */
    public function checkHistoryImport(array $params): messages;

    /**
     * Import chat history from a foreign chat app into a specific Telegram chat, [click here for more info about imported chats Â»](https://core.telegram.org/api/import).
     *
     * Parameters:
     * * `InputPeer` **peer**        - The Telegram chat where the [history should be imported](https://core.telegram.org/api/import).
     * * `InputFile` **file**        - File with messages to import.
     * * `int`       **media_count** - Number of media files associated with the chat that will be uploaded using [messages.uploadImportedMedia](https://docs.madelineproto.xyz/API_docs/methods/messages.uploadImportedMedia.html).
     *
     * @param array $params Parameters
     * @return messages.HistoryImport
     */
    public function initHistoryImport(array $params): messages;

    /**
     * Upload a media file associated with an [imported chat, click here for more info Â»](https://core.telegram.org/api/import).
     *
     * Parameters:
     * * `InputPeer`  **peer**      - The Telegram chat where the media will be imported
     * * `long`       **import_id** - Identifier of a [history import session](https://core.telegram.org/api/import), returned by [messages.initHistoryImport](https://docs.madelineproto.xyz/API_docs/methods/messages.initHistoryImport.html)
     * * `string`     **file_name** - File name
     * * `InputMedia` **media**     - Media metadata
     *
     * @param array $params Parameters
     */
    public function uploadImportedMedia(array $params): MessageMedia;

    /**
     * Complete the [history import process](https://core.telegram.org/api/import), importing all messages into the chat.
     * To be called only after initializing the import with [messages.initHistoryImport](https://docs.madelineproto.xyz/API_docs/methods/messages.initHistoryImport.html) and uploading all files using [messages.uploadImportedMedia](https://docs.madelineproto.xyz/API_docs/methods/messages.uploadImportedMedia.html).
     *
     * Parameters:
     * * `InputPeer` **peer**      - The Telegram chat where the messages should be [imported, click here for more info Â»](https://core.telegram.org/api/import)
     * * `long`      **import_id** - Identifier of a history import session, returned by [messages.initHistoryImport](https://docs.madelineproto.xyz/API_docs/methods/messages.initHistoryImport.html).
     *
     * @param array $params Parameters
     */
    public function startHistoryImport(array $params): bool;

    /**
     * Get info about the chat invites of a specific chat.
     *
     * Parameters:
     * * `boolean`   **revoked**     - Optional: Whether to fetch revoked chat invites
     * * `InputPeer` **peer**        - Chat
     * * `InputUser` **admin_id**    - Whether to only fetch chat invites from this admin
     * * `int`       **offset_date** - Optional: [Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)
     * * `string`    **offset_link** - Optional: [Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)
     * * `int`       **limit**       - Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)
     *
     * @param array $params Parameters
     * @return messages.ExportedChatInvites
     */
    public function getExportedChatInvites(array $params): messages;

    /**
     * Get info about a chat invite.
     *
     * Parameters:
     * * `InputPeer` **peer** - Chat
     * * `string`    **link** - Invite link
     *
     * @param array $params Parameters
     * @return messages.ExportedChatInvite
     */
    public function getExportedChatInvite(array $params): messages;

    /**
     * Edit an exported chat invite.
     *
     * Parameters:
     * * `boolean`   **revoked**        - Optional: Whether to revoke the chat invite
     * * `InputPeer` **peer**           - Chat
     * * `string`    **link**           - Invite link
     * * `int`       **expire_date**    - Optional: New expiration date
     * * `int`       **usage_limit**    - Optional: Maximum number of users that can join using this link
     * * `Bool`      **request_needed** - Optional: Whether admin confirmation is required before admitting each separate user into the chat
     * * `string`    **title**          - Optional: Description of the invite link, visible only to administrators
     *
     * @param array $params Parameters
     * @return messages.ExportedChatInvite
     */
    public function editExportedChatInvite(array $params): messages;

    /**
     * Delete all revoked chat invites.
     *
     * Parameters:
     * * `InputPeer` **peer**     - Chat
     * * `InputUser` **admin_id** - ID of the admin that originally generated the revoked chat invites
     *
     * @param array $params Parameters
     */
    public function deleteRevokedExportedChatInvites(array $params): bool;

    /**
     * Delete a chat invite.
     *
     * Parameters:
     * * `InputPeer` **peer** - Peer
     * * `string`    **link** - Invite link
     *
     * @param array $params Parameters
     */
    public function deleteExportedChatInvite(array $params): bool;

    /**
     * Get info about chat invites generated by admins.
     *
     * Parameters:
     * * `InputPeer` **peer** - Chat
     *
     * @param array $params Parameters
     * @return messages.ChatAdminsWithInvites
     */
    public function getAdminsWithInvites(array $params): messages;

    /**
     * Get info about the users that joined the chat using a specific chat invite.
     *
     * Parameters:
     * * `boolean`   **requested**   - Optional: If set, only returns info about users with pending [join requests Â»](https://core.telegram.org/api/invites#join-requests)
     * * `InputPeer` **peer**        - Chat
     * * `string`    **link**        - Optional: Invite link
     * * `string`    **q**           - Optional: Search for a user in the pending [join requests Â»](https://core.telegram.org/api/invites#join-requests) list: only available when the `requested` flag is set, cannot be used together with a specific `link`.
     * * `int`       **offset_date** - [Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)
     * * `InputUser` **offset_user** - User ID for [pagination](https://core.telegram.org/api/offsets)
     * * `int`       **limit**       - Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)
     *
     * @param array $params Parameters
     * @return messages.ChatInviteImporters
     */
    public function getChatInviteImporters(array $params): messages;

    /**
     * Set maximum Time-To-Live of all messages in the specified chat.
     *
     * Parameters:
     * * `InputPeer` **peer**   - The dialog
     * * `int`       **period** - Automatically delete all messages sent in the chat after this many seconds
     *
     * @param array $params Parameters
     */
    public function setHistoryTTL(array $params): Updates;

    /**
     * Check whether chat history exported from another chat app can be [imported into a specific Telegram chat, click here for more info Â»](https://core.telegram.org/api/import).
     *
     * If the check succeeds, and no RPC errors are returned, a [messages.CheckedHistoryImportPeer](https://docs.madelineproto.xyz/API_docs/types/messages.CheckedHistoryImportPeer.html) constructor will be returned, with a confirmation text to be shown to the user, before actually initializing the import.
     *
     * Parameters:
     * * `InputPeer` **peer** - The chat where we want to [import history Â»](https://core.telegram.org/api/import).
     *
     * @param array $params Parameters
     * @return messages.CheckedHistoryImportPeer
     */
    public function checkHistoryImportPeer(array $params): messages;

    /**
     * Change the chat theme of a certain chat.
     *
     * Parameters:
     * * `InputPeer` **peer**     - Private chat where to change theme
     * * `string`    **emoticon** - Emoji, identifying a specific chat theme; a list of chat themes can be fetched using [account.getChatThemes](https://docs.madelineproto.xyz/API_docs/methods/account.getChatThemes.html)
     *
     * @param array $params Parameters
     */
    public function setChatTheme(array $params): Updates;

    /**
     * Get which users read a specific message: only available for groups and supergroups with less than [`chat_read_mark_size_threshold` members](https://core.telegram.org/api/config#chat-read-mark-size-threshold), read receipts will be stored for [`chat_read_mark_expire_period` seconds after the message was sent](https://core.telegram.org/api/config#chat-read-mark-expire-period), see [client configuration for more info Â»](https://core.telegram.org/api/config#client-configuration).
     *
     * Parameters:
     * * `InputPeer` **peer**   - Dialog
     * * `int`       **msg_id** - Message ID
     *
     * @param array $params Parameters
     * @return  of long[]
     */
    public function getMessageReadParticipants(array $params): of;

    /**
     * Returns information about the next messages of the specified type in the chat split by days.
     *
     * Returns the results in reverse chronological order.
     * Can return partial results for the last returned day.
     *
     * Parameters:
     * * `InputPeer`      **peer**        - Peer where to search
     * * `MessagesFilter` **filter**      - Message filter, [inputMessagesFilterEmpty](https://docs.madelineproto.xyz/API_docs/constructors/inputMessagesFilterEmpty.html), [inputMessagesFilterMyMentions](https://docs.madelineproto.xyz/API_docs/constructors/inputMessagesFilterMyMentions.html) filters are not supported by this method.
     * * `int`            **offset_id**   - [Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)
     * * `int`            **offset_date** - [Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)
     *
     * @param array $params Parameters
     * @return messages.SearchResultsCalendar
     */
    public function getSearchResultsCalendar(array $params): messages;

    /**
     * Returns sparse positions of messages of the specified type in the chat to be used for shared media scroll implementation.
     *
     * Returns the results in reverse chronological order (i.e., in order of decreasing message\_id).
     *
     * Parameters:
     * * `InputPeer`      **peer**      - Peer where to search
     * * `MessagesFilter` **filter**    - Message filter, [inputMessagesFilterEmpty](https://docs.madelineproto.xyz/API_docs/constructors/inputMessagesFilterEmpty.html), [inputMessagesFilterMyMentions](https://docs.madelineproto.xyz/API_docs/constructors/inputMessagesFilterMyMentions.html) filters are not supported by this method.
     * * `int`            **offset_id** - [Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)
     * * `int`            **limit**     - Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)
     *
     * @param array $params Parameters
     * @return messages.SearchResultsPositions
     */
    public function getSearchResultsPositions(array $params): messages;

    /**
     * Dismiss or approve a chat [join request](https://core.telegram.org/api/invites#join-requests) related to a specific chat or channel.
     *
     * Parameters:
     * * `boolean`   **approved** - Optional: Whether to dismiss or approve the chat [join request Â»](https://core.telegram.org/api/invites#join-requests)
     * * `InputPeer` **peer**     - The chat or channel
     * * `InputUser` **user_id**  - The user whose [join request Â»](https://core.telegram.org/api/invites#join-requests) should be dismissed or approved
     *
     * @param array $params Parameters
     */
    public function hideChatJoinRequest(array $params): Updates;

    /**
     * Dismiss or approve all [join requests](https://core.telegram.org/api/invites#join-requests) related to a specific chat or channel.
     *
     * Parameters:
     * * `boolean`   **approved** - Optional: Whether to dismiss or approve all chat [join requests Â»](https://core.telegram.org/api/invites#join-requests)
     * * `InputPeer` **peer**     - The chat or channel
     * * `string`    **link**     - Optional: Only dismiss or approve [join requests Â»](https://core.telegram.org/api/invites#join-requests) initiated using this invite link
     *
     * @param array $params Parameters
     */
    public function hideAllChatJoinRequests(array $params): Updates;

    /**
     * Enable or disable [content protection](https://telegram.org/blog/protected-content-delete-by-date-and-more) on a channel or chat.
     *
     * Parameters:
     * * `InputPeer` **peer**    - The chat or channel
     * * `Bool`      **enabled** - Enable or disable content protection
     *
     * @param array $params Parameters
     */
    public function toggleNoForwards(array $params): Updates;

    /**
     * Change the default peer that should be used when sending messages to a specific group.
     *
     * Parameters:
     * * `InputPeer` **peer**    - Group
     * * `InputPeer` **send_as** - The default peer that should be used when sending messages to the group
     *
     * @param array $params Parameters
     */
    public function saveDefaultSendAs(array $params): bool;

    /**
     * React to message.
     *
     * Parameters:
     * * `boolean`    **big**           - Optional: Whether a bigger and longer reaction should be shown
     * * `boolean`    **add_to_recent** - Optional:
     * * `InputPeer`  **peer**          - Peer
     * * `int`        **msg_id**        - Message ID to react to
     * * `[Reaction]` **reaction**      - Optional:
     *
     * @param array $params Parameters
     */
    public function sendReaction(array $params): Updates;

    /**
     * Get [message reactions Â»](https://core.telegram.org/api/reactions).
     *
     * Parameters:
     * * `InputPeer` **peer** - Peer
     * * `[int]`     **id**   - Message IDs
     *
     * @param array $params Parameters
     */
    public function getMessagesReactions(array $params): Updates;

    /**
     * Get [message reaction](https://core.telegram.org/api/reactions) list, along with the sender of each reaction.
     *
     * Parameters:
     * * `InputPeer` **peer**     - Peer
     * * `int`       **id**       - Message ID
     * * `Reaction`  **reaction** - Optional:
     * * `string`    **offset**   - Optional: Offset (typically taken from the `next_offset` field of the returned [messages.MessageReactionsList](https://docs.madelineproto.xyz/API_docs/types/messages.MessageReactionsList.html))
     * * `int`       **limit**    - Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)
     *
     * @param array $params Parameters
     * @return messages.MessageReactionsList
     */
    public function getMessageReactionsList(array $params): messages;

    /**
     * Change the set of [message reactions Â»](https://core.telegram.org/api/reactions) that can be used in a certain group, supergroup or channel.
     *
     * Parameters:
     * * `InputPeer`     **peer**                - Group where to apply changes
     * * `ChatReactions` **available_reactions** -
     *
     * @param array $params Parameters
     */
    public function setChatAvailableReactions(array $params): Updates;

    /**
     * Obtain available [message reactions Â»](https://core.telegram.org/api/reactions).
     *
     * Parameters:
     * * `[int]` **hash** - Optional: [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)
     *
     * @param array $params Parameters
     * @return messages.AvailableReactions
     */
    public function getAvailableReactions(array $params): messages;

    /**
     * Change default emoji reaction to use in the quick reaction menu: the value is synced across devices and can be fetched using [help.getConfig, `reactions_default` field](https://docs.madelineproto.xyz/API_docs/methods/help.getConfig.html).
     *
     * Parameters:
     * * `Reaction` **reaction** -
     *
     * @param array $params Parameters
     */
    public function setDefaultReaction(array $params): bool;

    /**
     * Translate a given text.
     *
     * Parameters:
     * * `InputPeer` **peer**      - Optional: If the text is a chat message, the peer ID
     * * `int`       **msg_id**    - Optional: If the text is a chat message, the message ID
     * * `string`    **text**      - Optional: The text to translate
     * * `string`    **from_lang** - Optional: Two-letter ISO 639-1 language code of the language from which the message is translated, if not set will be autodetected
     * * `string`    **to_lang**   - Two-letter ISO 639-1 language code of the language to which the message is translated
     *
     * @param array $params Parameters
     * @return messages.TranslatedText
     */
    public function translateText(array $params): messages;

    /**
     * Get unread reactions to messages you sent.
     *
     * Parameters:
     * * `InputPeer` **peer**       - Peer
     * * `int`       **top_msg_id** - Optional:
     * * `int`       **offset_id**  - [Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)
     * * `int`       **add_offset** - [Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)
     * * `int`       **limit**      - Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)
     * * `int`       **max_id**     - Only return reactions for messages up until this message ID
     * * `int`       **min_id**     - Only return reactions for messages starting from this message ID
     *
     * @param array $params Parameters
     * @return messages.Messages
     */
    public function getUnreadReactions(array $params): messages;

    /**
     * Mark [message reactions Â»](https://core.telegram.org/api/reactions) as read.
     *
     * Parameters:
     * * `InputPeer` **peer**       - Peer
     * * `int`       **top_msg_id** - Optional:
     *
     * @param array $params Parameters
     * @return messages.AffectedHistory
     */
    public function readReactions(array $params): messages;

    /**
     * View and search recently sent media.
     * This method does not support pagination.
     *
     * Parameters:
     * * `string`         **q**      - Optional search query
     * * `MessagesFilter` **filter** - Message filter
     * * `int`            **limit**  - Maximum number of results to return (max 100).
     *
     * @param array $params Parameters
     * @return messages.Messages
     */
    public function searchSentMedia(array $params): messages;

    /**
     * Returns installed attachment menu [bot web apps Â»](https://core.telegram.org/api/bots/attach).
     *
     * Parameters:
     * * `long` **hash** - [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)
     *
     * @param array $params Parameters
     */
    public function getAttachMenuBots(array $params): AttachMenuBots;

    /**
     * Returns attachment menu entry for a [bot web app that can be launched from the attachment menu Â»](https://core.telegram.org/api/bots/attach).
     *
     * Parameters:
     * * `InputUser` **bot** - Bot ID
     *
     * @param array $params Parameters
     */
    public function getAttachMenuBot(array $params): AttachMenuBotsBot;

    /**
     * Enable or disable [web bot attachment menu Â»](https://core.telegram.org/api/bots/attach).
     *
     * Parameters:
     * * `boolean`   **write_allowed** - Optional:
     * * `InputUser` **bot**           - Bot ID
     * * `Bool`      **enabled**       - Toggle
     *
     * @param array $params Parameters
     */
    public function toggleBotInAttachMenu(array $params): bool;

    /**
     * Open a [bot web app](https://core.telegram.org/bots/webapps), sending over user information after user confirmation.
     *
     * After calling this method, until the user closes the webview, [messages.prolongWebView](https://docs.madelineproto.xyz/API_docs/methods/messages.prolongWebView.html) must be called every 60 seconds.
     *
     * Parameters:
     * * `boolean`   **from_bot_menu**   - Optional: Whether the webview was opened by clicking on the bot's [menu button Â»](https://core.telegram.org/api/bots/menu).
     * * `boolean`   **silent**          - Optional: Whether the inline message that will be sent by the bot on behalf of the user once the web app interaction is [terminated](https://docs.madelineproto.xyz/API_docs/methods/messages.sendWebViewResultMessage.html) should be sent silently (no notifications for the receivers).
     * * `InputPeer` **peer**            - Dialog where the web app is being opened, and where the resulting message will be sent (see the [docs for more info Â»](https://core.telegram.org/api/bots/webapps)).
     * * `InputUser` **bot**             - Bot that owns the [web app](https://core.telegram.org/api/bots/webapps)
     * * `string`    **url**             - Optional: [Web app URL](https://core.telegram.org/api/bots/webapps)
     * * `string`    **start_param**     - Optional: If the web app was opened from the attachment menu using a [attachment menu deep link](https://core.telegram.org/api/links#bot-attachment-menu-links), `start_param` should contain the `data` from the `startattach` parameter.
     * * `DataJSON`  **theme_params**    - Optional: Theme parameters for the web app
     * * `string`    **platform**        -
     * * `int`       **reply_to_msg_id** - Optional: Whether the inline message that will be sent by the bot on behalf of the user once the web app interaction is [terminated](https://docs.madelineproto.xyz/API_docs/methods/messages.sendWebViewResultMessage.html) should be sent in reply to this message ID.
     * * `int`       **top_msg_id**      - Optional:
     * * `InputPeer` **send_as**         - Optional: Open the web app as the specified peer, sending the resulting the message as the specified peer.
     *
     * @param array $params Parameters
     */
    public function requestWebView(array $params): WebViewResult;

    /**
     * Indicate to the server (from the user side) that the user is still using a web app.
     *
     * Parameters:
     * * `boolean`   **silent**          - Optional: Whether the inline message that will be sent by the bot on behalf of the user once the web app interaction is [terminated](https://docs.madelineproto.xyz/API_docs/methods/messages.sendWebViewResultMessage.html) should be sent silently (no notifications for the receivers).
     * * `InputPeer` **peer**            - Dialog where the web app was opened.
     * * `InputUser` **bot**             - Bot that owns the [web app](https://core.telegram.org/api/bots/webapps)
     * * `long`      **query_id**        - Web app interaction ID obtained from [messages.requestWebView](https://docs.madelineproto.xyz/API_docs/methods/messages.requestWebView.html)
     * * `int`       **reply_to_msg_id** - Optional: Whether the inline message that will be sent by the bot on behalf of the user once the web app interaction is [terminated](https://docs.madelineproto.xyz/API_docs/methods/messages.sendWebViewResultMessage.html) should be sent in reply to this message ID.
     * * `int`       **top_msg_id**      - Optional:
     * * `InputPeer` **send_as**         - Optional: Open the web app as the specified peer
     *
     * @param array $params Parameters
     */
    public function prolongWebView(array $params): bool;

    /**
     * Open a [bot web app](https://core.telegram.org/api/bots/webapps).
     *
     * Parameters:
     * * `InputUser` **bot**          - Bot that owns the webapp
     * * `string`    **url**          - Web app URL
     * * `DataJSON`  **theme_params** - Optional: Theme parameters
     * * `string`    **platform**     -
     *
     * @param array $params Parameters
     */
    public function requestSimpleWebView(array $params): SimpleWebViewResult;

    /**
     * Terminate webview interaction started with [messages.requestWebView](https://docs.madelineproto.xyz/API_docs/methods/messages.requestWebView.html), sending the specified message to the chat on behalf of the user.
     *
     * Parameters:
     * * `string`               **bot_query_id** - Webview interaction ID obtained from [messages.requestWebView](https://docs.madelineproto.xyz/API_docs/methods/messages.requestWebView.html)
     * * `InputBotInlineResult` **result**       - Message to send
     *
     * @param array $params Parameters
     */
    public function sendWebViewResultMessage(array $params): WebViewMessageSent;

    /**
     * Used by the user to relay data from an opened [reply keyboard bot web app](https://core.telegram.org/api/bots/webapps) to the bot that owns it.
     *
     * Parameters:
     * * `InputUser` **bot**         - Bot that owns the web app
     * * `string`    **button_text** - Text of the [keyboardButtonSimpleWebView](https://docs.madelineproto.xyz/API_docs/constructors/keyboardButtonSimpleWebView.html) that was pressed to open the web app.
     * * `string`    **data**        - Data to relay to the bot, obtained from a [`web_app_data_send` JS event](https://core.telegram.org/api/web-events#web-app-data-send).
     *
     * @param array $params Parameters
     */
    public function sendWebViewData(array $params): Updates;

    /**
     * [Transcribe voice message](https://core.telegram.org/api/transcribe).
     *
     * Parameters:
     * * `InputPeer` **peer**   - Peer ID where the voice message was sent
     * * `int`       **msg_id** - Voice message ID
     *
     * @param array $params Parameters
     * @return messages.TranscribedAudio
     */
    public function transcribeAudio(array $params): messages;

    /**
     * Rate [transcribed voice message](https://core.telegram.org/api/transcribe).
     *
     * Parameters:
     * * `InputPeer` **peer**             - Peer where the voice message was sent
     * * `int`       **msg_id**           - Message ID
     * * `long`      **transcription_id** - Transcription ID
     * * `Bool`      **good**             - Whether the transcription was correct
     *
     * @param array $params Parameters
     */
    public function rateTranscribedAudio(array $params): bool;

    /**
     * Fetch [custom emoji stickers Â»](https://core.telegram.org/api/custom-emoji).
     *
     * Returns a list of [documents](https://docs.madelineproto.xyz/API_docs/constructors/document.html) with the animated custom emoji in TGS format, and a [documentAttributeCustomEmoji](https://docs.madelineproto.xyz/API_docs/constructors/documentAttributeCustomEmoji.html) attribute with the original emoji and info about the emoji stickerset this custom emoji belongs to.
     *
     * Parameters:
     * * `[long]` **document_id** - [Custom emoji](https://core.telegram.org/api/custom-emoji) IDs from a [messageEntityCustomEmoji](https://docs.madelineproto.xyz/API_docs/constructors/messageEntityCustomEmoji.html).
     *
     * @param array $params Parameters
     * @return  of Document[]
     */
    public function getCustomEmojiDocuments(array $params): of;

    /**
     * Gets the list of currently installed [custom emoji stickersets](https://core.telegram.org/api/custom-emoji).
     *
     * Parameters:
     * * `long` **hash** - [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)
     *
     * @param array $params Parameters
     * @return messages.AllStickers
     */
    public function getEmojiStickers(array $params): messages;

    /**
     * Gets featured custom emoji stickersets.
     *
     * Parameters:
     * * `long` **hash** - [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)
     *
     * @param array $params Parameters
     * @return messages.FeaturedStickers
     */
    public function getFeaturedEmojiStickers(array $params): messages;

    /**
     * Parameters:
     * * `InputPeer` **peer**          -
     * * `int`       **id**            -
     * * `InputPeer` **reaction_peer** -.
     *
     * @param array $params Parameters
     */
    public function reportReaction(array $params): bool;

    /**
     * Parameters:
     * * `int`  **limit** -
     * * `long` **hash**  -.
     *
     * @param array $params Parameters
     * @return messages.Reactions
     */
    public function getTopReactions(array $params): messages;

    /**
     * Parameters:
     * * `int`  **limit** -
     * * `long` **hash**  -.
     *
     * @param array $params Parameters
     * @return messages.Reactions
     */
    public function getRecentReactions(array $params): messages;

    public function clearRecentReactions(): bool;

    /**
     * Parameters:
     * * `InputPeer` **peer** -
     * * `[int]`     **id**   -.
     *
     * @param array $params Parameters
     */
    public function getExtendedMedia(array $params): Updates;

    /**
     * Parameters:
     * * `int` **period** -.
     *
     * @param array $params Parameters
     */
    public function setDefaultHistoryTTL(array $params): bool;

    public function getDefaultHistoryTTL(): DefaultHistoryTTL;
}

interface updates
{
    /**
     * You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling updates.
     *
     * @return updates.State
     */
    public function getState(): updates;

    /**
     * You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling updates.
     *
     * Parameters:
     * * `int` **pts**             - PTS, see [updates](https://core.telegram.org/api/updates).
     * * `int` **pts_total_limit** - Optional: For fast updating: if provided and `pts + pts_total_limit < remote pts`, [updates.differenceTooLong](https://docs.madelineproto.xyz/API_docs/constructors/updates.differenceTooLong.html) will be returned.<br>Simply tells the server to not return the difference if it is bigger than `pts_total_limit`<br>If the remote pts is too big (&gt; ~4000000), this field will default to 1000000
     * * `int` **date**            - date, see [updates](https://core.telegram.org/api/updates).
     * * `int` **qts**             - QTS, see [updates](https://core.telegram.org/api/updates).
     *
     * @param array $params Parameters
     * @return updates.Difference
     */
    public function getDifference(array $params): updates;

    /**
     * You cannot use this method directly, see https://docs.madelineproto.xyz for more info on handling updates.
     *
     * Parameters:
     * * `boolean`               **force**   - Optional: Set to true to skip some possibly unneeded updates and reduce server-side load
     * * `InputChannel`          **channel** - The channel
     * * `ChannelMessagesFilter` **filter**  - Messsage filter
     * * `int`                   **pts**     - Persistent timestamp (see [updates](https://core.telegram.org/api/updates))
     * * `int`                   **limit**   - How many updates to fetch, max `100000`<br>Ordinary (non-bot) users are supposed to pass `10-100`
     *
     * @param array $params Parameters
     * @return updates.ChannelDifference
     */
    public function getChannelDifference(array $params): updates;
}

interface photos
{
    /**
     * Installs a previously uploaded photo as a profile photo.
     *
     * Parameters:
     * * `boolean`    **fallback** - Optional:
     * * `InputPhoto` **id**       - Input photo
     *
     * @param array $params Parameters
     * @return photos.Photo
     */
    public function updateProfilePhoto(array $params): photos;

    /**
     * Updates current user profile photo.
     *
     * Parameters:
     * * `boolean`   **fallback**       - Optional:
     * * `InputFile` **file**           - Optional: File saved in parts by means of [upload.saveFilePart](https://docs.madelineproto.xyz/API_docs/methods/upload.saveFilePart.html) method
     * * `InputFile` **video**          - Optional: [Animated profile picture](https://core.telegram.org/api/files#animated-profile-pictures) video
     * * `double`    **video_start_ts** - Optional: Floating point UNIX timestamp in seconds, indicating the frame of the video that should be used as static preview.
     *
     * @param array $params Parameters
     * @return photos.Photo
     */
    public function uploadProfilePhoto(array $params): photos;

    /**
     * Deletes profile photos. The method returns a list of successfully deleted photo IDs.
     *
     * Parameters:
     * * `[InputPhoto]` **id** - Input photos to delete
     *
     * @param array $params Parameters
     * @return  of long[]
     */
    public function deletePhotos(array $params): of;

    /**
     * Returns the list of user photos.
     *
     * Parameters:
     * * `InputUser` **user_id** - User ID
     * * `int`       **offset**  - Number of list elements to be skipped
     * * `long`      **max_id**  - If a positive value was transferred, the method will return only photos with IDs less than the set one
     * * `int`       **limit**   - Number of list elements to be returned
     *
     * @param array $params Parameters
     * @return photos.Photos
     */
    public function getUserPhotos(array $params): photos;

    /**
     * Parameters:
     * * `boolean`   **suggest**        - Optional:
     * * `boolean`   **save**           - Optional:
     * * `InputUser` **user_id**        -
     * * `InputFile` **file**           - Optional:
     * * `InputFile` **video**          - Optional:
     * * `double`    **video_start_ts** - Optional:.
     *
     * @param array $params Parameters
     * @return photos.Photo
     */
    public function uploadContactProfilePhoto(array $params): photos;
}

interface upload
{
    /**
     * You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info.
     *
     * Parameters:
     * * `long`  **file_id**   - Random file identifier created by the client
     * * `int`   **file_part** - Numerical order of a part
     * * `bytes` **bytes**     - Binary data, contend of a part
     *
     * @param array $params Parameters
     */
    public function saveFilePart(array $params): bool;

    /**
     * You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info.
     *
     * Parameters:
     * * `boolean`           **precise**       - Optional: Disable some checks on limit and offset values, useful for example to stream videos by keyframes
     * * `boolean`           **cdn_supported** - Optional: Whether the current client supports [CDN downloads](https://core.telegram.org/cdn)
     * * `InputFileLocation` **location**      - File location
     * * `long`              **offset**        - Number of bytes to be skipped
     * * `int`               **limit**         - Number of bytes to be returned
     *
     * @param array $params Parameters
     * @return upload.File
     */
    public function getFile(array $params): upload;

    /**
     * You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info.
     *
     * Parameters:
     * * `long`  **file_id**          - Random file id, created by the client
     * * `int`   **file_part**        - Part sequence number
     * * `int`   **file_total_parts** - Total number of parts
     * * `bytes` **bytes**            - Binary data, part contents
     *
     * @param array $params Parameters
     */
    public function saveBigFilePart(array $params): bool;

    /**
     * Returns content of a web file, by proxying the request through telegram, see the [webfile docs for more info](https://core.telegram.org/api/files#downloading-webfiles).
     *
     * **Note**: the query must be sent to the DC specified in the `webfile_dc_id` [MTProto configuration field](https://core.telegram.org/api/config#mtproto-configuration).
     *
     * Parameters:
     * * `InputWebFileLocation` **location** - The file to download
     * * `int`                  **offset**   - Number of bytes to be skipped
     * * `int`                  **limit**    - Number of bytes to be returned
     *
     * @param array $params Parameters
     * @return upload.WebFile
     */
    public function getWebFile(array $params): upload;

    /**
     * You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info.
     *
     * Parameters:
     * * `bytes` **file_token** - File token
     * * `long`  **offset**     - Offset of chunk to download
     * * `int`   **limit**      - Length of chunk to download
     *
     * @param array $params Parameters
     * @return upload.CdnFile
     */
    public function getCdnFile(array $params): upload;

    /**
     * You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info.
     *
     * Parameters:
     * * `bytes` **file_token**    - File token
     * * `bytes` **request_token** - Request token
     *
     * @param array $params Parameters
     * @return  of FileHash[]
     */
    public function reuploadCdnFile(array $params): of;

    /**
     * You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info.
     *
     * Parameters:
     * * `bytes` **file_token** - File
     * * `long`  **offset**     - Offset from which to start getting hashes
     *
     * @param array $params Parameters
     * @return  of FileHash[]
     */
    public function getCdnFileHashes(array $params): of;

    /**
     * You cannot use this method directly, use the upload, downloadToStream, downloadToFile, downloadToDir methods instead; see https://docs.madelineproto.xyz for more info.
     *
     * Parameters:
     * * `InputFileLocation` **location** - File
     * * `long`              **offset**   - Offset from which to get file hashes
     *
     * @param array $params Parameters
     * @return  of FileHash[]
     */
    public function getFileHashes(array $params): of;
}

interface help
{
    /**
     * Returns current configuration, including data center configuration.
     */
    public function getConfig(): Config;

    /**
     * Returns info on data center nearest to the user.
     */
    public function getNearestDc(): NearestDc;

    /**
     * Returns information on update availability for the current application.
     *
     * Parameters:
     * * `string` **source** - Source
     *
     * @param array $params Parameters
     * @return help.AppUpdate
     */
    public function getAppUpdate(array $params): help;

    /**
     * Returns localized text of a text message with an invitation.
     *
     * @return help.InviteText
     */
    public function getInviteText(): help;

    /**
     * Returns the support user for the "ask a question" feature.
     *
     * @return help.Support
     */
    public function getSupport(): help;

    /**
     * Get changelog of current app.
     * Typically, an [updates](https://docs.madelineproto.xyz/API_docs/constructors/updates.html) constructor will be returned, containing one or more [updateServiceNotification](https://docs.madelineproto.xyz/API_docs/constructors/updateServiceNotification.html) updates with app-specific changelogs.
     *
     * Parameters:
     * * `string` **prev_app_version** - Previous app version
     *
     * @param array $params Parameters
     */
    public function getAppChangelog(array $params): Updates;

    /**
     * Informs the server about the number of pending bot updates if they haven't been processed for a long time; for bots only.
     *
     * Parameters:
     * * `int`    **pending_updates_count** - Number of pending updates
     * * `string` **message**               - Error message, if present
     *
     * @param array $params Parameters
     */
    public function setBotUpdatesStatus(array $params): bool;

    /**
     * Get configuration for [CDN](https://core.telegram.org/cdn) file downloads.
     */
    public function getCdnConfig(): CdnConfig;

    /**
     * Get recently used `t.me` links.
     *
     * When installing official applications from "Download Telegram" buttons present in [t.me](https://t.me) pages, a referral parameter is passed to applications after installation.
     * If, after downloading the application, the user creates a new account (instead of logging into an existing one), the referral parameter should be imported using this method, which returns the [t.me](https://t.me) pages the user recently opened, before installing Telegram.
     *
     * Parameters:
     * * `string` **referer** - Referrer
     *
     * @param array $params Parameters
     * @return help.RecentMeUrls
     */
    public function getRecentMeUrls(array $params): help;

    /**
     * Look for updates of telegram's terms of service.
     *
     * @return help.TermsOfServiceUpdate
     */
    public function getTermsOfServiceUpdate(): help;

    /**
     * Accept the new terms of service.
     *
     * Parameters:
     * * `DataJSON` **id** - ID of terms of service
     *
     * @param array $params Parameters
     */
    public function acceptTermsOfService(array $params): bool;

    /**
     * Get info about an unsupported deep link, see [here for more info Â»](https://core.telegram.org/api/links#unsupported-links).
     *
     * Parameters:
     * * `string` **path** - Path component of a `tg:` link
     *
     * @param array $params Parameters
     * @return help.DeepLinkInfo
     */
    public function getDeepLinkInfo(array $params): help;

    /**
     * Get app-specific configuration, see [client configuration](https://core.telegram.org/api/config#client-configuration) for more info on the result.
     */
    public function getAppConfig(): JSONValue;

    /**
     * Saves logs of application on the server.
     *
     * Parameters:
     * * `[InputAppEvent]` **events** - List of input events
     *
     * @param array $params Parameters
     */
    public function saveAppLog(array $params): bool;

    /**
     * Get [passport](https://core.telegram.org/passport) configuration.
     *
     * Parameters:
     * * `[int]` **hash** - Optional: [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)
     *
     * @param array $params Parameters
     * @return help.PassportConfig
     */
    public function getPassportConfig(array $params): help;

    /**
     * Get localized name of the telegram support user.
     *
     * @return help.SupportName
     */
    public function getSupportName(): help;

    /**
     * Internal use.
     *
     * Parameters:
     * * `InputUser` **user_id** - User ID
     *
     * @param array $params Parameters
     * @return help.UserInfo
     */
    public function getUserInfo(array $params): help;

    /**
     * Internal use.
     *
     * Parameters:
     * * `InputUser`       **user_id**  - User
     * * `string`          **message**  - Message
     * * `[MessageEntity]` **entities** - [Message entities for styled text](https://core.telegram.org/api/entities)
     *
     * @param array $params Parameters
     * @return help.UserInfo
     */
    public function editUserInfo(array $params): help;

    /**
     * Get MTProxy/Public Service Announcement information.
     *
     * @return help.PromoData
     */
    public function getPromoData(): help;

    /**
     * Hide MTProxy/Public Service Announcement information.
     *
     * Parameters:
     * * `InputPeer` **peer** - Peer to hide
     *
     * @param array $params Parameters
     */
    public function hidePromoData(array $params): bool;

    /**
     * Dismiss a [suggestion, see here for more info Â»](https://core.telegram.org/api/config#suggestions).
     *
     * Parameters:
     * * `InputPeer` **peer**       - In the case of pending suggestions in [channels](https://docs.madelineproto.xyz/API_docs/constructors/channelFull.html), the channel ID.
     * * `string`    **suggestion** - [Suggestion, see here for more info Â»](https://core.telegram.org/api/config#suggestions).
     *
     * @param array $params Parameters
     */
    public function dismissSuggestion(array $params): bool;

    /**
     * Get name, ISO code, localized name and phone codes/patterns of all available countries.
     *
     * Parameters:
     * * `string` **lang_code** - Language code of the current user
     * * `[int]`  **hash**      - Optional: [Hash for pagination, for more info click here](https://core.telegram.org/api/offsets#hash-generation)
     *
     * @param array $params Parameters
     * @return help.CountriesList
     */
    public function getCountriesList(array $params): help;

    /**
     * Get Telegram Premium promotion information.
     *
     * @return help.PremiumPromo
     */
    public function getPremiumPromo(): help;
}

interface channels
{
    /**
     * Mark [channel/supergroup](https://core.telegram.org/api/channel) history as read.
     *
     * Parameters:
     * * `InputChannel` **channel** - [Channel/supergroup](https://core.telegram.org/api/channel)
     * * `int`          **max_id**  - ID of message up to which messages should be marked as read
     *
     * @param array $params Parameters
     */
    public function readHistory(array $params): bool;

    /**
     * Delete messages in a [channel/supergroup](https://core.telegram.org/api/channel).
     *
     * Parameters:
     * * `InputChannel` **channel** - [Channel/supergroup](https://core.telegram.org/api/channel)
     * * `[int]`        **id**      - IDs of messages to delete
     *
     * @param array $params Parameters
     * @return messages.AffectedMessages
     */
    public function deleteMessages(array $params): messages;

    /**
     * Reports some messages from a user in a supergroup as spam; requires administrator rights in the supergroup.
     *
     * Parameters:
     * * `InputChannel` **channel**     - Supergroup
     * * `InputPeer`    **participant** - Participant whose messages should be reported
     * * `[int]`        **id**          - IDs of spam messages
     *
     * @param array $params Parameters
     */
    public function reportSpam(array $params): bool;

    /**
     * Please use the [event handler](https://docs.madelineproto.xyz/docs/UPDATES.html).
     *
     * Parameters:
     * * `InputChannel`   **channel** - Channel/supergroup
     * * `[InputMessage]` **id**      - IDs of messages to get
     *
     * @param array $params Parameters
     * @return messages.Messages
     */
    public function getMessages(array $params): messages;

    /**
     * Get the participants of a [supergroup/channel](https://core.telegram.org/api/channel).
     *
     * Parameters:
     * * `InputChannel`              **channel** - Channel
     * * `ChannelParticipantsFilter` **filter**  - Which participant types to fetch
     * * `int`                       **offset**  - [Offset](https://core.telegram.org/api/offsets)
     * * `int`                       **limit**   - [Limit](https://core.telegram.org/api/offsets)
     * * `long`                      **hash**    - [Hash](https://core.telegram.org/api/offsets)
     *
     * @param array $params Parameters
     * @return channels.ChannelParticipants
     */
    public function getParticipants(array $params): channels;

    /**
     * Get info about a [channel/supergroup](https://core.telegram.org/api/channel) participant.
     *
     * Parameters:
     * * `InputChannel` **channel**     - Channel/supergroup
     * * `InputPeer`    **participant** - Participant to get info about
     *
     * @param array $params Parameters
     * @return channels.ChannelParticipant
     */
    public function getParticipant(array $params): channels;

    /**
     * You cannot use this method directly, use the getPwrChat, getInfo, getFullInfo methods instead (see https://docs.madelineproto.xyz for more info).
     *
     * Parameters:
     * * `[InputChannel]` **id** - IDs of channels/supergroups to get info about
     *
     * @param array $params Parameters
     * @return messages.Chats
     */
    public function getChannels(array $params): messages;

    /**
     * You cannot use this method directly, use the getPwrChat, getInfo, getFullInfo methods instead (see https://docs.madelineproto.xyz for more info).
     *
     * Parameters:
     * * `InputChannel` **channel** - The [channel](https://core.telegram.org/api/channel#channels), [supergroup](https://core.telegram.org/api/channel#supergroups) or [gigagroup](https://core.telegram.org/api/channel#gigagroups) to get info about
     *
     * @param array $params Parameters
     * @return messages.ChatFull
     */
    public function getFullChannel(array $params): messages;

    /**
     * Create a [supergroup/channel](https://core.telegram.org/api/channel).
     *
     * Parameters:
     * * `boolean`       **broadcast**  - Optional: Whether to create a [channel](https://core.telegram.org/api/channel)
     * * `boolean`       **megagroup**  - Optional: Whether to create a [supergroup](https://core.telegram.org/api/channel)
     * * `boolean`       **for_import** - Optional: Whether the supergroup is being created to import messages from a foreign chat service using [messages.initHistoryImport](https://docs.madelineproto.xyz/API_docs/methods/messages.initHistoryImport.html)
     * * `string`        **title**      - Channel title
     * * `string`        **about**      - Channel description
     * * `InputGeoPoint` **geo_point**  - Optional: Geogroup location
     * * `string`        **address**    - Optional: Geogroup address
     * * `int`           **ttl_period** - Optional:
     *
     * @param array $params Parameters
     */
    public function createChannel(array $params): Updates;

    /**
     * Modify the admin rights of a user in a [supergroup/channel](https://core.telegram.org/api/channel).
     *
     * Parameters:
     * * `InputChannel`    **channel**      - The [supergroup/channel](https://core.telegram.org/api/channel).
     * * `InputUser`       **user_id**      - The ID of the user whose admin rights should be modified
     * * `ChatAdminRights` **admin_rights** - The admin rights
     * * `string`          **rank**         - Indicates the role (rank) of the admin in the group: just an arbitrary string
     *
     * @param array $params Parameters
     */
    public function editAdmin(array $params): Updates;

    /**
     * Edit the name of a [channel/supergroup](https://core.telegram.org/api/channel).
     *
     * Parameters:
     * * `InputChannel` **channel** - Channel/supergroup
     * * `string`       **title**   - New name
     *
     * @param array $params Parameters
     */
    public function editTitle(array $params): Updates;

    /**
     * Change the photo of a [channel/supergroup](https://core.telegram.org/api/channel).
     *
     * Parameters:
     * * `InputChannel`   **channel** - Channel/supergroup whose photo should be edited
     * * `InputChatPhoto` **photo**   - New photo
     *
     * @param array $params Parameters
     */
    public function editPhoto(array $params): Updates;

    /**
     * Check if a username is free and can be assigned to a channel/supergroup.
     *
     * Parameters:
     * * `InputChannel` **channel**  - The [channel/supergroup](https://core.telegram.org/api/channel) that will assigned the specified username
     * * `string`       **username** - The username to check
     *
     * @param array $params Parameters
     */
    public function checkUsername(array $params): bool;

    /**
     * Change the username of a supergroup/channel.
     *
     * Parameters:
     * * `InputChannel` **channel**  - Channel
     * * `string`       **username** - New username
     *
     * @param array $params Parameters
     */
    public function updateUsername(array $params): bool;

    /**
     * Join a channel/supergroup.
     *
     * Parameters:
     * * `InputChannel` **channel** - Channel/supergroup to join
     *
     * @param array $params Parameters
     */
    public function joinChannel(array $params): Updates;

    /**
     * Leave a [channel/supergroup](https://core.telegram.org/api/channel).
     *
     * Parameters:
     * * `InputChannel` **channel** - [Channel/supergroup](https://core.telegram.org/api/channel) to leave
     *
     * @param array $params Parameters
     */
    public function leaveChannel(array $params): Updates;

    /**
     * Invite users to a channel/supergroup.
     *
     * Parameters:
     * * `InputChannel` **channel** - Channel/supergroup
     * * `[InputUser]`  **users**   - Users to invite
     *
     * @param array $params Parameters
     */
    public function inviteToChannel(array $params): Updates;

    /**
     * Delete a [channel/supergroup](https://core.telegram.org/api/channel).
     *
     * Parameters:
     * * `InputChannel` **channel** - [Channel/supergroup](https://core.telegram.org/api/channel) to delete
     *
     * @param array $params Parameters
     */
    public function deleteChannel(array $params): Updates;

    /**
     * Get link and embed info of a message in a [channel/supergroup](https://core.telegram.org/api/channel).
     *
     * Parameters:
     * * `boolean`      **grouped** - Optional: Whether to include other grouped media (for albums)
     * * `boolean`      **thread**  - Optional: Whether to also include a thread ID, if available, inside of the link
     * * `InputChannel` **channel** - Channel
     * * `int`          **id**      - Message ID
     *
     * @param array $params Parameters
     */
    public function exportMessageLink(array $params): ExportedMessageLink;

    /**
     * Enable/disable message signatures in channels.
     *
     * Parameters:
     * * `InputChannel` **channel** - Channel
     * * `Bool`         **enabled** - Value
     *
     * @param array $params Parameters
     */
    public function toggleSignatures(array $params): Updates;

    /**
     * Get [channels/supergroups/geogroups](https://core.telegram.org/api/channel) we're admin in. Usually called when the user exceeds the [limit](https://docs.madelineproto.xyz/API_docs/constructors/config.html) for owned public [channels/supergroups/geogroups](https://core.telegram.org/api/channel), and the user is given the choice to remove one of his channels/supergroups/geogroups.
     *
     * Parameters:
     * * `boolean` **by_location** - Optional: Get geogroups
     * * `boolean` **check_limit** - Optional: If set and the user has reached the limit of owned public [channels/supergroups/geogroups](https://core.telegram.org/api/channel), instead of returning the channel list one of the specified [errors](#possible-errors) will be returned.<br>Useful to check if a new public channel can indeed be created, even before asking the user to enter a channel username to use in [channels.checkUsername](https://docs.madelineproto.xyz/API_docs/methods/channels.checkUsername.html)/[channels.updateUsername](https://docs.madelineproto.xyz/API_docs/methods/channels.updateUsername.html).
     *
     * @param array $params Parameters
     * @return messages.Chats
     */
    public function getAdminedPublicChannels(array $params): messages;

    /**
     * Ban/unban/kick a user in a [supergroup/channel](https://core.telegram.org/api/channel).
     *
     * Parameters:
     * * `InputChannel`     **channel**       - The [supergroup/channel](https://core.telegram.org/api/channel).
     * * `InputPeer`        **participant**   - Participant to ban
     * * `ChatBannedRights` **banned_rights** - The banned rights
     *
     * @param array $params Parameters
     */
    public function editBanned(array $params): Updates;

    /**
     * Get the admin log of a [channel/supergroup](https://core.telegram.org/api/channel).
     *
     * Parameters:
     * * `InputChannel`                **channel**       - Channel
     * * `string`                      **q**             - Search query, can be empty
     * * `ChannelAdminLogEventsFilter` **events_filter** - Optional: Event filter
     * * `[InputUser]`                 **admins**        - Optional: Only show events from these admins
     * * `long`                        **max_id**        - Maximum ID of message to return (see [pagination](https://core.telegram.org/api/offsets))
     * * `long`                        **min_id**        - Minimum ID of message to return (see [pagination](https://core.telegram.org/api/offsets))
     * * `int`                         **limit**         - Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)
     *
     * @param array $params Parameters
     * @return channels.AdminLogResults
     */
    public function getAdminLog(array $params): channels;

    /**
     * Associate a stickerset to the supergroup.
     *
     * Parameters:
     * * `InputChannel`    **channel**    - Supergroup
     * * `InputStickerSet` **stickerset** - The stickerset to associate
     *
     * @param array $params Parameters
     */
    public function setStickers(array $params): bool;

    /**
     * Mark [channel/supergroup](https://core.telegram.org/api/channel) message contents as read.
     *
     * Parameters:
     * * `InputChannel` **channel** - [Channel/supergroup](https://core.telegram.org/api/channel)
     * * `[int]`        **id**      - IDs of messages whose contents should be marked as read
     *
     * @param array $params Parameters
     */
    public function readMessageContents(array $params): bool;

    /**
     * Delete the history of a [supergroup](https://core.telegram.org/api/channel).
     *
     * Parameters:
     * * `boolean`      **for_everyone** - Optional: Whether the history should be deleted for everyone
     * * `InputChannel` **channel**      - [Supergroup](https://core.telegram.org/api/channel) whose history must be deleted
     * * `int`          **max_id**       - ID of message **up to which** the history must be deleted
     *
     * @param array $params Parameters
     */
    public function deleteHistory(array $params): Updates;

    /**
     * Hide/unhide message history for new channel/supergroup users.
     *
     * Parameters:
     * * `InputChannel` **channel** - Channel/supergroup
     * * `Bool`         **enabled** - Hide/unhide
     *
     * @param array $params Parameters
     */
    public function togglePreHistoryHidden(array $params): Updates;

    /**
     * Get a list of [channels/supergroups](https://core.telegram.org/api/channel) we left.
     *
     * Parameters:
     * * `int` **offset** - Offset for [pagination](https://core.telegram.org/api/offsets)
     *
     * @param array $params Parameters
     * @return messages.Chats
     */
    public function getLeftChannels(array $params): messages;

    /**
     * Get all groups that can be used as [discussion groups](https://core.telegram.org/api/discussion).
     *
     * Returned [basic group chats](https://core.telegram.org/api/channel#basic-groups) must be first upgraded to [supergroups](https://core.telegram.org/api/channel#supergroups) before they can be set as a discussion group.
     * To set a returned supergroup as a discussion group, access to its old messages must be enabled using [channels.togglePreHistoryHidden](https://docs.madelineproto.xyz/API_docs/methods/channels.togglePreHistoryHidden.html), first.
     *
     * @return messages.Chats
     */
    public function getGroupsForDiscussion(): messages;

    /**
     * Associate a group to a channel as [discussion group](https://core.telegram.org/api/discussion) for that channel.
     *
     * Parameters:
     * * `InputChannel` **broadcast** - Channel
     * * `InputChannel` **group**     - [Discussion group](https://core.telegram.org/api/discussion) to associate to the channel
     *
     * @param array $params Parameters
     */
    public function setDiscussionGroup(array $params): bool;

    /**
     * Transfer channel ownership.
     *
     * Parameters:
     * * `InputChannel`          **channel**  - Channel
     * * `InputUser`             **user_id**  - New channel owner
     * * `InputCheckPasswordSRP` **password** - [2FA password](https://core.telegram.org/api/srp) of account
     *
     * @param array $params Parameters
     */
    public function editCreator(array $params): Updates;

    /**
     * Edit location of geogroup.
     *
     * Parameters:
     * * `InputChannel`  **channel**   - [Geogroup](https://core.telegram.org/api/channel)
     * * `InputGeoPoint` **geo_point** - New geolocation
     * * `string`        **address**   - Address string
     *
     * @param array $params Parameters
     */
    public function editLocation(array $params): bool;

    /**
     * Toggle supergroup slow mode: if enabled, users will only be able to send one message every `seconds` seconds.
     *
     * Parameters:
     * * `InputChannel` **channel** - The [supergroup](https://core.telegram.org/api/channel)
     * * `int`          **seconds** - Users will only be able to send one message every `seconds` seconds, `0` to disable the limitation
     *
     * @param array $params Parameters
     */
    public function toggleSlowMode(array $params): Updates;

    /**
     * Get inactive channels and supergroups.
     *
     * @return messages.InactiveChats
     */
    public function getInactiveChannels(): messages;

    /**
     * Convert a [supergroup](https://core.telegram.org/api/channel) to a [gigagroup](https://core.telegram.org/api/channel), when requested by [channel suggestions](https://core.telegram.org/api/config#channel-suggestions).
     *
     * Parameters:
     * * `InputChannel` **channel** - The [supergroup](https://core.telegram.org/api/channel) to convert
     *
     * @param array $params Parameters
     */
    public function convertToGigagroup(array $params): Updates;

    /**
     * Mark a specific sponsored message as read.
     *
     * Parameters:
     * * `InputChannel` **channel** - Peer
     *
     * @param array $params Parameters
     */
    public function viewSponsoredMessage(array $params): bool;

    /**
     * Get a list of sponsored messages.
     *
     * Parameters:
     * * `InputChannel` **channel** - Peer
     *
     * @param array $params Parameters
     * @return messages.SponsoredMessages
     */
    public function getSponsoredMessages(array $params): messages;

    /**
     * Obtains a list of peers that can be used to send messages in a specific group.
     *
     * Parameters:
     * * `InputPeer` **peer** - The group where we intend to send messages
     *
     * @param array $params Parameters
     * @return channels.SendAsPeers
     */
    public function getSendAs(array $params): channels;

    /**
     * Delete all messages sent by a specific participant of a given supergroup.
     *
     * Parameters:
     * * `InputChannel` **channel**     - Supergroup
     * * `InputPeer`    **participant** - The participant whose messages should be deleted
     *
     * @param array $params Parameters
     * @return messages.AffectedHistory
     */
    public function deleteParticipantHistory(array $params): messages;

    /**
     * Set whether all users [should join a discussion group in order to comment on a post Â»](https://core.telegram.org/api/discussion#requiring-users-to-join-the-group).
     *
     * Parameters:
     * * `InputChannel` **channel** - Discussion group
     * * `Bool`         **enabled** - Toggle
     *
     * @param array $params Parameters
     */
    public function toggleJoinToSend(array $params): Updates;

    /**
     * Set whether all users should [request admin approval to join the group Â»](https://core.telegram.org/api/invites#join-requests).
     *
     * Parameters:
     * * `InputChannel` **channel** - Group
     * * `Bool`         **enabled** - Toggle
     *
     * @param array $params Parameters
     */
    public function toggleJoinRequest(array $params): Updates;

    /**
     * Parameters:
     * * `InputChannel` **channel** -
     * * `[string]`     **order**   -.
     *
     * @param array $params Parameters
     */
    public function reorderUsernames(array $params): bool;

    /**
     * Parameters:
     * * `InputChannel` **channel**  -
     * * `string`       **username** -
     * * `Bool`         **active**   -.
     *
     * @param array $params Parameters
     */
    public function toggleUsername(array $params): bool;

    /**
     * Parameters:
     * * `InputChannel` **channel** -.
     *
     * @param array $params Parameters
     */
    public function deactivateAllUsernames(array $params): bool;

    /**
     * Parameters:
     * * `InputChannel` **channel** -
     * * `Bool`         **enabled** -.
     *
     * @param array $params Parameters
     */
    public function toggleForum(array $params): Updates;

    /**
     * Parameters:
     * * `InputChannel` **channel**       -
     * * `string`       **title**         -
     * * `int`          **icon_color**    - Optional:
     * * `long`         **icon_emoji_id** - Optional:
     * * `InputPeer`    **send_as**       - Optional:.
     *
     * @param array $params Parameters
     */
    public function createForumTopic(array $params): Updates;

    /**
     * Parameters:
     * * `InputChannel` **channel**      -
     * * `string`       **q**            - Optional:
     * * `int`          **offset_date**  -
     * * `int`          **offset_id**    -
     * * `int`          **offset_topic** -
     * * `int`          **limit**        -.
     *
     * @param array $params Parameters
     * @return messages.ForumTopics
     */
    public function getForumTopics(array $params): messages;

    /**
     * Parameters:
     * * `InputChannel` **channel** -
     * * `[int]`        **topics**  -.
     *
     * @param array $params Parameters
     * @return messages.ForumTopics
     */
    public function getForumTopicsByID(array $params): messages;

    /**
     * Parameters:
     * * `InputChannel` **channel**       -
     * * `int`          **topic_id**      -
     * * `string`       **title**         - Optional:
     * * `long`         **icon_emoji_id** - Optional:
     * * `Bool`         **closed**        - Optional:
     * * `Bool`         **hidden**        - Optional:.
     *
     * @param array $params Parameters
     */
    public function editForumTopic(array $params): Updates;

    /**
     * Parameters:
     * * `InputChannel` **channel**  -
     * * `int`          **topic_id** -
     * * `Bool`         **pinned**   -.
     *
     * @param array $params Parameters
     */
    public function updatePinnedForumTopic(array $params): Updates;

    /**
     * Parameters:
     * * `InputChannel` **channel**    -
     * * `int`          **top_msg_id** -.
     *
     * @param array $params Parameters
     * @return messages.AffectedHistory
     */
    public function deleteTopicHistory(array $params): messages;

    /**
     * Parameters:
     * * `boolean`      **force**   - Optional:
     * * `InputChannel` **channel** -
     * * `[int]`        **order**   -.
     *
     * @param array $params Parameters
     */
    public function reorderPinnedForumTopics(array $params): Updates;

    /**
     * Parameters:
     * * `InputChannel` **channel** -
     * * `Bool`         **enabled** -.
     *
     * @param array $params Parameters
     */
    public function toggleAntiSpam(array $params): Updates;

    /**
     * Parameters:
     * * `InputChannel` **channel** -
     * * `int`          **msg_id**  -.
     *
     * @param array $params Parameters
     */
    public function reportAntiSpamFalsePositive(array $params): bool;

    /**
     * Parameters:
     * * `InputChannel` **channel** -
     * * `Bool`         **enabled** -.
     *
     * @param array $params Parameters
     */
    public function toggleParticipantsHidden(array $params): Updates;
}

interface bots
{
    /**
     * Sends a custom request; for bots only.
     *
     * Parameters:
     * * `string`   **custom_method** - The method name
     * * `DataJSON` **params**        - JSON-serialized method parameters
     *
     * @param array $params Parameters
     */
    public function sendCustomRequest(array $params): DataJSON;

    /**
     * Answers a custom query; for bots only.
     *
     * Parameters:
     * * `long`     **query_id** - Identifier of a custom query
     * * `DataJSON` **data**     - JSON-serialized answer to the query
     *
     * @param array $params Parameters
     */
    public function answerWebhookJSONQuery(array $params): bool;

    /**
     * Set bot command list.
     *
     * Parameters:
     * * `BotCommandScope` **scope**     - Command scope
     * * `string`          **lang_code** - Language code
     * * `[BotCommand]`    **commands**  - Bot commands
     *
     * @param array $params Parameters
     */
    public function setBotCommands(array $params): bool;

    /**
     * Clear bot commands for the specified bot scope and language code.
     *
     * Parameters:
     * * `BotCommandScope` **scope**     - Command scope
     * * `string`          **lang_code** - Language code
     *
     * @param array $params Parameters
     */
    public function resetBotCommands(array $params): bool;

    /**
     * Obtain a list of bot commands for the specified bot scope and language code.
     *
     * Parameters:
     * * `BotCommandScope` **scope**     - Command scope
     * * `string`          **lang_code** - Language code
     *
     * @param array $params Parameters
     * @return  of BotCommand[]
     */
    public function getBotCommands(array $params): of;

    /**
     * Sets the [menu button action Â»](https://core.telegram.org/api/bots/menu) for a given user or for all users.
     *
     * Parameters:
     * * `InputUser`     **user_id** - User ID
     * * `BotMenuButton` **button**  - Bot menu button action
     *
     * @param array $params Parameters
     */
    public function setBotMenuButton(array $params): bool;

    /**
     * Gets the menu button action for a given user or for all users, previously set using [bots.setBotMenuButton](https://docs.madelineproto.xyz/API_docs/methods/bots.setBotMenuButton.html); users can see this information in the [botInfo](https://docs.madelineproto.xyz/API_docs/constructors/botInfo.html) constructor.
     *
     * Parameters:
     * * `InputUser` **user_id** - User ID or empty for the default menu button.
     *
     * @param array $params Parameters
     */
    public function getBotMenuButton(array $params): BotMenuButton;

    /**
     * Set the default [suggested admin rights](https://core.telegram.org/api/rights#suggested-bot-rights) for bots being added as admins to channels, see [here for more info on how to handle them Â»](https://core.telegram.org/api/rights#suggested-bot-rights).
     *
     * Parameters:
     * * `ChatAdminRights` **admin_rights** - Admin rights
     *
     * @param array $params Parameters
     */
    public function setBotBroadcastDefaultAdminRights(array $params): bool;

    /**
     * Set the default [suggested admin rights](https://core.telegram.org/api/rights#suggested-bot-rights) for bots being added as admins to groups, see [here for more info on how to handle them Â»](https://core.telegram.org/api/rights#suggested-bot-rights).
     *
     * Parameters:
     * * `ChatAdminRights` **admin_rights** - Admin rights
     *
     * @param array $params Parameters
     */
    public function setBotGroupDefaultAdminRights(array $params): bool;
}

interface payments
{
    /**
     * Get a payment form.
     *
     * Parameters:
     * * `InputInvoice` **invoice**      - Invoice
     * * `DataJSON`     **theme_params** - Optional: A JSON object with the following keys, containing color theme information (integers, RGB24) to pass to the payment provider, to apply in eventual verification pages: <br>`bg_color` \- Background color <br>`text_color` \- Text color <br>`hint_color` \- Hint text color <br>`link_color` \- Link color <br>`button_color` \- Button color <br>`button_text_color` \- Button text color
     *
     * @param array $params Parameters
     * @return payments.PaymentForm
     */
    public function getPaymentForm(array $params): payments;

    /**
     * Get payment receipt.
     *
     * Parameters:
     * * `InputPeer` **peer**   - The peer where the payment receipt was sent
     * * `int`       **msg_id** - Message ID of receipt
     *
     * @param array $params Parameters
     * @return payments.PaymentReceipt
     */
    public function getPaymentReceipt(array $params): payments;

    /**
     * Submit requested order information for validation.
     *
     * Parameters:
     * * `boolean`              **save**    - Optional: Save order information to re-use it for future orders
     * * `InputInvoice`         **invoice** - Invoice
     * * `PaymentRequestedInfo` **info**    - Requested order information
     *
     * @param array $params Parameters
     * @return payments.ValidatedRequestedInfo
     */
    public function validateRequestedInfo(array $params): payments;

    /**
     * Send compiled payment form.
     *
     * Parameters:
     * * `long`                    **form_id**            - Form ID
     * * `InputInvoice`            **invoice**            - Invoice
     * * `string`                  **requested_info_id**  - Optional: ID of saved and validated [order info](https://docs.madelineproto.xyz/API_docs/constructors/payments.validatedRequestedInfo.html)
     * * `string`                  **shipping_option_id** - Optional: Chosen shipping option ID
     * * `InputPaymentCredentials` **credentials**        - Payment credentials
     * * `long`                    **tip_amount**         - Optional: Tip, in the smallest units of the currency (integer, not float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the exp parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
     *
     * @param array $params Parameters
     * @return payments.PaymentResult
     */
    public function sendPaymentForm(array $params): payments;

    /**
     * Get saved payment information.
     *
     * @return payments.SavedInfo
     */
    public function getSavedInfo(): payments;

    /**
     * Clear saved payment information.
     *
     * Parameters:
     * * `boolean` **credentials** - Optional: Remove saved payment credentials
     * * `boolean` **info**        - Optional: Clear the last order settings saved by the user
     *
     * @param array $params Parameters
     */
    public function clearSavedInfo(array $params): bool;

    /**
     * Get info about a credit card.
     *
     * Parameters:
     * * `string` **number** - Credit card number
     *
     * @param array $params Parameters
     * @return payments.BankCardData
     */
    public function getBankCardData(array $params): payments;

    /**
     * Generate an [invoice deep link](https://core.telegram.org/api/links#invoice-links).
     *
     * Parameters:
     * * `InputMedia` **invoice_media** - Invoice
     *
     * @param array $params Parameters
     * @return payments.ExportedInvoice
     */
    public function exportInvoice(array $params): payments;

    /**
     * Informs server about a purchase made through the App Store: for official applications only.
     *
     * Parameters:
     * * `bytes`                    **receipt** - Receipt
     * * `InputStorePaymentPurpose` **purpose** - Payment purpose
     *
     * @param array $params Parameters
     */
    public function assignAppStoreTransaction(array $params): Updates;

    /**
     * Informs server about a purchase made through the Play Store: for official applications only.
     *
     * Parameters:
     * * `DataJSON`                 **receipt** - Receipt
     * * `InputStorePaymentPurpose` **purpose** - Payment purpose
     *
     * @param array $params Parameters
     */
    public function assignPlayMarketTransaction(array $params): Updates;

    /**
     * Checks whether Telegram Premium purchase is possible. Must be called before in-store Premium purchase, official apps only.
     *
     * Parameters:
     * * `InputStorePaymentPurpose` **purpose** - Payment purpose
     *
     * @param array $params Parameters
     */
    public function canPurchasePremium(array $params): bool;
}

interface stickers
{
    /**
     * Create a stickerset, bots only.
     *
     * Parameters:
     * * `boolean`               **masks**      - Optional: Whether this is a mask stickerset
     * * `boolean`               **animated**   - Optional: Whether this is an animated stickerset
     * * `boolean`               **videos**     - Optional: Whether this is a video stickerset
     * * `InputUser`             **user_id**    - Stickerset owner
     * * `string`                **title**      - Stickerset name, `1-64` chars
     * * `string`                **short_name** - Short name of sticker set, to be used in [sticker deep links Â»](https://core.telegram.org/api/links#stickerset-links). Can contain only english letters, digits and underscores. Must begin with a letter, can't contain consecutive underscores and, **if called by a bot**, must end in `"_by_<bot_username>"`. `<bot_username>` is case insensitive. 1-64 characters.
     * * `InputDocument`         **thumb**      - Optional: Thumbnail
     * * `[InputStickerSetItem]` **stickers**   - Stickers
     * * `string`                **software**   - Optional: Used when [importing stickers using the sticker import SDKs](https://core.telegram.org/import-stickers), specifies the name of the software that created the stickers
     *
     * @param array $params Parameters
     * @return messages.StickerSet
     */
    public function createStickerSet(array $params): messages;

    /**
     * Remove a sticker from the set where it belongs, bots only. The sticker set must have been created by the bot.
     *
     * Parameters:
     * * `InputDocument` **sticker** - The sticker to remove
     *
     * @param array $params Parameters
     * @return messages.StickerSet
     */
    public function removeStickerFromSet(array $params): messages;

    /**
     * Changes the absolute position of a sticker in the set to which it belongs; for bots only. The sticker set must have been created by the bot.
     *
     * Parameters:
     * * `InputDocument` **sticker**  - The sticker
     * * `int`           **position** - The new position of the sticker, zero-based
     *
     * @param array $params Parameters
     * @return messages.StickerSet
     */
    public function changeStickerPosition(array $params): messages;

    /**
     * Add a sticker to a stickerset, bots only. The sticker set must have been created by the bot.
     *
     * Parameters:
     * * `InputStickerSet`     **stickerset** - The stickerset
     * * `InputStickerSetItem` **sticker**    - The sticker
     *
     * @param array $params Parameters
     * @return messages.StickerSet
     */
    public function addStickerToSet(array $params): messages;

    /**
     * Set stickerset thumbnail.
     *
     * Parameters:
     * * `InputStickerSet` **stickerset** - Stickerset
     * * `InputDocument`   **thumb**      - Thumbnail
     *
     * @param array $params Parameters
     * @return messages.StickerSet
     */
    public function setStickerSetThumb(array $params): messages;

    /**
     * Check whether the given short name is available.
     *
     * Parameters:
     * * `string` **short_name** - Short name
     *
     * @param array $params Parameters
     */
    public function checkShortName(array $params): bool;

    /**
     * Suggests a short name for a given stickerpack name.
     *
     * Parameters:
     * * `string` **title** - Sticker pack name
     *
     * @param array $params Parameters
     * @return stickers.SuggestedShortName
     */
    public function suggestShortName(array $params): stickers;
}

interface phone
{
    /**
     * Get phone call configuration to be passed to libtgvoip's shared config.
     */
    public function getCallConfig(): DataJSON;

    /**
     * You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls.
     *
     * Parameters:
     * * `boolean`           **video**    - Optional: Whether to start a video call
     * * `InputUser`         **user_id**  - Destination of the phone call
     * * `bytes`             **g_a_hash** - [Parameter for E2E encryption key exchange Â»](https://core.telegram.org/api/end-to-end/voice-calls)
     * * `PhoneCallProtocol` **protocol** - Phone call settings
     *
     * @param array $params Parameters
     * @return phone.PhoneCall
     */
    public function requestCall(array $params): phone;

    /**
     * You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls.
     *
     * Parameters:
     * * `InputPhoneCall`    **peer**     - The call to accept
     * * `bytes`             **g_b**      - [Parameter for E2E encryption key exchange Â»](https://core.telegram.org/api/end-to-end/voice-calls)
     * * `PhoneCallProtocol` **protocol** - Phone call settings
     *
     * @param array $params Parameters
     * @return phone.PhoneCall
     */
    public function acceptCall(array $params): phone;

    /**
     * You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls.
     *
     * Parameters:
     * * `InputPhoneCall`    **peer**            - The phone call
     * * `bytes`             **g_a**             - [Parameter for E2E encryption key exchange Â»](https://core.telegram.org/api/end-to-end/voice-calls)
     * * `long`              **key_fingerprint** - Key fingerprint
     * * `PhoneCallProtocol` **protocol**        - Phone call settings
     *
     * @param array $params Parameters
     * @return phone.PhoneCall
     */
    public function confirmCall(array $params): phone;

    /**
     * Optional: notify the server that the user is currently busy in a call: this will automatically refuse all incoming phone calls until the current phone call is ended.
     *
     * Parameters:
     * * `InputPhoneCall` **peer** - The phone call we're currently in
     *
     * @param array $params Parameters
     */
    public function receivedCall(array $params): bool;

    /**
     * You cannot use this method directly, see https://docs.madelineproto.xyz#calls for more info on handling calls.
     *
     * Parameters:
     * * `boolean`                **video**         - Optional: Whether this is a video call
     * * `InputPhoneCall`         **peer**          - The phone call
     * * `int`                    **duration**      - Call duration
     * * `PhoneCallDiscardReason` **reason**        - Why was the call discarded
     * * `long`                   **connection_id** - Preferred libtgvoip relay ID
     *
     * @param array $params Parameters
     */
    public function discardCall(array $params): Updates;

    /**
     * Rate a call, returns info about the rating message sent to the official VoIP bot.
     *
     * Parameters:
     * * `boolean`        **user_initiative** - Optional: Whether the user decided on their own initiative to rate the call
     * * `InputPhoneCall` **peer**            - The call to rate
     * * `int`            **rating**          - Rating in `1-5` stars
     * * `string`         **comment**         - An additional comment
     *
     * @param array $params Parameters
     */
    public function setCallRating(array $params): Updates;

    /**
     * Send phone call debug data to server.
     *
     * Parameters:
     * * `InputPhoneCall` **peer**  - Phone call
     * * `DataJSON`       **debug** - Debug statistics obtained from libtgvoip
     *
     * @param array $params Parameters
     */
    public function saveCallDebug(array $params): bool;

    /**
     * Send VoIP signaling data.
     *
     * Parameters:
     * * `InputPhoneCall` **peer** - Phone call
     * * `bytes`          **data** - Signaling payload
     *
     * @param array $params Parameters
     */
    public function sendSignalingData(array $params): bool;

    /**
     * Create a group call or livestream.
     *
     * Parameters:
     * * `boolean`   **rtmp_stream**   - Optional: Whether RTMP stream support should be enabled: only the [group/supergroup/channel](https://core.telegram.org/api/channel) owner can use this flag.
     * * `InputPeer` **peer**          - Associate the group call or livestream to the provided [group/supergroup/channel](https://core.telegram.org/api/channel)
     * * `string`    **title**         - Optional: Call title
     * * `int`       **schedule_date** - Optional: For scheduled group call or livestreams, the absolute date when the group call will start
     *
     * @param array $params Parameters
     */
    public function createGroupCall(array $params): Updates;

    /**
     * Join a group call.
     *
     * Parameters:
     * * `boolean`        **muted**         - Optional: If set, the user will be muted by default upon joining.
     * * `boolean`        **video_stopped** - Optional: If set, the user's video will be disabled by default upon joining.
     * * `InputGroupCall` **call**          - The group call
     * * `InputPeer`      **join_as**       - Join the group call, presenting yourself as the specified user/channel
     * * `string`         **invite_hash**   - Optional: The invitation hash from the [invite link Â»](https://core.telegram.org/api/links#voice-chatvideo-chatlivestream-links), if provided allows speaking in a livestream or muted group chat.
     * * `DataJSON`       **params**        - WebRTC parameters
     *
     * @param array $params Parameters
     */
    public function joinGroupCall(array $params): Updates;

    /**
     * Leave a group call.
     *
     * Parameters:
     * * `InputGroupCall` **call**   - The group call
     * * `int`            **source** - Your source ID
     *
     * @param array $params Parameters
     */
    public function leaveGroupCall(array $params): Updates;

    /**
     * Invite a set of users to a group call.
     *
     * Parameters:
     * * `InputGroupCall` **call**  - The group call
     * * `[InputUser]`    **users** - The users to invite.
     *
     * @param array $params Parameters
     */
    public function inviteToGroupCall(array $params): Updates;

    /**
     * Terminate a group call.
     *
     * Parameters:
     * * `InputGroupCall` **call** - The group call to terminate
     *
     * @param array $params Parameters
     */
    public function discardGroupCall(array $params): Updates;

    /**
     * Change group call settings.
     *
     * Parameters:
     * * `boolean`        **reset_invite_hash** - Optional: Invalidate existing invite links
     * * `InputGroupCall` **call**              - Group call
     * * `Bool`           **join_muted**        - Optional: Whether all users will that join this group call are muted by default upon joining the group call
     *
     * @param array $params Parameters
     */
    public function toggleGroupCallSettings(array $params): Updates;

    /**
     * Get info about a group call.
     *
     * Parameters:
     * * `InputGroupCall` **call**  - The group call
     * * `int`            **limit** - Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)
     *
     * @param array $params Parameters
     * @return phone.GroupCall
     */
    public function getGroupCall(array $params): phone;

    /**
     * Get group call participants.
     *
     * Parameters:
     * * `InputGroupCall` **call**    - Group call
     * * `[InputPeer]`    **ids**     - If specified, will fetch group participant info about the specified peers
     * * `[int]`          **sources** - If specified, will fetch group participant info about the specified WebRTC source IDs
     * * `string`         **offset**  - Offset for results, taken from the `next_offset` field of [phone.groupParticipants](https://docs.madelineproto.xyz/API_docs/constructors/phone.groupParticipants.html), initially an empty string. <br>Note: if no more results are available, the method call will return an empty `next_offset`; thus, avoid providing the `next_offset` returned in [phone.groupParticipants](https://docs.madelineproto.xyz/API_docs/constructors/phone.groupParticipants.html) if it is empty, to avoid an infinite loop.
     * * `int`            **limit**   - Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)
     *
     * @param array $params Parameters
     * @return phone.GroupParticipants
     */
    public function getGroupParticipants(array $params): phone;

    /**
     * Check whether the group call Server Forwarding Unit is currently receiving the streams with the specified WebRTC source IDs.
     * Returns an intersection of the source IDs specified in `sources`, and the source IDs currently being forwarded by the SFU.
     *
     * Parameters:
     * * `InputGroupCall` **call**    - Group call
     * * `[int]`          **sources** - Source IDs
     *
     * @param array $params Parameters
     * @return  of int[]
     */
    public function checkGroupCall(array $params): of;

    /**
     * Start or stop recording a group call: the recorded audio and video streams will be automatically sent to `Saved messages` (the chat with ourselves).
     *
     * Parameters:
     * * `boolean`        **start**          - Optional: Whether to start or stop recording
     * * `boolean`        **video**          - Optional: Whether to also record video streams
     * * `InputGroupCall` **call**           - The group call or livestream
     * * `string`         **title**          - Optional: Recording title
     * * `Bool`           **video_portrait** - Optional: If video stream recording is enabled, whether to record in portrait or landscape mode
     *
     * @param array $params Parameters
     */
    public function toggleGroupCallRecord(array $params): Updates;

    /**
     * Edit information about a given group call participant.
     *
     * Note: [flags](https://core.telegram.org/mtproto/TL-combinators#conditional-fields).N?[Bool](https://docs.madelineproto.xyz/API_docs/types/Bool.html) parameters can have three possible values:
     *
     * - If the [TL flag](https://core.telegram.org/mtproto/TL-combinators#conditional-fields) is not set, the previous value will not be changed.
     * - If the [TL flag](https://core.telegram.org/mtproto/TL-combinators#conditional-fields) is set and contains a [boolTrue](https://docs.madelineproto.xyz/API_docs/constructors/boolTrue.html), the previous value will be overwritten to `true`.
     * - If the [TL flag](https://core.telegram.org/mtproto/TL-combinators#conditional-fields) is set and contains a [boolFalse](https://docs.madelineproto.xyz/API_docs/constructors/boolFalse.html), the previous value will be overwritten to `false`.
     *
     * Parameters:
     * * `InputGroupCall` **call**                - The group call
     * * `InputPeer`      **participant**         - The group call participant (can also be the user itself)
     * * `Bool`           **muted**               - Optional: Whether to mute or unmute the specified participant
     * * `int`            **volume**              - Optional: New volume
     * * `Bool`           **raise_hand**          - Optional: Raise or lower hand
     * * `Bool`           **video_stopped**       - Optional: Start or stop the video stream
     * * `Bool`           **video_paused**        - Optional: Pause or resume the video stream
     * * `Bool`           **presentation_paused** - Optional: Pause or resume the screen sharing stream
     *
     * @param array $params Parameters
     */
    public function editGroupCallParticipant(array $params): Updates;

    /**
     * Edit the title of a group call or livestream.
     *
     * Parameters:
     * * `InputGroupCall` **call**  - Group call
     * * `string`         **title** - New title
     *
     * @param array $params Parameters
     */
    public function editGroupCallTitle(array $params): Updates;

    /**
     * Get a list of peers that can be used to join a group call, presenting yourself as a specific user/channel.
     *
     * Parameters:
     * * `InputPeer` **peer** - The dialog whose group call or livestream we're trying to join
     *
     * @param array $params Parameters
     * @return phone.JoinAsPeers
     */
    public function getGroupCallJoinAs(array $params): phone;

    /**
     * Get an [invite link](https://core.telegram.org/api/links#voice-chatvideo-chatlivestream-links) for a group call or livestream.
     *
     * Parameters:
     * * `boolean`        **can_self_unmute** - Optional: For livestreams or muted group chats, if set, users that join using this link will be able to speak without explicitly requesting permission by (for example by raising their hand).
     * * `InputGroupCall` **call**            - The group call
     *
     * @param array $params Parameters
     * @return phone.ExportedGroupCallInvite
     */
    public function exportGroupCallInvite(array $params): phone;

    /**
     * Subscribe or unsubscribe to a scheduled group call.
     *
     * Parameters:
     * * `InputGroupCall` **call**       - Scheduled group call
     * * `Bool`           **subscribed** - Enable or disable subscription
     *
     * @param array $params Parameters
     */
    public function toggleGroupCallStartSubscription(array $params): Updates;

    /**
     * Start a scheduled group call.
     *
     * Parameters:
     * * `InputGroupCall` **call** - The scheduled group call
     *
     * @param array $params Parameters
     */
    public function startScheduledGroupCall(array $params): Updates;

    /**
     * Set the default peer that will be used to join a group call in a specific dialog.
     *
     * Parameters:
     * * `InputPeer` **peer**    - The dialog
     * * `InputPeer` **join_as** - The default peer that will be used to join group calls in this dialog, presenting yourself as a specific user/channel.
     *
     * @param array $params Parameters
     */
    public function saveDefaultGroupCallJoinAs(array $params): bool;

    /**
     * Start screen sharing in a call.
     *
     * Parameters:
     * * `InputGroupCall` **call**   - The group call
     * * `DataJSON`       **params** - WebRTC parameters
     *
     * @param array $params Parameters
     */
    public function joinGroupCallPresentation(array $params): Updates;

    /**
     * Stop screen sharing in a group call.
     *
     * Parameters:
     * * `InputGroupCall` **call** - The group call
     *
     * @param array $params Parameters
     */
    public function leaveGroupCallPresentation(array $params): Updates;

    /**
     * Get info about RTMP streams in a group call or livestream.
     * This method should be invoked to the same group/channel-related DC used for [downloading livestream chunks](https://core.telegram.org/api/files#downloading-files).
     * As usual, the media DC is preferred, if available.
     *
     * Parameters:
     * * `InputGroupCall` **call** - Group call or livestream
     *
     * @param array $params Parameters
     * @return phone.GroupCallStreamChannels
     */
    public function getGroupCallStreamChannels(array $params): phone;

    /**
     * Get RTMP URL and stream key for RTMP livestreams. Can be used even before creating the actual RTMP livestream with [phone.createGroupCall](https://docs.madelineproto.xyz/API_docs/methods/phone.createGroupCall.html) (the `rtmp_stream` flag must be set).
     *
     * Parameters:
     * * `InputPeer` **peer**   - Peer to livestream into
     * * `Bool`      **revoke** - Whether to revoke the previous stream key or simply return the existing one
     *
     * @param array $params Parameters
     * @return phone.GroupCallStreamRtmpUrl
     */
    public function getGroupCallStreamRtmpUrl(array $params): phone;

    /**
     * Save phone call debug information.
     *
     * Parameters:
     * * `InputPhoneCall` **peer** - Phone call
     * * `InputFile`      **file** - Logs
     *
     * @param array $params Parameters
     */
    public function saveCallLog(array $params): bool;
}

interface langpack
{
    /**
     * Get localization pack strings.
     *
     * Parameters:
     * * `string` **lang_pack** - Language pack name, usually obtained from a [language pack link](https://core.telegram.org/api/links#language-pack-links)
     * * `string` **lang_code** - Language code
     *
     * @param array $params Parameters
     */
    public function getLangPack(array $params): LangPackDifference;

    /**
     * Get strings from a language pack.
     *
     * Parameters:
     * * `string`   **lang_pack** - Language pack name, usually obtained from a [language pack link](https://core.telegram.org/api/links#language-pack-links)
     * * `string`   **lang_code** - Language code
     * * `[string]` **keys**      - Strings to get
     *
     * @param array $params Parameters
     * @return  of LangPackString[]
     */
    public function getStrings(array $params): of;

    /**
     * Get new strings in language pack.
     *
     * Parameters:
     * * `string` **lang_pack**    - Language pack
     * * `string` **lang_code**    - Language code
     * * `int`    **from_version** - Previous localization pack version
     *
     * @param array $params Parameters
     */
    public function getDifference(array $params): LangPackDifference;

    /**
     * Get information about all languages in a localization pack.
     *
     * Parameters:
     * * `string` **lang_pack** - Language pack
     *
     * @param array $params Parameters
     * @return  of LangPackLanguage[]
     */
    public function getLanguages(array $params): of;

    /**
     * Get information about a language in a localization pack.
     *
     * Parameters:
     * * `string` **lang_pack** - Language pack name, usually obtained from a [language pack link](https://core.telegram.org/api/links#language-pack-links)
     * * `string` **lang_code** - Language code
     *
     * @param array $params Parameters
     */
    public function getLanguage(array $params): LangPackLanguage;
}

interface folders
{
    /**
     * Edit peers in [peer folder](https://core.telegram.org/api/folders#peer-folders).
     *
     * Parameters:
     * * `[InputFolderPeer]` **folder_peers** - New peer list
     *
     * @param array $params Parameters
     */
    public function editPeerFolders(array $params): Updates;

    /**
     * Delete a [peer folder](https://core.telegram.org/api/folders#peer-folders).
     *
     * Parameters:
     * * `int` **folder_id** - [Peer folder ID, for more info click here](https://core.telegram.org/api/folders#peer-folders)
     *
     * @param array $params Parameters
     */
    public function deleteFolder(array $params): Updates;
}

interface stats
{
    /**
     * Get [channel statistics](https://core.telegram.org/api/stats).
     *
     * Parameters:
     * * `boolean`      **dark**    - Optional: Whether to enable dark theme for graph colors
     * * `InputChannel` **channel** - The channel
     *
     * @param array $params Parameters
     * @return stats.BroadcastStats
     */
    public function getBroadcastStats(array $params): stats;

    /**
     * Load [channel statistics graph](https://core.telegram.org/api/stats) asynchronously.
     *
     * Parameters:
     * * `string` **token** - Graph token from [statsGraphAsync](https://docs.madelineproto.xyz/API_docs/constructors/statsGraphAsync.html) constructor
     * * `long`   **x**     - Optional: Zoom value, if required
     *
     * @param array $params Parameters
     */
    public function loadAsyncGraph(array $params): StatsGraph;

    /**
     * Get [supergroup statistics](https://core.telegram.org/api/stats).
     *
     * Parameters:
     * * `boolean`      **dark**    - Optional: Whether to enable dark theme for graph colors
     * * `InputChannel` **channel** - [Supergroup ID](https://core.telegram.org/api/channel)
     *
     * @param array $params Parameters
     * @return stats.MegagroupStats
     */
    public function getMegagroupStats(array $params): stats;

    /**
     * Obtains a list of messages, indicating to which other public channels was a channel message forwarded.
     * Will return a list of [messages](https://docs.madelineproto.xyz/API_docs/constructors/message.html) with `peer_id` equal to the public channel to which this message was forwarded.
     *
     * Parameters:
     * * `InputChannel` **channel**     - Source channel
     * * `int`          **msg_id**      - Source message ID
     * * `int`          **offset_rate** - Initially 0, then set to the `next_rate` parameter of [messages.messagesSlice](https://docs.madelineproto.xyz/API_docs/constructors/messages.messagesSlice.html)
     * * `InputPeer`    **offset_peer** - [Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)
     * * `int`          **offset_id**   - [Offsets for pagination, for more info click here](https://core.telegram.org/api/offsets)
     * * `int`          **limit**       - Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)
     *
     * @param array $params Parameters
     * @return messages.Messages
     */
    public function getMessagePublicForwards(array $params): messages;

    /**
     * Get [message statistics](https://core.telegram.org/api/stats).
     *
     * Parameters:
     * * `boolean`      **dark**    - Optional: Whether to enable dark theme for graph colors
     * * `InputChannel` **channel** - Channel ID
     * * `int`          **msg_id**  - Message ID
     *
     * @param array $params Parameters
     * @return stats.MessageStats
     */
    public function getMessageStats(array $params): stats;
}

class InternalDoc extends APIFactory
{
    /**
         * Convert MTProto parameters to bot API parameters.
         *
         * @param array $data Data
     * @return Promise<array>
         */
    public function MTProtoToBotAPI(array $data, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$data, $extra]);
    }
    /**
     * MTProto to TD params.
     *
     * @param mixed $params Params
     */
    public function MTProtoToTd(mixed &$params, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$params, $extra]);
    }
    /**
     * MTProto to TDCLI params.
     *
     * @param mixed $params Params
     */
    public function MTProtoToTdcli(mixed $params, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$params, $extra]);
    }
    /**
     * Accept call.
     *
     * @param array $call Call
     */
    public function acceptCall(array $call, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$call, $extra]);
    }
    /**
     * Accept secret chat.
     *
     * @param array $params Secret chat ID
     */
    public function acceptSecretChat(array $params, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$params, $extra]);
    }
    /**
     * Accept terms of service update.
     */
    public function acceptTos(array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$extra]);
    }
    /**
     * Add user info.
     *
     * @param array $user User info
     * @throws Exception
      */
    public function addUser(array $user, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$user, $extra]);
    }
    /**
     * Call promise $b after promise $a.
     *
     * @param Generator|Promise $a Promise A
     * @param Generator|Promise $b Promise B
     * @psalm-suppress InvalidScope
     */
    public static function after(Generator|Promise $a, Generator|Promise $b): Amp\Future
    {
        return Tools::after($a, $b);
    }
    /**
     * Returns a promise that succeeds when all promises succeed, and fails if any promise fails.
     * Returned promise succeeds with an array of values used to succeed each contained promise, with keys corresponding to the array of promises.
     *
     * @param array<(Generator|Promise)> $promises Promises
     */
    public static function all(array $promises): Amp\Future
    {
        return Tools::all($promises);
    }
    /**
     * Returns a promise that is resolved when all promises are resolved. The returned promise will not fail.
     *
     * @param array<(Promise|Generator)> $promises Promises
     */
    public static function any(array $promises): Amp\Future
    {
        return Tools::any($promises);
    }
    /**
     * Create array.
     *
     * @param mixed ...$params Params
     */
    public static function arr(mixed ...$params): array
    {
        return Tools::arr(...$params);
    }
    /**
     * base64URL decode.
     *
     * @param string $data Data to decode
     */
    public static function base64urlDecode(string $data): string
    {
        return Tools::base64urlDecode($data);
    }
    /**
     * Base64URL encode.
     *
     * @param string $data Data to encode
     */
    public static function base64urlEncode(string $data): string
    {
        return Tools::base64urlEncode($data);
    }
    /**
     * Convert bot API parameters to MTProto parameters.
     *
     * @param array $arguments Arguments
     * @psalm-return array|Promise<array>
     */
    public function botAPIToMTProto(array $arguments)
    {
        return $this->__call(__FUNCTION__, [$arguments]);
    }
    /**
     * Login as bot.
     *
     * @param string $token Bot token
     */
    public function botLogin(string $token, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$token, $extra]);
    }
    /**
     * Convert generator, promise or any other value to a promise.
     *
     * @template TReturn
     * @psalm-param Generator<mixed, mixed, mixed, TReturn>|Promise<TReturn>|TReturn $promise
     * @psalm-return Promise<TReturn>
      */
    public static function call(mixed $promise): Amp\Future
    {
        return Tools::call($promise);
    }
    /**
     * Call promise in background.
     *
     * @param Generator|Promise $promise Promise to resolve
     * @param ?\Generator|Promise $actual  Promise to resolve instead of $promise
     * @param string              $file    File
     * @psalm-suppress InvalidScope
     */
    public static function callFork(Generator|Promise $promise, $actual = null, string $file = ''): mixed
    {
        return Tools::callFork($promise, $actual, $file);
    }
    /**
     * Call promise in background, deferring execution.
     *
     * @param Generator|Promise $promise Promise to resolve
     */
    public static function callForkDefer(Generator|Promise $promise): void
    {
        Tools::callForkDefer($promise);
    }
    /**
     * Get call status.
     *
     * @param int $id Call ID
     * @psalm-return int|Promise<int>
     */
    public function callStatus(int $id)
    {
        return $this->__call(__FUNCTION__, [$id]);
    }
    /**
     * Check for terms of service update.
     *
     * Will throw a \danog\MadelineProto\Exception if a new TOS is available.
     */
    public function checkTos(array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$extra]);
    }
    /**
     * Cleanup memory and session file.
     */
    public function cleanup(array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$extra]);
    }
    /**
     * Close connection with client, connected via web.
     *
     * @param string $message Message
     */
    public static function closeConnection(string $message): void
    {
        Tools::closeConnection($message);
    }
    /**
     * Complete 2FA login.
     *
     * @param string $password Password
     */
    public function complete2faLogin(string $password, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$password, $extra]);
    }
    /**
     * Complete call handshake.
     *
     * @param array $params Params
     */
    public function completeCall(array $params, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$params, $extra]);
    }
    /**
     * Complet user login using login code.
     *
     * @param string $code Login code
     */
    public function completePhoneLogin(string $code, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$code, $extra]);
    }
    /**
     * Complete signup to Telegram.
     *
     * @param string $first_name First name
     * @param string $last_name  Last name
     */
    public function completeSignup(string $first_name, string $last_name = '', array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$first_name, $last_name, $extra]);
    }
    /**
     * Confirm call.
     *
     * @param array $params Params
     */
    public function confirmCall(array $params, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$params, $extra]);
    }
    /**
     * Connects to all datacenters and if necessary creates authorization keys, binds them and writes client info.
     *
     * @param boolean $reconnectAll Whether to reconnect to all DCs
     */
    public function connectToAllDcs(bool $reconnectAll = true, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$reconnectAll, $extra]);
    }
    /**
     * Decline terms of service update.
     *
     * THIS WILL DELETE YOUR ACCOUNT!
     */
    public function declineTos(array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$extra]);
    }
    /**
     * Discard call.
     *
     * @param array   $call       Call
     * @param array   $rating     Rating
     * @param boolean $need_debug Need debug?
     */
    public function discardCall(array $call, array $reason, array $rating = [
    ], bool $need_debug = true, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$call, $reason, $rating, $need_debug, $extra]);
    }
    /**
     * Discard secret chat.
     *
     * @param int $chat Secret chat ID
     */
    public function discardSecretChat(int $chat, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$chat, $extra]);
    }
    /**
     * Download file to browser.
     *
     * Supports HEAD requests and content-ranges for parallel and resumed downloads.
     *
     * @param array|string $messageMedia File to download
     * @param ?callable     $cb           Status callback (can also use FileCallback)
     * @param ?int $size Size of file to download, required for bot API file IDs.
     * @param ?string $mime MIME type of file to download, required for bot API file IDs.
     * @param ?string $name Name of file to download, required for bot API file IDs.
     */
    public function downloadToBrowser(array|string $messageMedia, ?callable $cb = null, ?int $size = null, ?string $name = null, ?string $mime = null, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$messageMedia, $cb, $size, $name, $mime, $extra]);
    }
    /**
     * Download file to callable.
     * The callable must accept two parameters: string $payload, int $offset
     * The callable will be called (possibly out of order, depending on the value of $seekable).
     * The callable should return the number of written bytes.
     *
     * @param mixed                          $messageMedia File to download
     * @param callable|FileCallbackInterface $callable      Chunk callback
     * @param callable                       $cb            Status callback (DEPRECATED, use FileCallbackInterface)
     * @param bool                           $seekable      Whether the callable can be called out of order
     * @param int                            $offset        Offset where to start downloading
     * @param int                            $end           Offset where to stop downloading (inclusive)
     * @param int                            $part_size     Size of each chunk
     * @psalm-return Promise<true>
      */
    public function downloadToCallable(mixed $messageMedia, callable $callable, ?callable $cb = null, bool $seekable = true, int $offset = 0, int $end = -1, ?int $part_size = null, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$messageMedia, $callable, $cb, $seekable, $offset, $end, $part_size, $extra]);
    }
    /**
     * Download file to directory.
     *
     * @param mixed                        $messageMedia File to download
     * @param string|FileCallbackInterface $dir           Directory where to download the file
     * @param callable                     $cb            Callback (DEPRECATED, use FileCallbackInterface)
     * @psalm-return Promise<(false|string)>
      */
    public function downloadToDir(mixed $messageMedia, string|FileCallbackInterface $dir, ?callable $cb = null, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$messageMedia, $dir, $cb, $extra]);
    }
    /**
     * Download file.
     *
     * @param mixed                        $messageMedia File to download
     * @param string|FileCallbackInterface $file          Downloaded file path
     * @param callable                     $cb            Callback (DEPRECATED, use FileCallbackInterface)
     * @return Promise Downloaded file path
     * @psalm-return Promise<(false|string)>
     */
    public function downloadToFile(mixed $messageMedia, string|FileCallbackInterface $file, ?callable $cb = null, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$messageMedia, $file, $cb, $extra]);
    }
    /**
     * Download file to amphp/http-server response.
     *
     * Supports HEAD requests and content-ranges for parallel and resumed downloads.
     *
     * @param array|string  $messageMedia File to download
     * @param ServerRequest $request      Request
     * @param callable      $cb           Status callback (can also use FileCallback)
     * @param ?int          $size         Size of file to download, required for bot API file IDs.
     * @param ?string       $name         Name of file to download, required for bot API file IDs.
     * @param ?string       $mime         MIME type of file to download, required for bot API file IDs.
     * @return Promise Returned response
     * @psalm-return Promise<Response>
     */
    public function downloadToResponse(array|string $messageMedia, Request $request, ?callable $cb = null, ?int $size = null, ?string $mime = null, ?string $name = null, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$messageMedia, $request, $cb, $size, $mime, $name, $extra]);
    }
    /**
     * Download file to stream.
     *
     * @param mixed                       $messageMedia File to download
     * @param mixed|FileCallbackInterface $stream        Stream where to download file
     * @param callable                    $cb            Callback (DEPRECATED, use FileCallbackInterface)
     * @param int                         $offset        Offset where to start downloading
     * @param int                         $end           Offset where to end download
     * @psalm-return Promise<mixed>
      */
    public function downloadToStream(mixed $messageMedia, mixed $stream, ?callable $cb = null, int $offset = 0, int $end = -1, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$messageMedia, $stream, $cb, $offset, $end, $extra]);
    }
    /**
     * Asynchronously write to stdout/browser.
     *
     * @param string $string Message to echo
     */
    public static function echo(string $string): Amp\Future
    {
        return Tools::echo($string);
    }
    /**
     * Get final element of array.
     *
     * @param array $what Array
     */
    public static function end(array $what)
    {
        return Tools::end($what);
    }
    /**
     * Export authorization.
     *
     * @psalm-return Promise<array{0: (int|string), 1: string}>
      */
    public function exportAuthorization(array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$extra]);
    }
    /**
     * Extract file info from bot API message.
     *
     * @param array $info Bot API message object
     * @return ?array
     */
    public static function extractBotAPIFile(array $info): ?array
    {
        return MTProto::extractBotAPIFile($info);
    }
    /**
     * Extract a message constructor from an Updates constructor.
     *
     * @psalm-return Promise<array>
      */
    public function extractMessage(array $updates, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$updates, $extra]);
    }
    /**
     * Extract an update message constructor from an Updates constructor.
     *
     * @psalm-return Promise<array>
      */
    public function extractMessageUpdate(array $updates, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$updates, $extra]);
    }
    /**
     * Extract Update constructors from an Updates constructor.
     *
     * @psalm-return Promise<array<array>>
      */
    public function extractUpdates(array $updates, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$updates, $extra]);
    }
    /**
     * Get contents of remote file asynchronously.
     *
     * @param string $url URL
     * @psalm-return Promise<string>
      */
    public function fileGetContents(string $url, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$url, $extra]);
    }
    /**
     * Returns a promise that succeeds when the first promise succeeds, and fails only if all promises fail.
     *
     * @param array<(Promise|Generator)> $promises Promises
     */
    public static function first(array $promises): Amp\Future
    {
        return Tools::first($promises);
    }
    /**
     * Asynchronously lock a file
     * Resolves with a callbable that MUST eventually be called in order to release the lock.
     *
     * @param string    $file      File to lock
     * @param integer   $operation Locking mode
     * @param float     $polling   Polling interval
     * @param ?Promise  $token     Cancellation token
     * @param ?callable $failureCb Failure callback, called only once if the first locking attempt fails.
     * @return \Amp\Future<$token is null ? callable : ?callable>
     */
    public static function flock(string $file, int $operation, float $polling = 0.1, ?Promise $token = null, ?callable $failureCb = null)
    {
        return Tools::flock($file, $operation, $polling, $token, $failureCb);
    }
    /**
     * Convert bot API channel ID to MTProto channel ID.
     *
     * @param int $id Bot API channel ID
     */
    public static function fromSupergroup(int $id): int
    {
        return MTProto::fromSupergroup($id);
    }
    /**
     * When were full info for this chat last cached.
     *
     * @param mixed $id Chat ID
     * @return Promise<integer>
     */
    public function fullChatLastUpdated(mixed $id, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$id, $extra]);
    }
    /**
     * Get info about the logged-in user, not cached.
     *
     * @return Promise<(array|bool)>
     */
    public function fullGetSelf(array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$extra]);
    }
    /**
     * Generate MTProto vector hash.
     *
     * @param array $ints IDs
     * @return string Vector hash
     */
    public static function genVectorHash(array $ints): string
    {
        return Tools::genVectorHash($ints);
    }
    /**
     * Get full list of MTProto and API methods.
     *
      * @psalm-return array|Promise<array>
     */
    public function getAllMethods()
    {
        return $this->__call(__FUNCTION__, []);
    }
    /**
     * Get authorization info.
     *
      * @psalm-return int|Promise<int>
     */
    public function getAuthorization()
    {
        return $this->__call(__FUNCTION__, []);
    }
    /**
     * Get cached server-side config.
     *
      * @psalm-return array|Promise<array>
     */
    public function getCachedConfig()
    {
        return $this->__call(__FUNCTION__, []);
    }
    /**
     * Get call info.
     *
     * @param int $call Call ID
     * @psalm-return array|Promise<array>
     */
    public function getCall(int $call)
    {
        return $this->__call(__FUNCTION__, [$call]);
    }
    /**
     * Store RSA keys for CDN datacenters.
     *
     * @param string $datacenter DC ID
     */
    public function getCdnConfig(string $datacenter, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$datacenter, $extra]);
    }
    /**
     * Get cached (or eventually re-fetch) server-side config.
     *
     * @param array $config  Current config
     * @param array $options Options for method call
     */
    public function getConfig(array $config = [
    ], array $options = [
    ], array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$config, $options, $extra]);
    }
    /**
     * Get async DNS client.
     *
      * @psalm-return Resolver|Promise<Resolver>
     */
    public function getDNSClient()
    {
        return $this->__call(__FUNCTION__, []);
    }
    /**
     * Get all datacenter connections.
     *
     * @psalm-return array<DataCenterConnection>|Promise<array<DataCenterConnection>>
     */
    public function getDataCenterConnections()
    {
        return $this->__call(__FUNCTION__, []);
    }
    /**
     * Get main DC ID.
     *
     */
    public function getDataCenterId(array $extra = []): int|string
    {
        return $this->__call(__FUNCTION__, [$extra]);
    }
    /**
     * Get diffie-hellman configuration.
     *
     * @return Promise<array>
     */
    public function getDhConfig(array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$extra]);
    }
    /**
     * Get dialog peers.
     *
     * @param boolean $force Whether to refetch all dialogs ignoring cache
     * @psalm-return Promise<list<mixed>>
      */
    public function getDialogs(bool $force = true, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$force, $extra]);
    }
    /**
     * Get download info of file
     * Returns an array with the following structure:.
     *
     * `$info['ext']` - The file extension
     * `$info['name']` - The file name, without the extension
     * `$info['mime']` - The file mime type
     * `$info['size']` - The file size
     *
     * @param mixed $messageMedia File ID
     * @return Promise<array>
     */
    public function getDownloadInfo(mixed $messageMedia, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$messageMedia, $extra]);
    }
    /**
     * Get event handler.
     *
      * @psalm-return EventHandler|Promise<EventHandler>
     */
    public function getEventHandler()
    {
        return $this->__call(__FUNCTION__, []);
    }
    /**
     * Get extension from file location.
     *
     * @param mixed  $location File location
     * @param string $default  Default extension
     */
    public static function getExtensionFromLocation(mixed $location, string $default): string
    {
        return Extension::getExtensionFromLocation($location, $default);
    }
    /**
     * Get extension from mime type.
     *
     * @param string $mime MIME type
     */
    public static function getExtensionFromMime(string $mime): string
    {
        return Extension::getExtensionFromMime($mime);
    }
    /**
     * Get info about file.
     *
     * @param mixed $constructor File ID
     * @return Promise<array>
     */
    public function getFileInfo(mixed $constructor, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$constructor, $extra]);
    }
    /**
     * Get folder ID from object.
     *
     * @param mixed $id Object
     */
    public static function getFolderId(mixed $id): ?int
    {
        return MTProto::getFolderId($id);
    }
    /**
     * Get full info of all dialogs.
     *
     * @param boolean $force Whether to refetch all dialogs ignoring cache
     */
    public function getFullDialogs(bool $force = true, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$force, $extra]);
    }
    /**
     * Get full info about peer, returns an FullInfo object.
     *
     * @param mixed $id Peer
     * @see https://docs.madelineproto.xyz/FullInfo.html
     * @return Promise FullInfo object
     * @psalm-return Promise<array>
     */
    public function getFullInfo(mixed $id, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$id, $extra]);
    }
    /**
     * Get async HTTP client.
     *
      * @psalm-return HttpClient|Promise<HttpClient>
     */
    public function getHTTPClient()
    {
        return $this->__call(__FUNCTION__, []);
    }
    /**
     * Get current password hint.
     *
      * @psalm-return string|Promise<string>
     */
    public function getHint()
    {
        return $this->__call(__FUNCTION__, []);
    }
    /**
     * Get bot API ID from peer object.
     *
     * @param mixed $id Peer
      * @psalm-return ??int|\Amp\Future<??int>
     */
    public function getId(mixed $id)
    {
        return $this->__call(__FUNCTION__, [$id]);
    }
    /**
     * Get info about peer, returns an Info object.
     *
     * @param mixed                $id        Peer
     * @param MTProto::INFO_TYPE_* $type      Whether to generate an Input*, an InputPeer or the full set of constructors
     * @see https://docs.madelineproto.xyz/Info.html
     * @return Promise Info object
     * @template TConstructor
     * @psalm-param array{_: TConstructor}|mixed $id
     * @return Future<(array<(Future<(mixed|string)>|mixed|string)>|int|mixed|string)>
     * @psalm-return \Generator<int|mixed, \Amp\Future|\Amp\Future<string>|array, mixed, array{
     *      TConstructor: array
     *      InputPeer: array{_: string, user_id?: mixed, access_hash?: mixed, min?: mixed, chat_id?: mixed, channel_id?: mixed},
     *      Peer: array{_: string, user_id?: mixed, chat_id?: mixed, channel_id?: mixed},
     *      DialogPeer: array{_: string, peer: array{_: string, user_id?: mixed, chat_id?: mixed, channel_id?: mixed}},
     *      NotifyPeer: array{_: string, peer: array{_: string, user_id?: mixed, chat_id?: mixed, channel_id?: mixed}},
     *      InputDialogPeer: array{_: string, peer: array{_: string, user_id?: mixed, access_hash?: mixed, min?: mixed, chat_id?: mixed, channel_id?: mixed}},
     *      InputNotifyPeer: array{_: string, peer: array{_: string, user_id?: mixed, access_hash?: mixed, min?: mixed, chat_id?: mixed, channel_id?: mixed}},
     *      bot_api_id: int|string,
     *      user_id?: int,
     *      chat_id?: int,
     *      channel_id?: int,
     *      InputUser?: array{_: string, user_id?: int, access_hash?: mixed, min?: bool},
     *      InputChannel?: array{_: string, channel_id: int, access_hash: mixed, min: bool},
     *      type: string
     * }>|int|array{_: string, user_id?: mixed, access_hash?: mixed, min?: mixed, chat_id?: mixed, channel_id?: mixed}|array{_: string, user_id?: int, access_hash?: mixed, min?: bool}|array{_: string, channel_id: int, access_hash: mixed, min: bool}
     */
    public function getInfo(mixed $id, int $type = MTProto::INFO_TYPE_ALL, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$id, $type, $extra]);
    }
    /**
     * Get logger.
     *
     * @psalm-return Logger|Promise<Logger>
     */
    public function getLogger()
    {
        return $this->__call(__FUNCTION__, []);
    }
    /**
     * Get TL namespaces.
     *
      * @psalm-return array|Promise<array>
     */
    public function getMethodNamespaces()
    {
        return $this->__call(__FUNCTION__, []);
    }
    /**
     * Get namespaced methods (method => namespace).
     *
      * @psalm-return array|Promise<array>
     */
    public function getMethodsNamespaced()
    {
        return $this->__call(__FUNCTION__, []);
    }
    /**
     * Get mime type from buffer.
     *
     * @param string $buffer Buffer
     */
    public static function getMimeFromBuffer(string $buffer): string
    {
        return Extension::getMimeFromBuffer($buffer);
    }
    /**
     * Get mime type from file extension.
     *
     * @param string $extension File extension
     * @param string $default   Default mime type
     */
    public static function getMimeFromExtension(string $extension, string $default): string
    {
        return Extension::getMimeFromExtension($extension, $default);
    }
    /**
     * Get mime type of file.
     *
     * @param string $file File
     */
    public static function getMimeFromFile(string $file): string
    {
        return Extension::getMimeFromFile($file);
    }
    /**
     * Get download info of the propic of a user
     * Returns an array with the following structure:.
     *
     * `$info['ext']` - The file extension
     * `$info['name']` - The file name, without the extension
     * `$info['mime']` - The file mime type
     * `$info['size']` - The file size
     *
     * @return Promise<array>
     */
    public function getPropicInfo($data, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$data, $extra]);
    }
    /**
     * Get PSR logger.
     *
     * @psalm-return LoggerInterface|Promise<LoggerInterface>
     */
    public function getPsrLogger()
    {
        return $this->__call(__FUNCTION__, []);
    }
    /**
     * Get full info about peer (including full list of channel members), returns a Chat object.
     *
     * @param mixed $id Peer
     * @see https://docs.madelineproto.xyz/Chat.html
     * @return Promise Chat object
     */
    public function getPwrChat(mixed $id, bool $fullfetch = true, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$id, $fullfetch, $extra]);
    }
    /**
     * Get secret chat.
     *
     * @param array|int $chat Secret chat ID
     * @psalm-return array|Promise<array>
     */
    public function getSecretChat(array|int $chat)
    {
        return $this->__call(__FUNCTION__, [$chat]);
    }
    /**
     * Get info about the logged-in user, cached.
     *
     * Use fullGetSelf to bypass the cache.
     *
      * @psalm-return array|false|Promise<(array|false)>
     */
    public function getSelf()
    {
        return $this->__call(__FUNCTION__, []);
    }
    /**
     * Return current settings.
     *
      * @psalm-return Settings|Promise<Settings>
     */
    public function getSettings()
    {
        return $this->__call(__FUNCTION__, []);
    }
    /**
     * Get sponsored messages for channel.
     * This method will return an array of [sponsored message objects](https://docs.madelineproto.xyz/API_docs/constructors/sponsoredMessage.html).
     *
     * See [the API documentation](https://core.telegram.org/api/sponsored-messages) for more info on how to handle sponsored messages.
     *
     * @param int|array $peer Channel ID, or Update, or Message, or Peer.
      */
    public function getSponsoredMessages(int|array $peer, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$peer, $extra]);
    }
    /**
     * Get TL serializer.
     *
      * @psalm-return TL|Promise<TL>
     */
    public function getTL()
    {
        return $this->__call(__FUNCTION__, []);
    }
    /**
     * Accesses a private variable from an object.
     *
     * @param object $obj Object
     * @param string $var Attribute name
     * @psalm-suppress InvalidScope
     * @access public
     */
    public static function getVar(object $obj, string $var)
    {
        return Tools::getVar($obj, $var);
    }
    /**
     * Get a message to show to the user when starting the bot.
     *
      * @psalm-return string|Promise<string>
     */
    public function getWebMessage(string $message)
    {
        return $this->__call(__FUNCTION__, [$message]);
    }
    /**
     * Get web template.
     *
      * @psalm-return string|Promise<string>
     */
    public function getWebTemplate()
    {
        return $this->__call(__FUNCTION__, []);
    }
    /**
     * Checks whether all datacenters are authorized.
     *
     * @psalm-return bool|Promise<bool>
     */
    public function hasAllAuth()
    {
        return $this->__call(__FUNCTION__, []);
    }
    /**
     * Check if an event handler instance is present.
     *
     * @psalm-return bool|Promise<bool>
     */
    public function hasEventHandler()
    {
        return $this->__call(__FUNCTION__, []);
    }
    /**
     * Check if has report peers.
     *
     * @psalm-return bool|Promise<bool>
     */
    public function hasReportPeers()
    {
        return $this->__call(__FUNCTION__, []);
    }
    /**
     * Check whether secret chat exists.
     *
     * @param array|int $chat Secret chat ID
     * @psalm-return bool|Promise<bool>
     */
    public function hasSecretChat(array|int $chat)
    {
        return $this->__call(__FUNCTION__, [$chat]);
    }
    /**
     * Checks private property exists in an object.
     *
     * @param object $obj Object
     * @param string $var Attribute name
     * @psalm-suppress InvalidScope
     * @access public
     */
    public static function hasVar(object $obj, string $var): bool
    {
        return Tools::hasVar($obj, $var);
    }
    /**
     * Import authorization.
     *
     * @param array<int, string> $authorization Authorization info
     * @param int $mainDcID Main DC ID
     */
    public function importAuthorization(array $authorization, int $mainDcID, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$authorization, $mainDcID, $extra]);
    }
    /**
     * Inflate stripped photosize to full JPG payload.
     *
     * @param string $stripped Stripped photosize
     * @return string JPG payload
     */
    public static function inflateStripped(string $stripped): string
    {
        return Tools::inflateStripped($stripped);
    }
    /**
     * Initialize self-restart hack.
     *
      * @psalm-return void|Promise<void>
     */
    public function initSelfRestart(): void
    {
        $this->__call(__FUNCTION__, []);
    }
    /**
     * Whether this is altervista.
     */
    public static function isAltervista(): bool
    {
        return Tools::isAltervista();
    }
    /**
     * Check if is array or similar (traversable && countable && arrayAccess).
     *
     * @param mixed $var Value to check
     */
    public static function isArrayOrAlike(mixed $var): bool
    {
        return Tools::isArrayOrAlike($var);
    }
    /**
     * Whether we're an IPC client instance.
     *
     * @psalm-return bool|Promise<bool>
     */
    public function isIpc()
    {
        return $this->__call(__FUNCTION__, []);
    }
    /**
     * Whether we're an IPC server process (as opposed to an event handler).
     *
     * @psalm-return bool|Promise<bool>
     */
    public function isIpcWorker()
    {
        return $this->__call(__FUNCTION__, []);
    }
    /**
     * Returns whether the current user is a premium user, cached.
     *
     * @psalm-return bool|Promise<bool>
     */
    public function isPremium()
    {
        return $this->__call(__FUNCTION__, []);
    }
    /**
     * Check whether provided bot API ID is a channel.
     *
     * @param int $id Bot API ID
     */
    public static function isSupergroup(int $id): bool
    {
        return MTProto::isSupergroup($id);
    }
    /**
     * Logger.
     *
     * @param string $param Parameter
     * @param int    $level Logging level
     * @param string $file  File where the message originated
     * @psalm-return void|Promise<void>
     */
    public function logger(string $param, int $level = Logger::NOTICE, string $file = ''): void
    {
        $this->__call(__FUNCTION__, [$param, $level, $file]);
    }
    /**
     * Log out currently logged in user.
     */
    public function logout(array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$extra]);
    }
    /**
     * Start MadelineProto's update handling loop, or run the provided async callable.
     *
     * @param callable|null $callback Async callable to run
     */
    public function loop(?callable $callback = null, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$callback, $extra]);
    }
    /**
     * Start MadelineProto's update handling loop in background.
     */
    public function loopFork(array $extra = []): Amp\Future
    {
        return $this->__call(__FUNCTION__, [$extra]);
    }
    /**
     * Escape string for markdown.
     *
     * @param string $hwat String to escape
     */
    public static function markdownEscape(string $hwat): string
    {
        return StrTools::markdownEscape($hwat);
    }
    /**
     * Telegram UTF-8 multibyte split.
     *
     * @param string  $text   Text
     * @param integer $length Length
     * @return array<string>
     */
    public static function mbStrSplit(string $text, int $length): array
    {
        return StrTools::mbStrSplit($text, $length);
    }
    /**
     * Get Telegram UTF-8 length of string.
     *
     * @param string $text Text
     */
    public static function mbStrlen(string $text): float|int
    {
        return StrTools::mbStrlen($text);
    }
    /**
     * Telegram UTF-8 multibyte substring.
     *
     * @param string  $text   Text to substring
     * @param integer $offset Offset
     * @param ?int    $length Length
     */
    public static function mbSubstr(string $text, int $offset, ?int $length = null): string
    {
        return StrTools::mbSubstr($text, $offset, $length);
    }
    /**
     * Call method and wait asynchronously for response.
     *
     * If the $aargs['noResponse'] is true, will not wait for a response.
     *
     * @param string            $method Method name
     * @param array|Generator $args Arguments
     * @param array             $aargs  Additional arguments
     * @psalm-param array|Generator<mixed, mixed, mixed, array> $args
     */
    public function methodCall(string $method, array|Generator $args = [
    ], array $aargs = [
      'msg_id' => null,
    ], array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$method, $args, $aargs, $extra]);
    }
    /**
     * Call method and make sure it is asynchronously sent.
     *
     * @param string            $method Method name
     * @param array|Generator $args Arguments
     * @param array             $aargs  Additional arguments
     * @psalm-param array|Generator<mixed, mixed, mixed, array> $args
     */
    public function methodCallWrite(string $method, array|Generator $args = [
    ], array $aargs = [
      'msg_id' => null,
    ], array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$method, $args, $aargs, $extra]);
    }
    /**
     * Escape method name.
     *
     * @param string $method Method name
     */
    public static function methodEscape(string $method): string
    {
        return StrTools::methodEscape($method);
    }
    /**
     * Convert double to binary version.
     *
     * @param float $value Value to convert
     */
    public static function packDouble(float $value): string
    {
        return Tools::packDouble($value);
    }
    /**
     * Convert integer to base256 signed int.
     *
     * @param integer $value Value to convert
     */
    public static function packSignedInt(int $value): string
    {
        return Tools::packSignedInt($value);
    }
    /**
     * Convert integer to base256 long.
     *
     * @param int $value Value to convert
     */
    public static function packSignedLong(int $value): string
    {
        return Tools::packSignedLong($value);
    }
    /**
     * Convert value to unsigned base256 int.
     *
     * @param int $value Value
     */
    public static function packUnsignedInt(int $value): string
    {
        return Tools::packUnsignedInt($value);
    }
    /**
     * Check if peer is present in internal peer database.
     *
     * @param mixed $id Peer
     * @psalm-return Promise<bool>
      */
    public function peerIsset(mixed $id, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$id, $extra]);
    }
    /**
     * Login as user.
     *
     * @param string  $number   Phone number
     * @param integer $sms_type SMS type
     */
    public function phoneLogin(string $number, int $sms_type = 5, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$number, $sms_type, $extra]);
    }
    /**
     * Positive modulo
     * Works just like the % (modulus) operator, only returns always a postive number.
     *
     * @param int $a A
     * @param int $b B
     * @return int Modulo
     */
    public static function posmod(int $a, int $b): int
    {
        return Tools::posmod($a, $b);
    }
    /**
     * Get random string of specified length.
     *
     * @param integer $length Length
     * @return string Random string
     */
    public static function random(int $length): string
    {
        return Tools::random($length);
    }
    /**
     * Get random integer.
     *
     * @param integer $modulus Modulus
     */
    public static function randomInt(int $modulus = 0): int
    {
        return Tools::randomInt($modulus);
    }
    /**
     * Asynchronously read line.
     *
     * @param string $prompt Prompt
     * @return Promise<string>
     */
    public static function readLine(string $prompt = ''): Future
    {
        return Tools::readLine($prompt);
    }
    /**
     * Refresh full peer cache for a certain peer.
     *
     * @param mixed $id The peer to refresh
      */
    public function refreshFullPeerCache(mixed $id, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$id, $extra]);
    }
    /**
     * Refresh peer cache for a certain peer.
     *
     * @param mixed $id The peer to refresh
      */
    public function refreshPeerCache(mixed $id, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$id, $extra]);
    }
    /**
     * Rekey secret chat.
     *
     * @param int $chat Secret chat to rekey
     */
    public function rekey(int $chat, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$chat, $extra]);
    }
    /**
     * Report an error to the previously set peer.
     *
     * @param string $message   Error to report
     * @param string $parseMode Parse mode
     */
    public function report(string $message, string $parseMode = '', array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$message, $parseMode, $extra]);
    }
    /**
     * Request VoIP call.
     *
     * @param mixed $user User
     */
    public function requestCall(mixed $user, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$user, $extra]);
    }
    /**
     * Request secret chat.
     *
     * @param mixed $user User to start secret chat with
     */
    public function requestSecretChat(mixed $user, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$user, $extra]);
    }
    /**
     * Reset the update state and fetch all updates from the beginning.
     *
      * @psalm-return void|Promise<void>
     */
    public function resetUpdateState(): void
    {
        $this->__call(__FUNCTION__, []);
    }
    /**
     * Restart update loop.
     *
      * @psalm-return void|Promise<void>
     */
    public function restart(): void
    {
        $this->__call(__FUNCTION__, []);
    }
    /**
     * Rethrow error catched in strand.
     *
     * @param Throwable $e Exception
     * @param string     $file File where the strand started
     * @psalm-suppress InvalidScope
     */
    public static function rethrow(Throwable $e, string $file = ''): void
    {
        Tools::rethrow($e, $file);
    }
    /**
     * null-byte RLE decode.
     *
     * @param string $string Data to decode
     */
    public static function rleDecode(string $string): string
    {
        return Tools::rleDecode($string);
    }
    /**
     * null-byte RLE encode.
     *
     * @param string $string Data to encode
     */
    public static function rleEncode(string $string): string
    {
        return Tools::rleEncode($string);
    }
    /**
     * Get secret chat status.
     *
     * @param int $chat Chat ID
     * @psalm-return int|Promise<int>
     */
    public function secretChatStatus(int $chat)
    {
        return $this->__call(__FUNCTION__, [$chat]);
    }
    /**
     * Serialize all instances.
     *
     * CALLED ONLY ON SHUTDOWN.
     */
    public static function serializeAll(): void
    {
        MTProto::serializeAll();
    }
    /**
     * Set update handling callback.
     *
     * @param callable $callback Callback
     * @psalm-return void|Promise<void>
     */
    public function setCallback(callable $callback): void
    {
        $this->__call(__FUNCTION__, [$callback]);
    }
    /**
     * Set event handler.
     *
     * @param class-string<EventHandler> $eventHandler Event handler
     */
    public function setEventHandler(string $eventHandler, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$eventHandler, $extra]);
    }
    /**
     * Set NOOP update handler, ignoring all updates.
     *
      * @psalm-return void|Promise<void>
     */
    public function setNoop(): void
    {
        $this->__call(__FUNCTION__, []);
    }
    /**
     * Set peer(s) where to send errors occurred in the event loop.
     *
     * @param int|string $userOrId Username(s) or peer ID(s)
     */
    public function setReportPeers(int|string $userOrId, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$userOrId, $extra]);
    }
    /**
     * Sets a private variable in an object.
     *
     * @param object $obj Object
     * @param string $var Attribute name
     * @param mixed  $val Attribute value
     * @psalm-suppress InvalidScope
     * @access public
     */
    public static function setVar(object $obj, string $var, mixed &$val): void
    {
        Tools::setVar($obj, $var, $val);
    }
    /**
     * Set web template.
     *
     * @param string $template Template
     * @psalm-return void|Promise<void>
     */
    public function setWebTemplate(string $template): void
    {
        $this->__call(__FUNCTION__, [$template]);
    }
    /**
     * Set webhook update handler.
     *
     * @param string $hook_url Webhook URL
     * @param string $pem_path PEM path for self-signed certificate
     * @psalm-return void|Promise<void>
     */
    public function setWebhook(string $hook_url, string $pem_path = ''): void
    {
        $this->__call(__FUNCTION__, [$hook_url, $pem_path]);
    }
    /**
     * Setup logger.
     *
      * @psalm-return void|Promise<void>
     */
    public function setupLogger(): void
    {
        $this->__call(__FUNCTION__, []);
    }
    /**
     * Asynchronously sleep.
     *
     * @param int|float $time Number of seconds to sleep for
     */
    public static function sleep(int|float $time): Amp\Future
    {
        return Tools::sleep($time);
    }
    /**
     * Resolves with a two-item array delineating successful and failed Promise results.
     * The returned promise will only fail if the given number of required promises fail.
     *
     * @param array<(Promise|Generator)> $promises Promises
     */
    public static function some(array $promises): Amp\Future
    {
        return Tools::some($promises);
    }
    /**
     * Log in to telegram (via CLI or web).
     */
    public function start(array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$extra]);
    }
    /**
     * Stop update loop.
     *
      * @psalm-return void|Promise<void>
     */
    public function stop(): void
    {
        $this->__call(__FUNCTION__, []);
    }
    /**
     * Convert TD to MTProto parameters.
     *
     * @param array $params Parameters
     * @return Promise<array>
     */
    public function tdToMTProto(array $params, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$params, $extra]);
    }
    /**
     * Convert TD parameters to tdcli.
     *
     * @param mixed $params Parameters
     */
    public function tdToTdcli(mixed $params, array $extra = [])
    {
        return $this->__call(__FUNCTION__, [$params, $extra]);
    }
    /**
     * Convert tdcli parameters to tdcli.
     *
     * @param array $params Params
     * @param array $key    Key
     * @psalm-return array|Promise<array>
     */
    public function tdcliToTd(array &$params, ?array $key = null)
    {
        return $this->__call(__FUNCTION__, [$params, $key]);
    }
    /**
     * Create an artificial timeout for any \Generator or Promise.
     *
     */
    public static function timeout(Generator|Promise $promise, int $timeout): Amp\Future
    {
        return Tools::timeout($promise, $timeout);
    }
    /**
     * Creates an artificial timeout for any `Promise`.
     *
     * If the promise is resolved before the timeout expires, the result is returned
     *
     * If the timeout expires before the promise is resolved, a default value is returned
     *
     * @template TReturnAlt
     * @template TReturn
     * @template TGenerator of Generator<mixed, mixed, mixed, TReturn>
     * @param Promise|Generator $promise Promise to which the timeout is applied.
     * @param int               $timeout Timeout in milliseconds.
     * @psalm-param Promise<TReturn>|TGenerator $promise Promise to which the timeout is applied.
     * @psalm-param TReturnAlt $default
     * @return Promise<TReturn>|Promise<TReturnAlt>
     * @throws TypeError If $promise is not an instance of \Amp\Future, \Generator or \React\Promise\PromiseInterface.
     */
    public static function timeoutWithDefault(Promise|Generator $promise, int $timeout, $default = null): Future
    {
        return Tools::timeoutWithDefault($promise, $timeout, $default);
    }
    /**
     * Convert to camelCase.
     *
     * @param string $input String
     */
    public static function toCamelCase(string $input): string
    {
        return StrTools::toCamelCase($input);
    }
    /**
     * Convert to snake_case.
     *
     * @param string $input String
     */
    public static function toSnakeCase(string $input): string
    {
        return StrTools::toSnakeCase($input);
    }
    /**
     * Convert MTProto channel ID to bot API channel ID.
     *
     * @param int $id MTProto channel ID
     */
    public static function toSupergroup(int $id): int
    {
        return MTProto::toSupergroup($id);
    }
    /**
     * Escape type name.
     *
     * @param string $type String to escape
     */
    public static function typeEscape(string $type): string
    {
        return StrTools::typeEscape($type);
    }
    /**
     * Unpack binary double.
     *
     * @param string $value Value to unpack
     */
    public static function unpackDouble(string $value): float
    {
        return Tools::unpackDouble($value);
    }
    /**
     * Unpack bot API file ID.
     *
     * @param string $fileId Bot API file ID
     * @psalm-return array|Promise<array>
     */
    public function unpackFileId(string $fileId)
    {
        return $this->__call(__FUNCTION__, [$fileId]);
    }
    /**
     * Unpack base256 signed int.
     *
     * @param string $value base256 int
     */
    public static function unpackSignedInt(string $value): int
    {
        return Tools::unpackSignedInt($value);
    }
    /**
     * Unpack base256 signed long.
     *
     * @param string $value base256 long
     */
    public static function unpackSignedLong(string $value): int
    {
        return Tools::unpackSignedLong($value);
    }
    /**
     * Unpack base256 signed long to string.
     *
     * @param string|int|array $value base256 long
     */
    public static function unpackSignedLongString(string|int|array $value): string
    {
        return Tools::unpackSignedLongString($value);
    }
    /**
     * Unset event handler.
     *
     * @param bool $disableUpdateHandling Whether to also disable internal update handling (will cause errors, otherwise will simply use the NOOP handler)
     * @psalm-return void|Promise<void>
     */
    public function unsetEventHandler(bool $disableUpdateHandling = false): void
    {
        $this->__call(__FUNCTION__, [$disableUpdateHandling]);
    }
    /**
     * Update the 2FA password.
     *
     * The params array can contain password, new_password, email and hint params.
     *
     * @param array $params The params
     */
    public function update2fa(array $params, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$params, $extra]);
    }
    /**
     * Parse, update and store settings.
     *
     * @param SettingsAbstract $settings Settings
     */
    public function updateSettings(SettingsAbstract $settings, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$settings, $extra]);
    }
    /**
     * Upload file.
     *
     * @param FileCallbackInterface|string|array $file      File, URL or Telegram file to upload
     * @param string                             $fileName  File name
     * @param callable                           $cb        Callback (DEPRECATED, use FileCallbackInterface)
     * @param boolean                            $encrypted Whether to encrypt file for secret chats
     * @psalm-return Promise<mixed>
      */
    public function upload(FileCallbackInterface|string|array $file, string $fileName = '', ?callable $cb = null, bool $encrypted = false, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$file, $fileName, $cb, $encrypted, $extra]);
    }
    /**
     * Upload file to secret chat.
     *
     * @param FileCallbackInterface|string|array $file      File, URL or Telegram file to upload
     * @param string                             $fileName  File name
     * @param callable                           $cb        Callback (DEPRECATED, use FileCallbackInterface)
     * @psalm-return Promise<mixed>
      */
    public function uploadEncrypted(FileCallbackInterface|string|array $file, string $fileName = '', ?callable $cb = null, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$file, $fileName, $cb, $extra]);
    }
    /**
     * Upload file from callable.
     *
     * The callable must accept two parameters: int $offset, int $size
     * The callable must return a string with the contest of the file at the specified offset and size.
     *
     * @param mixed    $callable  Callable
     * @param integer  $size      File size
     * @param string   $mime      Mime type
     * @param string   $fileName  File name
     * @param callable $cb        Callback (DEPRECATED, use FileCallbackInterface)
     * @param boolean  $seekable  Whether chunks can be fetched out of order
     * @param boolean  $encrypted Whether to encrypt file for secret chats
     * @psalm-return Promise<array{_: string, id: string, parts: int, name: string, mime_type: string, key_fingerprint?: mixed, key?: mixed, iv?: mixed, md5_checksum: string}>
      */
    public function uploadFromCallable(callable $callable, int $size, string $mime, string $fileName = '', ?callable $cb = null, bool $seekable = true, bool $encrypted = false, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$callable, $size, $mime, $fileName, $cb, $seekable, $encrypted, $extra]);
    }
    /**
     * Upload file from stream.
     *
     * @param mixed    $stream    PHP resource or AMPHP async stream
     * @param integer  $size      File size
     * @param string   $mime      Mime type
     * @param string   $fileName  File name
     * @param callable $cb        Callback (DEPRECATED, use FileCallbackInterface)
     * @param boolean  $encrypted Whether to encrypt file for secret chats
     * @psalm-return Promise<mixed>
      */
    public function uploadFromStream(mixed $stream, int $size, string $mime, string $fileName = '', ?callable $cb = null, bool $encrypted = false, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$stream, $size, $mime, $fileName, $cb, $encrypted, $extra]);
    }
    /**
     * Reupload telegram file.
     *
     * @param mixed    $media     Telegram file
     * @param callable $cb        Callback (DEPRECATED, use FileCallbackInterface)
     * @param boolean  $encrypted Whether to encrypt file for secret chats
     * @psalm-return Promise<mixed>
      */
    public function uploadFromTgfile(mixed $media, ?callable $cb = null, bool $encrypted = false, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$media, $cb, $encrypted, $extra]);
    }
    /**
     * Upload file from URL.
     *
     * @param string|FileCallbackInterface $url       URL of file
     * @param integer                      $size      Size of file
     * @param string                       $fileName  File name
     * @param callable                     $cb        Callback (DEPRECATED, use FileCallbackInterface)
     * @param boolean                      $encrypted Whether to encrypt file for secret chats
     * @psalm-return Promise<mixed>
      */
    public function uploadFromUrl(string|FileCallbackInterface $url, int $size = 0, string $fileName = '', ?callable $cb = null, bool $encrypted = false, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$url, $size, $fileName, $cb, $encrypted, $extra]);
    }
    /**
     * Mark sponsored message as read.
     *
     * @param int|array $peer Channel ID, or Update, or Message, or Peer.
     * @param string|array{random_id: string} $message Random ID or sponsored message to mark as read.
     * @return Promise Bool
     */
    public function viewSponsoredMessage(int|array $peer, string|array $message, array $extra = []): Future
    {
        return $this->__call(__FUNCTION__, [$peer, $message, $extra]);
    }
    /**
     * Synchronously wait for a promise|generator.
     *
     * @param Generator|Promise $promise The promise to wait for
     * @param boolean            $ignoreSignal Whether to ignore shutdown signals
     */
    public static function wait(Generator|Promise $promise, bool $ignoreSignal = false)
    {
        return Tools::wait($promise, $ignoreSignal);
    }
}
