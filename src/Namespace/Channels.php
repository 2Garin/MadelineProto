<?php
/**
 * This file is automatic generated by build_docs.php file
 * and is used only for autocomplete in multiple IDE
 * don't modify manually.
 */

namespace danog\MadelineProto\Namespace;

interface Channels
{
    /**
     * Mark [channel/supergroup](https://core.telegram.org/api/channel) history as read
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel [Channel/supergroup](https://core.telegram.org/api/channel) @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param int $max_id ID of message up to which messages should be marked as read
     * 
     *
     * @return bool 
     */
    public function readHistory(array $channel, int $max_id = 0): bool;

    /**
     * Delete messages in a [channel/supergroup](https://core.telegram.org/api/channel)
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel [Channel/supergroup](https://core.telegram.org/api/channel) @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param list<int>|array<never, never> $id IDs of messages to delete
     * 
     *
     * @return array{_: 'messages.affectedMessages', pts: int, pts_count: int} @see https://docs.madelineproto.xyz/API_docs/types/messages.AffectedMessages.html
     */
    public function deleteMessages(array $channel, array $id = []): array;

    /**
     * Reports some messages from a user in a supergroup as spam; requires administrator rights in the supergroup
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel Supergroup @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}|array{_: 'inputPeerUserFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, user_id?: int}|array{_: 'inputPeerChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $participant Participant whose messages should be reported @see https://docs.madelineproto.xyz/API_docs/types/InputPeer.html
     * 
     *
     * @param list<int>|array<never, never> $id IDs of spam messages
     * 
     *
     * @return bool 
     */
    public function reportSpam(array $channel, array $participant, array $id = []): bool;

    /**
     * Get the participants of a [supergroup/channel](https://core.telegram.org/api/channel)
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel Channel @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param array{_: 'channelParticipantsRecent'}|array{_: 'channelParticipantsAdmins'}|array{_: 'channelParticipantsKicked', q?: string}|array{_: 'channelParticipantsBots'}|array{_: 'channelParticipantsBanned', q?: string}|array{_: 'channelParticipantsSearch', q?: string}|array{_: 'channelParticipantsContacts', q?: string}|array{_: 'channelParticipantsMentions', q?: string, top_msg_id?: int} $filter Which participant types to fetch @see https://docs.madelineproto.xyz/API_docs/types/ChannelParticipantsFilter.html
     * 
     *
     * @param int $offset [Offset](https://core.telegram.org/api/offsets)
     * 
     *
     * @param int $limit [Limit](https://core.telegram.org/api/offsets)
     * 
     *
     * @param list<int>|array<never, never> $hash [Hash](https://core.telegram.org/api/offsets)
     * 
     *
     * @return array{_: 'channels.channelParticipants', count: int, participants: list<array{_: 'channelParticipant', user_id: int, date: int}|array{_: 'channelParticipantSelf', via_request: bool, user_id: int, inviter_id: int, date: int}|array{_: 'channelParticipantCreator', admin_rights: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, user_id: int, rank: string}|array{_: 'channelParticipantAdmin', admin_rights: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, can_edit: bool, self: bool, user_id: int, inviter_id: int, promoted_by: int, date: int, rank: string}|array{_: 'channelParticipantBanned', peer: array{_: 'peerUser', user_id: int}|array{_: 'peerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}}|array{_: 'peerChannel', channel_id: int}, banned_rights: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, left: bool, kicked_by: int, date: int}|array{_: 'channelParticipantLeft', peer: array{_: 'peerUser', user_id: int}|array{_: 'peerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}}|array{_: 'peerChannel', channel_id: int}}>, chats: list<array{_: 'chatEmpty', id: int}|array{_: 'chat', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, deactivated: bool, call_active: bool, call_not_empty: bool, noforwards: bool, id: int, title: string, participants_count: int, date: int, version: int, migrated_to?: array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id: int, access_hash: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}, msg_id: int, channel_id: int}, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}}|array{_: 'chatForbidden', id: int, title: string}|array{_: 'channel', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, broadcast: bool, verified: bool, megagroup: bool, restricted: bool, signatures: bool, min: bool, scam: bool, has_link: bool, has_geo: bool, slowmode_enabled: bool, call_active: bool, call_not_empty: bool, fake: bool, gigagroup: bool, noforwards: bool, join_to_send: bool, join_request: bool, forum: bool, id: int, access_hash: int, title: string, username: string, date: int, restriction_reason: list<array{_: 'restrictionReason', platform: string, reason: string, text: string}>, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, participants_count: int, usernames: list<array{_: 'username', editable: bool, active: bool, username: string}>}|array{_: 'channelForbidden', broadcast: bool, megagroup: bool, id: int, access_hash: int, title: string, until_date: int}>, users: list<array{_: 'userEmpty', id: int}|array{_: 'user', self: bool, contact: bool, mutual_contact: bool, deleted: bool, bot: bool, bot_chat_history: bool, bot_nochats: bool, verified: bool, restricted: bool, min: bool, bot_inline_geo: bool, support: bool, scam: bool, apply_min_photo: bool, fake: bool, bot_attach_menu: bool, premium: bool, attach_menu_enabled: bool, id: int, access_hash: int, first_name: string, last_name: string, username: string, phone: string, photo?: array{_: 'userProfilePhotoEmpty'}|array{_: 'userProfilePhoto', has_video: bool, personal: bool, photo_id: int, stripped_thumb: string, dc_id: int}, status?: array{_: 'userStatusEmpty'}|array{_: 'userStatusOnline', expires: int}|array{_: 'userStatusOffline', was_online: int}|array{_: 'userStatusRecently'}|array{_: 'userStatusLastWeek'}|array{_: 'userStatusLastMonth'}, bot_info_version: int, restriction_reason: list<array{_: 'restrictionReason', platform: string, reason: string, text: string}>, bot_inline_placeholder: string, lang_code: string, emoji_status?: array{_: 'emojiStatusEmpty'}|array{_: 'emojiStatus', document_id: int}|array{_: 'emojiStatusUntil', document_id: int, until: int}, usernames: list<array{_: 'username', editable: bool, active: bool, username: string}>}>}|array{_: 'channels.channelParticipantsNotModified'} @see https://docs.madelineproto.xyz/API_docs/types/channels.ChannelParticipants.html
     */
    public function getParticipants(array $channel, array $filter, int $offset = 0, int $limit = 0, array $hash = []): array;

    /**
     * Get info about a [channel/supergroup](https://core.telegram.org/api/channel) participant
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel Channel/supergroup @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}|array{_: 'inputPeerUserFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, user_id?: int}|array{_: 'inputPeerChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $participant Participant to get info about @see https://docs.madelineproto.xyz/API_docs/types/InputPeer.html
     * 
     *
     * @return array{_: 'channels.channelParticipant', participant: array{_: 'channelParticipant', user_id: int, date: int}|array{_: 'channelParticipantSelf', via_request: bool, user_id: int, inviter_id: int, date: int}|array{_: 'channelParticipantCreator', admin_rights: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, user_id: int, rank: string}|array{_: 'channelParticipantAdmin', admin_rights: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, can_edit: bool, self: bool, user_id: int, inviter_id: int, promoted_by: int, date: int, rank: string}|array{_: 'channelParticipantBanned', peer: array{_: 'peerUser', user_id: int}|array{_: 'peerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}}|array{_: 'peerChannel', channel_id: int}, banned_rights: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, left: bool, kicked_by: int, date: int}|array{_: 'channelParticipantLeft', peer: array{_: 'peerUser', user_id: int}|array{_: 'peerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}}|array{_: 'peerChannel', channel_id: int}}, chats: list<array{_: 'chatEmpty', id: int}|array{_: 'chat', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, deactivated: bool, call_active: bool, call_not_empty: bool, noforwards: bool, id: int, title: string, participants_count: int, date: int, version: int, migrated_to?: array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id: int, access_hash: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}, msg_id: int, channel_id: int}, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}}|array{_: 'chatForbidden', id: int, title: string}|array{_: 'channel', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, broadcast: bool, verified: bool, megagroup: bool, restricted: bool, signatures: bool, min: bool, scam: bool, has_link: bool, has_geo: bool, slowmode_enabled: bool, call_active: bool, call_not_empty: bool, fake: bool, gigagroup: bool, noforwards: bool, join_to_send: bool, join_request: bool, forum: bool, id: int, access_hash: int, title: string, username: string, date: int, restriction_reason: list<array{_: 'restrictionReason', platform: string, reason: string, text: string}>, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, participants_count: int, usernames: list<array{_: 'username', editable: bool, active: bool, username: string}>}|array{_: 'channelForbidden', broadcast: bool, megagroup: bool, id: int, access_hash: int, title: string, until_date: int}>, users: list<array{_: 'userEmpty', id: int}|array{_: 'user', self: bool, contact: bool, mutual_contact: bool, deleted: bool, bot: bool, bot_chat_history: bool, bot_nochats: bool, verified: bool, restricted: bool, min: bool, bot_inline_geo: bool, support: bool, scam: bool, apply_min_photo: bool, fake: bool, bot_attach_menu: bool, premium: bool, attach_menu_enabled: bool, id: int, access_hash: int, first_name: string, last_name: string, username: string, phone: string, photo?: array{_: 'userProfilePhotoEmpty'}|array{_: 'userProfilePhoto', has_video: bool, personal: bool, photo_id: int, stripped_thumb: string, dc_id: int}, status?: array{_: 'userStatusEmpty'}|array{_: 'userStatusOnline', expires: int}|array{_: 'userStatusOffline', was_online: int}|array{_: 'userStatusRecently'}|array{_: 'userStatusLastWeek'}|array{_: 'userStatusLastMonth'}, bot_info_version: int, restriction_reason: list<array{_: 'restrictionReason', platform: string, reason: string, text: string}>, bot_inline_placeholder: string, lang_code: string, emoji_status?: array{_: 'emojiStatusEmpty'}|array{_: 'emojiStatus', document_id: int}|array{_: 'emojiStatusUntil', document_id: int, until: int}, usernames: list<array{_: 'username', editable: bool, active: bool, username: string}>}>} @see https://docs.madelineproto.xyz/API_docs/types/channels.ChannelParticipant.html
     */
    public function getParticipant(array $channel, array $participant): array;

    /**
     * Create a [supergroup/channel](https://core.telegram.org/api/channel).
     *
     * @param bool $broadcast Whether to create a [channel](https://core.telegram.org/api/channel)
     * 
     *
     * @param bool $megagroup Whether to create a [supergroup](https://core.telegram.org/api/channel)
     * 
     *
     * @param bool $for_import Whether the supergroup is being created to import messages from a foreign chat service using [messages.initHistoryImport](https://docs.madelineproto.xyz/API_docs/methods/messages.initHistoryImport.html)
     * 
     *
     * @param string $title Channel title
     * 
     *
     * @param string $about Channel description
     * 
     *
     * @param array{_: 'inputGeoPointEmpty'}|array{_: 'inputGeoPoint', lat: float, long: float, accuracy_radius?: int}|array<never, never> $geo_point Geogroup location @see https://docs.madelineproto.xyz/API_docs/types/InputGeoPoint.html
     * 
     *
     * @param string $address Geogroup address
     * 
     *
     * @param int $ttl_period 
     * 
     *
     * @return array @see https://docs.madelineproto.xyz/API_docs/types/Updates.html
     */
    public function createChannel(bool $broadcast = false, bool $megagroup = false, bool $for_import = false, string $title = '', string $about = '', array $geo_point = [], string $address = '', int $ttl_period = 0): array;

    /**
     * Modify the admin rights of a user in a [supergroup/channel](https://core.telegram.org/api/channel).
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel The [supergroup/channel](https://core.telegram.org/api/channel). @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param array{_: 'inputUserEmpty'}|array{_: 'inputUserSelf'}|array{_: 'inputUser', user_id?: int, access_hash?: int}|array{_: 'inputUserFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, user_id?: int} $user_id The ID of the user whose admin rights should be modified @see https://docs.madelineproto.xyz/API_docs/types/InputUser.html
     * 
     *
     * @param array{_: 'chatAdminRights', change_info?: bool, post_messages?: bool, edit_messages?: bool, delete_messages?: bool, ban_users?: bool, invite_users?: bool, pin_messages?: bool, add_admins?: bool, anonymous?: bool, manage_call?: bool, other?: bool, manage_topics?: bool} $admin_rights The admin rights @see https://docs.madelineproto.xyz/API_docs/types/ChatAdminRights.html
     * 
     *
     * @param string $rank Indicates the role (rank) of the admin in the group: just an arbitrary string
     * 
     *
     * @return array @see https://docs.madelineproto.xyz/API_docs/types/Updates.html
     */
    public function editAdmin(array $channel, array $user_id, array $admin_rights, string $rank = ''): array;

    /**
     * Edit the name of a [channel/supergroup](https://core.telegram.org/api/channel)
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel Channel/supergroup @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param string $title New name
     * 
     *
     * @return array @see https://docs.madelineproto.xyz/API_docs/types/Updates.html
     */
    public function editTitle(array $channel, string $title = ''): array;

    /**
     * Change the photo of a [channel/supergroup](https://core.telegram.org/api/channel)
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel Channel/supergroup whose photo should be edited @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param array{_: 'inputChatPhotoEmpty'}|array{_: 'inputChatUploadedPhoto', file?: mixed, video?: mixed, video_start_ts?: float}|array{_: 'inputChatPhoto', id: array{_: 'inputPhotoEmpty'}|array{_: 'inputPhoto', id?: int, access_hash?: int, file_reference?: string}} $photo New photo @see https://docs.madelineproto.xyz/API_docs/types/InputChatPhoto.html
     * 
     *
     * @return array @see https://docs.madelineproto.xyz/API_docs/types/Updates.html
     */
    public function editPhoto(array $channel, array $photo): array;

    /**
     * Check if a username is free and can be assigned to a channel/supergroup
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel The [channel/supergroup](https://core.telegram.org/api/channel) that will assigned the specified username @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param string $username The username to check
     * 
     *
     * @return bool 
     */
    public function checkUsername(array $channel, string $username = ''): bool;

    /**
     * Change the username of a supergroup/channel
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel Channel @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param string $username New username
     * 
     *
     * @return bool 
     */
    public function updateUsername(array $channel, string $username = ''): bool;

    /**
     * Join a channel/supergroup
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel Channel/supergroup to join @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @return array @see https://docs.madelineproto.xyz/API_docs/types/Updates.html
     */
    public function joinChannel(array $channel): array;

    /**
     * Leave a [channel/supergroup](https://core.telegram.org/api/channel)
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel [Channel/supergroup](https://core.telegram.org/api/channel) to leave @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @return array @see https://docs.madelineproto.xyz/API_docs/types/Updates.html
     */
    public function leaveChannel(array $channel): array;

    /**
     * Invite users to a channel/supergroup
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel Channel/supergroup @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param list<array{_: 'inputUserEmpty'}|array{_: 'inputUserSelf'}|array{_: 'inputUser', user_id?: int, access_hash?: int}|array{_: 'inputUserFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, user_id?: int}>|array<never, never> $users Array of Users to invite @see https://docs.madelineproto.xyz/API_docs/types/InputUser.html
     * 
     *
     * @return array @see https://docs.madelineproto.xyz/API_docs/types/Updates.html
     */
    public function inviteToChannel(array $channel, array $users = []): array;

    /**
     * Delete a [channel/supergroup](https://core.telegram.org/api/channel)
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel [Channel/supergroup](https://core.telegram.org/api/channel) to delete @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @return array @see https://docs.madelineproto.xyz/API_docs/types/Updates.html
     */
    public function deleteChannel(array $channel): array;

    /**
     * Get link and embed info of a message in a [channel/supergroup](https://core.telegram.org/api/channel)
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel Channel @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param bool $grouped Whether to include other grouped media (for albums)
     * 
     *
     * @param bool $thread Whether to also include a thread ID, if available, inside of the link
     * 
     *
     * @param int $id Message ID
     * 
     *
     * @return array{_: 'exportedMessageLink', link: string, html: string} @see https://docs.madelineproto.xyz/API_docs/types/ExportedMessageLink.html
     */
    public function exportMessageLink(array $channel, bool $grouped = false, bool $thread = false, int $id = 0): array;

    /**
     * Enable/disable message signatures in channels
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel Channel @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param bool $enabled Value
     * 
     *
     * @return array @see https://docs.madelineproto.xyz/API_docs/types/Updates.html
     */
    public function toggleSignatures(array $channel, bool $enabled): array;

    /**
     * Get [channels/supergroups/geogroups](https://core.telegram.org/api/channel) we're admin in. Usually called when the user exceeds the [limit](https://docs.madelineproto.xyz/API_docs/constructors/config.html) for owned public [channels/supergroups/geogroups](https://core.telegram.org/api/channel), and the user is given the choice to remove one of his channels/supergroups/geogroups.
     *
     * @param bool $by_location Get geogroups
     * 
     *
     * @param bool $check_limit If set and the user has reached the limit of owned public [channels/supergroups/geogroups](https://core.telegram.org/api/channel), instead of returning the channel list one of the specified [errors](#possible-errors) will be returned.<br>Useful to check if a new public channel can indeed be created, even before asking the user to enter a channel username to use in [channels.checkUsername](https://docs.madelineproto.xyz/API_docs/methods/channels.checkUsername.html)/[channels.updateUsername](https://docs.madelineproto.xyz/API_docs/methods/channels.updateUsername.html).
     * 
     *
     * @return array{_: 'messages.chats', chats: list<array{_: 'chatEmpty', id: int}|array{_: 'chat', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, deactivated: bool, call_active: bool, call_not_empty: bool, noforwards: bool, id: int, title: string, participants_count: int, date: int, version: int, migrated_to?: array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id: int, access_hash: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}, msg_id: int, channel_id: int}, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}}|array{_: 'chatForbidden', id: int, title: string}|array{_: 'channel', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, broadcast: bool, verified: bool, megagroup: bool, restricted: bool, signatures: bool, min: bool, scam: bool, has_link: bool, has_geo: bool, slowmode_enabled: bool, call_active: bool, call_not_empty: bool, fake: bool, gigagroup: bool, noforwards: bool, join_to_send: bool, join_request: bool, forum: bool, id: int, access_hash: int, title: string, username: string, date: int, restriction_reason: list<array{_: 'restrictionReason', platform: string, reason: string, text: string}>, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, participants_count: int, usernames: list<array{_: 'username', editable: bool, active: bool, username: string}>}|array{_: 'channelForbidden', broadcast: bool, megagroup: bool, id: int, access_hash: int, title: string, until_date: int}>}|array{_: 'messages.chatsSlice', count: int, chats: list<array{_: 'chatEmpty', id: int}|array{_: 'chat', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, deactivated: bool, call_active: bool, call_not_empty: bool, noforwards: bool, id: int, title: string, participants_count: int, date: int, version: int, migrated_to?: array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id: int, access_hash: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}, msg_id: int, channel_id: int}, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}}|array{_: 'chatForbidden', id: int, title: string}|array{_: 'channel', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, broadcast: bool, verified: bool, megagroup: bool, restricted: bool, signatures: bool, min: bool, scam: bool, has_link: bool, has_geo: bool, slowmode_enabled: bool, call_active: bool, call_not_empty: bool, fake: bool, gigagroup: bool, noforwards: bool, join_to_send: bool, join_request: bool, forum: bool, id: int, access_hash: int, title: string, username: string, date: int, restriction_reason: list<array{_: 'restrictionReason', platform: string, reason: string, text: string}>, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, participants_count: int, usernames: list<array{_: 'username', editable: bool, active: bool, username: string}>}|array{_: 'channelForbidden', broadcast: bool, megagroup: bool, id: int, access_hash: int, title: string, until_date: int}>} @see https://docs.madelineproto.xyz/API_docs/types/messages.Chats.html
     */
    public function getAdminedPublicChannels(bool $by_location = false, bool $check_limit = false): array;

    /**
     * Ban/unban/kick a user in a [supergroup/channel](https://core.telegram.org/api/channel).
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel The [supergroup/channel](https://core.telegram.org/api/channel). @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}|array{_: 'inputPeerUserFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, user_id?: int}|array{_: 'inputPeerChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $participant Participant to ban @see https://docs.madelineproto.xyz/API_docs/types/InputPeer.html
     * 
     *
     * @param array{_: 'chatBannedRights', view_messages?: bool, send_messages?: bool, send_media?: bool, send_stickers?: bool, send_gifs?: bool, send_games?: bool, send_inline?: bool, embed_links?: bool, send_polls?: bool, change_info?: bool, invite_users?: bool, pin_messages?: bool, manage_topics?: bool, until_date?: int} $banned_rights The banned rights @see https://docs.madelineproto.xyz/API_docs/types/ChatBannedRights.html
     * 
     *
     * @return array @see https://docs.madelineproto.xyz/API_docs/types/Updates.html
     */
    public function editBanned(array $channel, array $participant, array $banned_rights): array;

    /**
     * Get the admin log of a [channel/supergroup](https://core.telegram.org/api/channel)
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel Channel @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param string $q Search query, can be empty
     * 
     *
     * @param array{_: 'channelAdminLogEventsFilter', join?: bool, leave?: bool, invite?: bool, ban?: bool, unban?: bool, kick?: bool, unkick?: bool, promote?: bool, demote?: bool, info?: bool, settings?: bool, pinned?: bool, edit?: bool, delete?: bool, group_call?: bool, invites?: bool, send?: bool, forums?: bool}|array<never, never> $events_filter Event filter @see https://docs.madelineproto.xyz/API_docs/types/ChannelAdminLogEventsFilter.html
     * 
     *
     * @param list<array{_: 'inputUserEmpty'}|array{_: 'inputUserSelf'}|array{_: 'inputUser', user_id?: int, access_hash?: int}|array{_: 'inputUserFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, user_id?: int}>|array<never, never> $admins Array of Only show events from these admins @see https://docs.madelineproto.xyz/API_docs/types/InputUser.html
     * 
     *
     * @param int $max_id Maximum ID of message to return (see [pagination](https://core.telegram.org/api/offsets))
     * 
     *
     * @param int $min_id Minimum ID of message to return (see [pagination](https://core.telegram.org/api/offsets))
     * 
     *
     * @param int $limit Maximum number of results to return, [see pagination](https://core.telegram.org/api/offsets)
     * 
     *
     * @return array{_: 'channels.adminLogResults', events: list<array{_: 'channelAdminLogEvent', action: array{_: 'channelAdminLogEventActionChangeTitle', prev_value: array, new_value: array}|array{_: 'channelAdminLogEventActionChangeAbout', prev_value: array, new_value: array}|array{_: 'channelAdminLogEventActionChangeUsername', prev_value: array, new_value: array}|array{_: 'channelAdminLogEventActionChangePhoto', prev_photo: array, new_photo: array}|array{_: 'channelAdminLogEventActionToggleInvites', new_value: array}|array{_: 'channelAdminLogEventActionToggleSignatures', new_value: array}|array{_: 'channelAdminLogEventActionUpdatePinned', message: array}|array{_: 'channelAdminLogEventActionEditMessage', prev_message: array, new_message: array}|array{_: 'channelAdminLogEventActionDeleteMessage', message: array}|array{_: 'channelAdminLogEventActionParticipantJoin'}|array{_: 'channelAdminLogEventActionParticipantLeave'}|array{_: 'channelAdminLogEventActionParticipantInvite', participant: array}|array{_: 'channelAdminLogEventActionParticipantToggleBan', prev_participant: array, new_participant: array}|array{_: 'channelAdminLogEventActionParticipantToggleAdmin', prev_participant: array, new_participant: array}|array{_: 'channelAdminLogEventActionChangeStickerSet', prev_stickerset: array, new_stickerset: array}|array{_: 'channelAdminLogEventActionTogglePreHistoryHidden', new_value: array}|array{_: 'channelAdminLogEventActionDefaultBannedRights', prev_banned_rights: array, new_banned_rights: array}|array{_: 'channelAdminLogEventActionStopPoll', message: array}|array{_: 'channelAdminLogEventActionChangeLinkedChat', prev_value: array, new_value: array}|array{_: 'channelAdminLogEventActionChangeLocation', prev_value: array, new_value: array}|array{_: 'channelAdminLogEventActionToggleSlowMode', prev_value: array, new_value: array}|array{_: 'channelAdminLogEventActionStartGroupCall', call: array}|array{_: 'channelAdminLogEventActionDiscardGroupCall', call: array}|array{_: 'channelAdminLogEventActionParticipantMute', participant: array}|array{_: 'channelAdminLogEventActionParticipantUnmute', participant: array}|array{_: 'channelAdminLogEventActionToggleGroupCallSetting', join_muted: array}|array{_: 'channelAdminLogEventActionParticipantJoinByInvite', invite: array}|array{_: 'channelAdminLogEventActionExportedInviteDelete', invite: array}|array{_: 'channelAdminLogEventActionExportedInviteRevoke', invite: array}|array{_: 'channelAdminLogEventActionExportedInviteEdit', prev_invite: array, new_invite: array}|array{_: 'channelAdminLogEventActionParticipantVolume', participant: array}|array{_: 'channelAdminLogEventActionChangeHistoryTTL', prev_value: array, new_value: array}|array{_: 'channelAdminLogEventActionParticipantJoinByRequest', invite: array, approved_by: array}|array{_: 'channelAdminLogEventActionToggleNoForwards', new_value: array}|array{_: 'channelAdminLogEventActionSendMessage', message: array}|array{_: 'channelAdminLogEventActionChangeAvailableReactions', prev_value: array, new_value: array}|array{_: 'channelAdminLogEventActionChangeUsernames', prev_value: list<array>, new_value: list<array>}|array{_: 'channelAdminLogEventActionToggleForum', new_value: array}|array{_: 'channelAdminLogEventActionCreateTopic', topic: array}|array{_: 'channelAdminLogEventActionEditTopic', prev_topic: array, new_topic: array}|array{_: 'channelAdminLogEventActionDeleteTopic', topic: array}|array{_: 'channelAdminLogEventActionPinTopic', prev_topic?: array, new_topic?: array}|array{_: 'channelAdminLogEventActionToggleAntiSpam', new_value: array}, id: int, date: int, user_id: int}>, chats: list<array{_: 'chatEmpty', id: int}|array{_: 'chat', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: array, photo_id: array, stripped_thumb: array, dc_id: array}, creator: bool, left: bool, deactivated: bool, call_active: bool, call_not_empty: bool, noforwards: bool, id: int, title: string, participants_count: int, date: int, version: int, migrated_to?: array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id: array, access_hash: array}|array{_: 'inputChannelFromMessage', peer: array, msg_id: array, channel_id: array}, admin_rights?: array{_: 'chatAdminRights', change_info: array, post_messages: array, edit_messages: array, delete_messages: array, ban_users: array, invite_users: array, pin_messages: array, add_admins: array, anonymous: array, manage_call: array, other: array, manage_topics: array}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: array, send_messages: array, send_media: array, send_stickers: array, send_gifs: array, send_games: array, send_inline: array, embed_links: array, send_polls: array, change_info: array, invite_users: array, pin_messages: array, manage_topics: array, until_date: array}}|array{_: 'chatForbidden', id: int, title: string}|array{_: 'channel', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: array, photo_id: array, stripped_thumb: array, dc_id: array}, creator: bool, left: bool, broadcast: bool, verified: bool, megagroup: bool, restricted: bool, signatures: bool, min: bool, scam: bool, has_link: bool, has_geo: bool, slowmode_enabled: bool, call_active: bool, call_not_empty: bool, fake: bool, gigagroup: bool, noforwards: bool, join_to_send: bool, join_request: bool, forum: bool, id: int, access_hash: int, title: string, username: string, date: int, restriction_reason: list<array{_: 'restrictionReason', platform: array, reason: array, text: array}>, admin_rights?: array{_: 'chatAdminRights', change_info: array, post_messages: array, edit_messages: array, delete_messages: array, ban_users: array, invite_users: array, pin_messages: array, add_admins: array, anonymous: array, manage_call: array, other: array, manage_topics: array}, banned_rights?: array{_: 'chatBannedRights', view_messages: array, send_messages: array, send_media: array, send_stickers: array, send_gifs: array, send_games: array, send_inline: array, embed_links: array, send_polls: array, change_info: array, invite_users: array, pin_messages: array, manage_topics: array, until_date: array}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: array, send_messages: array, send_media: array, send_stickers: array, send_gifs: array, send_games: array, send_inline: array, embed_links: array, send_polls: array, change_info: array, invite_users: array, pin_messages: array, manage_topics: array, until_date: array}, participants_count: int, usernames: list<array{_: 'username', editable: array, active: array, username: array}>}|array{_: 'channelForbidden', broadcast: bool, megagroup: bool, id: int, access_hash: int, title: string, until_date: int}>, users: list<array{_: 'userEmpty', id: int}|array{_: 'user', self: bool, contact: bool, mutual_contact: bool, deleted: bool, bot: bool, bot_chat_history: bool, bot_nochats: bool, verified: bool, restricted: bool, min: bool, bot_inline_geo: bool, support: bool, scam: bool, apply_min_photo: bool, fake: bool, bot_attach_menu: bool, premium: bool, attach_menu_enabled: bool, id: int, access_hash: int, first_name: string, last_name: string, username: string, phone: string, photo?: array{_: 'userProfilePhotoEmpty'}|array{_: 'userProfilePhoto', has_video: array, personal: array, photo_id: array, stripped_thumb: array, dc_id: array}, status?: array{_: 'userStatusEmpty'}|array{_: 'userStatusOnline', expires: array}|array{_: 'userStatusOffline', was_online: array}|array{_: 'userStatusRecently'}|array{_: 'userStatusLastWeek'}|array{_: 'userStatusLastMonth'}, bot_info_version: int, restriction_reason: list<array{_: 'restrictionReason', platform: array, reason: array, text: array}>, bot_inline_placeholder: string, lang_code: string, emoji_status?: array{_: 'emojiStatusEmpty'}|array{_: 'emojiStatus', document_id: array}|array{_: 'emojiStatusUntil', document_id: array, until: array}, usernames: list<array{_: 'username', editable: array, active: array, username: array}>}>} @see https://docs.madelineproto.xyz/API_docs/types/channels.AdminLogResults.html
     */
    public function getAdminLog(array $channel, string $q = '', array $events_filter = [], array $admins = [], int $max_id = 0, int $min_id = 0, int $limit = 0): array;

    /**
     * Associate a stickerset to the supergroup
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel Supergroup @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id?: int, access_hash?: int}|array{_: 'inputStickerSetShortName', short_name?: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon?: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'} $stickerset The stickerset to associate @see https://docs.madelineproto.xyz/API_docs/types/InputStickerSet.html
     * 
     *
     * @return bool 
     */
    public function setStickers(array $channel, array $stickerset): bool;

    /**
     * Mark [channel/supergroup](https://core.telegram.org/api/channel) message contents as read
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel [Channel/supergroup](https://core.telegram.org/api/channel) @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param list<int>|array<never, never> $id IDs of messages whose contents should be marked as read
     * 
     *
     * @return bool 
     */
    public function readMessageContents(array $channel, array $id = []): bool;

    /**
     * Delete the history of a [supergroup](https://core.telegram.org/api/channel)
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel [Supergroup](https://core.telegram.org/api/channel) whose history must be deleted @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param bool $for_everyone Whether the history should be deleted for everyone
     * 
     *
     * @param int $max_id ID of message **up to which** the history must be deleted
     * 
     *
     * @return array @see https://docs.madelineproto.xyz/API_docs/types/Updates.html
     */
    public function deleteHistory(array $channel, bool $for_everyone = false, int $max_id = 0): array;

    /**
     * Hide/unhide message history for new channel/supergroup users
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel Channel/supergroup @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param bool $enabled Hide/unhide
     * 
     *
     * @return array @see https://docs.madelineproto.xyz/API_docs/types/Updates.html
     */
    public function togglePreHistoryHidden(array $channel, bool $enabled): array;

    /**
     * Get a list of [channels/supergroups](https://core.telegram.org/api/channel) we left
     *
     * @param int $offset Offset for [pagination](https://core.telegram.org/api/offsets)
     * 
     *
     * @return array{_: 'messages.chats', chats: list<array{_: 'chatEmpty', id: int}|array{_: 'chat', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, deactivated: bool, call_active: bool, call_not_empty: bool, noforwards: bool, id: int, title: string, participants_count: int, date: int, version: int, migrated_to?: array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id: int, access_hash: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}, msg_id: int, channel_id: int}, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}}|array{_: 'chatForbidden', id: int, title: string}|array{_: 'channel', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, broadcast: bool, verified: bool, megagroup: bool, restricted: bool, signatures: bool, min: bool, scam: bool, has_link: bool, has_geo: bool, slowmode_enabled: bool, call_active: bool, call_not_empty: bool, fake: bool, gigagroup: bool, noforwards: bool, join_to_send: bool, join_request: bool, forum: bool, id: int, access_hash: int, title: string, username: string, date: int, restriction_reason: list<array{_: 'restrictionReason', platform: string, reason: string, text: string}>, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, participants_count: int, usernames: list<array{_: 'username', editable: bool, active: bool, username: string}>}|array{_: 'channelForbidden', broadcast: bool, megagroup: bool, id: int, access_hash: int, title: string, until_date: int}>}|array{_: 'messages.chatsSlice', count: int, chats: list<array{_: 'chatEmpty', id: int}|array{_: 'chat', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, deactivated: bool, call_active: bool, call_not_empty: bool, noforwards: bool, id: int, title: string, participants_count: int, date: int, version: int, migrated_to?: array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id: int, access_hash: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}, msg_id: int, channel_id: int}, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}}|array{_: 'chatForbidden', id: int, title: string}|array{_: 'channel', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, broadcast: bool, verified: bool, megagroup: bool, restricted: bool, signatures: bool, min: bool, scam: bool, has_link: bool, has_geo: bool, slowmode_enabled: bool, call_active: bool, call_not_empty: bool, fake: bool, gigagroup: bool, noforwards: bool, join_to_send: bool, join_request: bool, forum: bool, id: int, access_hash: int, title: string, username: string, date: int, restriction_reason: list<array{_: 'restrictionReason', platform: string, reason: string, text: string}>, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, participants_count: int, usernames: list<array{_: 'username', editable: bool, active: bool, username: string}>}|array{_: 'channelForbidden', broadcast: bool, megagroup: bool, id: int, access_hash: int, title: string, until_date: int}>} @see https://docs.madelineproto.xyz/API_docs/types/messages.Chats.html
     */
    public function getLeftChannels(int $offset = 0): array;

    /**
     * Get all groups that can be used as [discussion groups](https://core.telegram.org/api/discussion).
     * 
     * Returned [basic group chats](https://core.telegram.org/api/channel#basic-groups) must be first upgraded to [supergroups](https://core.telegram.org/api/channel#supergroups) before they can be set as a discussion group.  
     * To set a returned supergroup as a discussion group, access to its old messages must be enabled using [channels.togglePreHistoryHidden](https://docs.madelineproto.xyz/API_docs/methods/channels.togglePreHistoryHidden.html), first.
     *
     * @return array{_: 'messages.chats', chats: list<array{_: 'chatEmpty', id: int}|array{_: 'chat', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, deactivated: bool, call_active: bool, call_not_empty: bool, noforwards: bool, id: int, title: string, participants_count: int, date: int, version: int, migrated_to?: array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id: int, access_hash: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}, msg_id: int, channel_id: int}, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}}|array{_: 'chatForbidden', id: int, title: string}|array{_: 'channel', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, broadcast: bool, verified: bool, megagroup: bool, restricted: bool, signatures: bool, min: bool, scam: bool, has_link: bool, has_geo: bool, slowmode_enabled: bool, call_active: bool, call_not_empty: bool, fake: bool, gigagroup: bool, noforwards: bool, join_to_send: bool, join_request: bool, forum: bool, id: int, access_hash: int, title: string, username: string, date: int, restriction_reason: list<array{_: 'restrictionReason', platform: string, reason: string, text: string}>, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, participants_count: int, usernames: list<array{_: 'username', editable: bool, active: bool, username: string}>}|array{_: 'channelForbidden', broadcast: bool, megagroup: bool, id: int, access_hash: int, title: string, until_date: int}>}|array{_: 'messages.chatsSlice', count: int, chats: list<array{_: 'chatEmpty', id: int}|array{_: 'chat', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, deactivated: bool, call_active: bool, call_not_empty: bool, noforwards: bool, id: int, title: string, participants_count: int, date: int, version: int, migrated_to?: array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id: int, access_hash: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}, msg_id: int, channel_id: int}, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}}|array{_: 'chatForbidden', id: int, title: string}|array{_: 'channel', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, broadcast: bool, verified: bool, megagroup: bool, restricted: bool, signatures: bool, min: bool, scam: bool, has_link: bool, has_geo: bool, slowmode_enabled: bool, call_active: bool, call_not_empty: bool, fake: bool, gigagroup: bool, noforwards: bool, join_to_send: bool, join_request: bool, forum: bool, id: int, access_hash: int, title: string, username: string, date: int, restriction_reason: list<array{_: 'restrictionReason', platform: string, reason: string, text: string}>, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, participants_count: int, usernames: list<array{_: 'username', editable: bool, active: bool, username: string}>}|array{_: 'channelForbidden', broadcast: bool, megagroup: bool, id: int, access_hash: int, title: string, until_date: int}>} @see https://docs.madelineproto.xyz/API_docs/types/messages.Chats.html
     */
    public function getGroupsForDiscussion(): array;

    /**
     * Associate a group to a channel as [discussion group](https://core.telegram.org/api/discussion) for that channel
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $broadcast Channel @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $group [Discussion group](https://core.telegram.org/api/discussion) to associate to the channel @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @return bool 
     */
    public function setDiscussionGroup(array $broadcast, array $group): bool;

    /**
     * Transfer channel ownership
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel Channel @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param array{_: 'inputUserEmpty'}|array{_: 'inputUserSelf'}|array{_: 'inputUser', user_id?: int, access_hash?: int}|array{_: 'inputUserFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, user_id?: int} $user_id New channel owner @see https://docs.madelineproto.xyz/API_docs/types/InputUser.html
     * 
     *
     * @param array{_: 'inputCheckPasswordEmpty'}|array{_: 'inputCheckPasswordSRP', srp_id?: int, A?: string, M1?: string} $password [2FA password](https://core.telegram.org/api/srp) of account @see https://docs.madelineproto.xyz/API_docs/types/InputCheckPasswordSRP.html
     * 
     *
     * @return array @see https://docs.madelineproto.xyz/API_docs/types/Updates.html
     */
    public function editCreator(array $channel, array $user_id, array $password): array;

    /**
     * Edit location of geogroup
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel [Geogroup](https://core.telegram.org/api/channel) @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param array{_: 'inputGeoPointEmpty'}|array{_: 'inputGeoPoint', lat: float, long: float, accuracy_radius?: int} $geo_point New geolocation @see https://docs.madelineproto.xyz/API_docs/types/InputGeoPoint.html
     * 
     *
     * @param string $address Address string
     * 
     *
     * @return bool 
     */
    public function editLocation(array $channel, array $geo_point, string $address = ''): bool;

    /**
     * Toggle supergroup slow mode: if enabled, users will only be able to send one message every `seconds` seconds
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel The [supergroup](https://core.telegram.org/api/channel) @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param int $seconds Users will only be able to send one message every `seconds` seconds, `0` to disable the limitation
     * 
     *
     * @return array @see https://docs.madelineproto.xyz/API_docs/types/Updates.html
     */
    public function toggleSlowMode(array $channel, int $seconds = 0): array;

    /**
     * Get inactive channels and supergroups
     *
     * @return array{_: 'messages.inactiveChats', dates: list<int>, chats: list<array{_: 'chatEmpty', id: int}|array{_: 'chat', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, deactivated: bool, call_active: bool, call_not_empty: bool, noforwards: bool, id: int, title: string, participants_count: int, date: int, version: int, migrated_to?: array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id: int, access_hash: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}, msg_id: int, channel_id: int}, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}}|array{_: 'chatForbidden', id: int, title: string}|array{_: 'channel', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, broadcast: bool, verified: bool, megagroup: bool, restricted: bool, signatures: bool, min: bool, scam: bool, has_link: bool, has_geo: bool, slowmode_enabled: bool, call_active: bool, call_not_empty: bool, fake: bool, gigagroup: bool, noforwards: bool, join_to_send: bool, join_request: bool, forum: bool, id: int, access_hash: int, title: string, username: string, date: int, restriction_reason: list<array{_: 'restrictionReason', platform: string, reason: string, text: string}>, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, participants_count: int, usernames: list<array{_: 'username', editable: bool, active: bool, username: string}>}|array{_: 'channelForbidden', broadcast: bool, megagroup: bool, id: int, access_hash: int, title: string, until_date: int}>, users: list<array{_: 'userEmpty', id: int}|array{_: 'user', self: bool, contact: bool, mutual_contact: bool, deleted: bool, bot: bool, bot_chat_history: bool, bot_nochats: bool, verified: bool, restricted: bool, min: bool, bot_inline_geo: bool, support: bool, scam: bool, apply_min_photo: bool, fake: bool, bot_attach_menu: bool, premium: bool, attach_menu_enabled: bool, id: int, access_hash: int, first_name: string, last_name: string, username: string, phone: string, photo?: array{_: 'userProfilePhotoEmpty'}|array{_: 'userProfilePhoto', has_video: bool, personal: bool, photo_id: int, stripped_thumb: string, dc_id: int}, status?: array{_: 'userStatusEmpty'}|array{_: 'userStatusOnline', expires: int}|array{_: 'userStatusOffline', was_online: int}|array{_: 'userStatusRecently'}|array{_: 'userStatusLastWeek'}|array{_: 'userStatusLastMonth'}, bot_info_version: int, restriction_reason: list<array{_: 'restrictionReason', platform: string, reason: string, text: string}>, bot_inline_placeholder: string, lang_code: string, emoji_status?: array{_: 'emojiStatusEmpty'}|array{_: 'emojiStatus', document_id: int}|array{_: 'emojiStatusUntil', document_id: int, until: int}, usernames: list<array{_: 'username', editable: bool, active: bool, username: string}>}>} @see https://docs.madelineproto.xyz/API_docs/types/messages.InactiveChats.html
     */
    public function getInactiveChannels(): array;

    /**
     * Convert a [supergroup](https://core.telegram.org/api/channel) to a [gigagroup](https://core.telegram.org/api/channel), when requested by [channel suggestions](https://core.telegram.org/api/config#channel-suggestions).
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel The [supergroup](https://core.telegram.org/api/channel) to convert @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @return array @see https://docs.madelineproto.xyz/API_docs/types/Updates.html
     */
    public function convertToGigagroup(array $channel): array;

    /**
     * Mark a specific sponsored message as read
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel Peer @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @return bool 
     */
    public function viewSponsoredMessage(array $channel): bool;

    /**
     * Get a list of sponsored messages
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel Peer @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @return array{_: 'messages.sponsoredMessages', posts_between: int, messages: list<array{_: 'sponsoredMessage', recommended: bool, show_peer_photo: bool, from_id?: array{_: 'peerUser', user_id: int}|array{_: 'peerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}}|array{_: 'peerChannel', channel_id: int}, chat_invite?: array{_: 'chatInviteAlready', chat: array{_: 'chatEmpty', id: int}|array{_: 'chat', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, deactivated: bool, call_active: bool, call_not_empty: bool, noforwards: bool, id: int, title: string, participants_count: int, date: int, version: int, migrated_to?: array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id: int, access_hash: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}, msg_id: int, channel_id: int}, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}}|array{_: 'chatForbidden', id: int, title: string}|array{_: 'channel', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, broadcast: bool, verified: bool, megagroup: bool, restricted: bool, signatures: bool, min: bool, scam: bool, has_link: bool, has_geo: bool, slowmode_enabled: bool, call_active: bool, call_not_empty: bool, fake: bool, gigagroup: bool, noforwards: bool, join_to_send: bool, join_request: bool, forum: bool, id: int, access_hash: int, title: string, username: string, date: int, restriction_reason: list<array{_: 'restrictionReason', platform: string, reason: string, text: string}>, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, participants_count: int, usernames: list<array{_: 'username', editable: bool, active: bool, username: string}>}|array{_: 'channelForbidden', broadcast: bool, megagroup: bool, id: int, access_hash: int, title: string, until_date: int}}|array{_: 'chatInvite', photo: array{_: 'photoEmpty', id: int}|array{_: 'photo', has_stickers: bool, id: int, access_hash: int, file_reference: string, date: int, sizes: list<array{_: 'photoSizeEmpty', type: string}|array{_: 'photoSize', type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', type: string, w: int, h: int, bytes: string}|array{_: 'photoStrippedSize', type: string, bytes: string}|array{_: 'photoSizeProgressive', type: string, w: int, h: int, sizes: list<int>}|array{_: 'photoPathSize', type: string, bytes: string}|array{_: 'photoSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, bytes: string}>, video_sizes: list<array{_: 'videoSize', type: string, w: int, h: int, size: int, video_start_ts?: float}>, dc_id: int}, channel: bool, broadcast: bool, public: bool, megagroup: bool, request_needed: bool, title: string, about: string, participants_count: int, participants: list<array{_: 'userEmpty', id: int}|array{_: 'user', self: bool, contact: bool, mutual_contact: bool, deleted: bool, bot: bool, bot_chat_history: bool, bot_nochats: bool, verified: bool, restricted: bool, min: bool, bot_inline_geo: bool, support: bool, scam: bool, apply_min_photo: bool, fake: bool, bot_attach_menu: bool, premium: bool, attach_menu_enabled: bool, id: int, access_hash: int, first_name: string, last_name: string, username: string, phone: string, photo?: array{_: 'userProfilePhotoEmpty'}|array{_: 'userProfilePhoto', has_video: bool, personal: bool, photo_id: int, stripped_thumb: string, dc_id: int}, status?: array{_: 'userStatusEmpty'}|array{_: 'userStatusOnline', expires: int}|array{_: 'userStatusOffline', was_online: int}|array{_: 'userStatusRecently'}|array{_: 'userStatusLastWeek'}|array{_: 'userStatusLastMonth'}, bot_info_version: int, restriction_reason: list<array{_: 'restrictionReason', platform: string, reason: string, text: string}>, bot_inline_placeholder: string, lang_code: string, emoji_status?: array{_: 'emojiStatusEmpty'}|array{_: 'emojiStatus', document_id: int}|array{_: 'emojiStatusUntil', document_id: int, until: int}, usernames: list<array{_: 'username', editable: bool, active: bool, username: string}>}>}|array{_: 'chatInvitePeek', chat: array{_: 'chatEmpty', id: int}|array{_: 'chat', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, deactivated: bool, call_active: bool, call_not_empty: bool, noforwards: bool, id: int, title: string, participants_count: int, date: int, version: int, migrated_to?: array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id: int, access_hash: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}, msg_id: int, channel_id: int}, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}}|array{_: 'chatForbidden', id: int, title: string}|array{_: 'channel', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, broadcast: bool, verified: bool, megagroup: bool, restricted: bool, signatures: bool, min: bool, scam: bool, has_link: bool, has_geo: bool, slowmode_enabled: bool, call_active: bool, call_not_empty: bool, fake: bool, gigagroup: bool, noforwards: bool, join_to_send: bool, join_request: bool, forum: bool, id: int, access_hash: int, title: string, username: string, date: int, restriction_reason: list<array{_: 'restrictionReason', platform: string, reason: string, text: string}>, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, participants_count: int, usernames: list<array{_: 'username', editable: bool, active: bool, username: string}>}|array{_: 'channelForbidden', broadcast: bool, megagroup: bool, id: int, access_hash: int, title: string, until_date: int}, expires: int}, chat_invite_hash: string, channel_post: int, start_param: string, message: string, entities: list<array{_: 'messageEntityUnknown', offset: int, length: int}|array{_: 'messageEntityMention', offset: int, length: int}|array{_: 'messageEntityHashtag', offset: int, length: int}|array{_: 'messageEntityBotCommand', offset: int, length: int}|array{_: 'messageEntityUrl', offset: int, length: int}|array{_: 'messageEntityEmail', offset: int, length: int}|array{_: 'messageEntityBold', offset: int, length: int}|array{_: 'messageEntityItalic', offset: int, length: int}|array{_: 'messageEntityCode', offset: int, length: int}|array{_: 'messageEntityPre', offset: int, length: int, language: string}|array{_: 'messageEntityTextUrl', offset: int, length: int, url: string}|array{_: 'messageEntityMentionName', offset: int, length: int, user_id: int}|array{_: 'inputMessageEntityMentionName', user_id: array{_: 'inputUserEmpty'}|array{_: 'inputUserSelf'}|array{_: 'inputUser', user_id: int, access_hash: int}|array{_: 'inputUserFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}, msg_id: int, user_id: int}, offset: int, length: int}|array{_: 'messageEntityPhone', offset: int, length: int}|array{_: 'messageEntityCashtag', offset: int, length: int}|array{_: 'messageEntityUnderline', offset: int, length: int}|array{_: 'messageEntityStrike', offset: int, length: int}|array{_: 'messageEntityBlockquote', offset: int, length: int}|array{_: 'messageEntityBankCard', offset: int, length: int}|array{_: 'messageEntitySpoiler', offset: int, length: int}|array{_: 'messageEntityCustomEmoji', offset: int, length: int, document_id: int}>}>, chats: list<array{_: 'chatEmpty', id: int}|array{_: 'chat', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, deactivated: bool, call_active: bool, call_not_empty: bool, noforwards: bool, id: int, title: string, participants_count: int, date: int, version: int, migrated_to?: array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id: int, access_hash: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}, msg_id: int, channel_id: int}, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}}|array{_: 'chatForbidden', id: int, title: string}|array{_: 'channel', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, broadcast: bool, verified: bool, megagroup: bool, restricted: bool, signatures: bool, min: bool, scam: bool, has_link: bool, has_geo: bool, slowmode_enabled: bool, call_active: bool, call_not_empty: bool, fake: bool, gigagroup: bool, noforwards: bool, join_to_send: bool, join_request: bool, forum: bool, id: int, access_hash: int, title: string, username: string, date: int, restriction_reason: list<array{_: 'restrictionReason', platform: string, reason: string, text: string}>, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, participants_count: int, usernames: list<array{_: 'username', editable: bool, active: bool, username: string}>}|array{_: 'channelForbidden', broadcast: bool, megagroup: bool, id: int, access_hash: int, title: string, until_date: int}>, users: list<array{_: 'userEmpty', id: int}|array{_: 'user', self: bool, contact: bool, mutual_contact: bool, deleted: bool, bot: bool, bot_chat_history: bool, bot_nochats: bool, verified: bool, restricted: bool, min: bool, bot_inline_geo: bool, support: bool, scam: bool, apply_min_photo: bool, fake: bool, bot_attach_menu: bool, premium: bool, attach_menu_enabled: bool, id: int, access_hash: int, first_name: string, last_name: string, username: string, phone: string, photo?: array{_: 'userProfilePhotoEmpty'}|array{_: 'userProfilePhoto', has_video: bool, personal: bool, photo_id: int, stripped_thumb: string, dc_id: int}, status?: array{_: 'userStatusEmpty'}|array{_: 'userStatusOnline', expires: int}|array{_: 'userStatusOffline', was_online: int}|array{_: 'userStatusRecently'}|array{_: 'userStatusLastWeek'}|array{_: 'userStatusLastMonth'}, bot_info_version: int, restriction_reason: list<array{_: 'restrictionReason', platform: string, reason: string, text: string}>, bot_inline_placeholder: string, lang_code: string, emoji_status?: array{_: 'emojiStatusEmpty'}|array{_: 'emojiStatus', document_id: int}|array{_: 'emojiStatusUntil', document_id: int, until: int}, usernames: list<array{_: 'username', editable: bool, active: bool, username: string}>}>}|array{_: 'messages.sponsoredMessagesEmpty'} @see https://docs.madelineproto.xyz/API_docs/types/messages.SponsoredMessages.html
     */
    public function getSponsoredMessages(array $channel): array;

    /**
     * Obtains a list of peers that can be used to send messages in a specific group
     *
     * @param array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}|array{_: 'inputPeerUserFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, user_id?: int}|array{_: 'inputPeerChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $peer The group where we intend to send messages @see https://docs.madelineproto.xyz/API_docs/types/InputPeer.html
     * 
     *
     * @return array{_: 'channels.sendAsPeers', peers: list<array{_: 'sendAsPeer', peer: array{_: 'peerUser', user_id: int}|array{_: 'peerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}}|array{_: 'peerChannel', channel_id: int}, premium_required: bool}>, chats: list<array{_: 'chatEmpty', id: int}|array{_: 'chat', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, deactivated: bool, call_active: bool, call_not_empty: bool, noforwards: bool, id: int, title: string, participants_count: int, date: int, version: int, migrated_to?: array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id: int, access_hash: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}, msg_id: int, channel_id: int}, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}}|array{_: 'chatForbidden', id: int, title: string}|array{_: 'channel', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, broadcast: bool, verified: bool, megagroup: bool, restricted: bool, signatures: bool, min: bool, scam: bool, has_link: bool, has_geo: bool, slowmode_enabled: bool, call_active: bool, call_not_empty: bool, fake: bool, gigagroup: bool, noforwards: bool, join_to_send: bool, join_request: bool, forum: bool, id: int, access_hash: int, title: string, username: string, date: int, restriction_reason: list<array{_: 'restrictionReason', platform: string, reason: string, text: string}>, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, participants_count: int, usernames: list<array{_: 'username', editable: bool, active: bool, username: string}>}|array{_: 'channelForbidden', broadcast: bool, megagroup: bool, id: int, access_hash: int, title: string, until_date: int}>, users: list<array{_: 'userEmpty', id: int}|array{_: 'user', self: bool, contact: bool, mutual_contact: bool, deleted: bool, bot: bool, bot_chat_history: bool, bot_nochats: bool, verified: bool, restricted: bool, min: bool, bot_inline_geo: bool, support: bool, scam: bool, apply_min_photo: bool, fake: bool, bot_attach_menu: bool, premium: bool, attach_menu_enabled: bool, id: int, access_hash: int, first_name: string, last_name: string, username: string, phone: string, photo?: array{_: 'userProfilePhotoEmpty'}|array{_: 'userProfilePhoto', has_video: bool, personal: bool, photo_id: int, stripped_thumb: string, dc_id: int}, status?: array{_: 'userStatusEmpty'}|array{_: 'userStatusOnline', expires: int}|array{_: 'userStatusOffline', was_online: int}|array{_: 'userStatusRecently'}|array{_: 'userStatusLastWeek'}|array{_: 'userStatusLastMonth'}, bot_info_version: int, restriction_reason: list<array{_: 'restrictionReason', platform: string, reason: string, text: string}>, bot_inline_placeholder: string, lang_code: string, emoji_status?: array{_: 'emojiStatusEmpty'}|array{_: 'emojiStatus', document_id: int}|array{_: 'emojiStatusUntil', document_id: int, until: int}, usernames: list<array{_: 'username', editable: bool, active: bool, username: string}>}>} @see https://docs.madelineproto.xyz/API_docs/types/channels.SendAsPeers.html
     */
    public function getSendAs(array $peer): array;

    /**
     * Delete all messages sent by a specific participant of a given supergroup
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel Supergroup @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}|array{_: 'inputPeerUserFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, user_id?: int}|array{_: 'inputPeerChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $participant The participant whose messages should be deleted @see https://docs.madelineproto.xyz/API_docs/types/InputPeer.html
     * 
     *
     * @return array{_: 'messages.affectedHistory', pts: int, pts_count: int, offset: int} @see https://docs.madelineproto.xyz/API_docs/types/messages.AffectedHistory.html
     */
    public function deleteParticipantHistory(array $channel, array $participant): array;

    /**
     * Set whether all users [should join a discussion group in order to comment on a post »](https://core.telegram.org/api/discussion#requiring-users-to-join-the-group)
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel Discussion group @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param bool $enabled Toggle
     * 
     *
     * @return array @see https://docs.madelineproto.xyz/API_docs/types/Updates.html
     */
    public function toggleJoinToSend(array $channel, bool $enabled): array;

    /**
     * Set whether all users should [request admin approval to join the group »](https://core.telegram.org/api/invites#join-requests).
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel Group @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param bool $enabled Toggle
     * 
     *
     * @return array @see https://docs.madelineproto.xyz/API_docs/types/Updates.html
     */
    public function toggleJoinRequest(array $channel, bool $enabled): array;

    /**
     * 
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param list<string>|array<never, never> $order 
     * 
     *
     * @return bool 
     */
    public function reorderUsernames(array $channel, array $order = []): bool;

    /**
     * 
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param bool $active 
     * 
     *
     * @param string $username 
     * 
     *
     * @return bool 
     */
    public function toggleUsername(array $channel, bool $active, string $username = ''): bool;

    /**
     * 
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @return bool 
     */
    public function deactivateAllUsernames(array $channel): bool;

    /**
     * 
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param bool $enabled 
     * 
     *
     * @return array @see https://docs.madelineproto.xyz/API_docs/types/Updates.html
     */
    public function toggleForum(array $channel, bool $enabled): array;

    /**
     * 
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param string $title 
     * 
     *
     * @param int $icon_color 
     * 
     *
     * @param int $icon_emoji_id 
     * 
     *
     * @param array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}|array{_: 'inputPeerUserFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, user_id?: int}|array{_: 'inputPeerChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int}|array<never, never> $send_as @see https://docs.madelineproto.xyz/API_docs/types/InputPeer.html
     * 
     *
     * @return array @see https://docs.madelineproto.xyz/API_docs/types/Updates.html
     */
    public function createForumTopic(array $channel, string $title = '', int $icon_color = 0, int $icon_emoji_id = 0, array $send_as = []): array;

    /**
     * 
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param string $q 
     * 
     *
     * @param int $offset_date 
     * 
     *
     * @param int $offset_id 
     * 
     *
     * @param int $offset_topic 
     * 
     *
     * @param int $limit 
     * 
     *
     * @return array{_: 'messages.forumTopics', order_by_create_date: bool, count: int, topics: list<array{_: 'forumTopicDeleted', id: int}|array{_: 'forumTopic', from_id: array{_: 'peerUser', user_id: int}|array{_: 'peerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}}|array{_: 'peerChannel', channel_id: int}, notify_settings: array{_: 'peerNotifySettings', show_previews?: bool, silent?: bool, mute_until: int, ios_sound?: array{_: 'notificationSoundDefault'}|array{_: 'notificationSoundNone'}|array{_: 'notificationSoundLocal', title: string, data: string}|array{_: 'notificationSoundRingtone', id: int}, android_sound?: array{_: 'notificationSoundDefault'}|array{_: 'notificationSoundNone'}|array{_: 'notificationSoundLocal', title: string, data: string}|array{_: 'notificationSoundRingtone', id: int}, other_sound?: array{_: 'notificationSoundDefault'}|array{_: 'notificationSoundNone'}|array{_: 'notificationSoundLocal', title: string, data: string}|array{_: 'notificationSoundRingtone', id: int}}, my: bool, closed: bool, pinned: bool, short: bool, hidden: bool, id: int, date: int, title: string, icon_color: int, icon_emoji_id: int, top_message: int, read_inbox_max_id: int, read_outbox_max_id: int, unread_count: int, unread_mentions_count: int, unread_reactions_count: int, draft?: array{_: 'draftMessageEmpty', date: int}|array{_: 'draftMessage', no_webpage: bool, reply_to_msg_id: int, message: string, entities: list<array{_: 'messageEntityUnknown', offset: int, length: int}|array{_: 'messageEntityMention', offset: int, length: int}|array{_: 'messageEntityHashtag', offset: int, length: int}|array{_: 'messageEntityBotCommand', offset: int, length: int}|array{_: 'messageEntityUrl', offset: int, length: int}|array{_: 'messageEntityEmail', offset: int, length: int}|array{_: 'messageEntityBold', offset: int, length: int}|array{_: 'messageEntityItalic', offset: int, length: int}|array{_: 'messageEntityCode', offset: int, length: int}|array{_: 'messageEntityPre', offset: int, length: int, language: string}|array{_: 'messageEntityTextUrl', offset: int, length: int, url: string}|array{_: 'messageEntityMentionName', offset: int, length: int, user_id: int}|array{_: 'inputMessageEntityMentionName', user_id: array{_: 'inputUserEmpty'}|array{_: 'inputUserSelf'}|array{_: 'inputUser', user_id: int, access_hash: int}|array{_: 'inputUserFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}, msg_id: int, user_id: int}, offset: int, length: int}|array{_: 'messageEntityPhone', offset: int, length: int}|array{_: 'messageEntityCashtag', offset: int, length: int}|array{_: 'messageEntityUnderline', offset: int, length: int}|array{_: 'messageEntityStrike', offset: int, length: int}|array{_: 'messageEntityBlockquote', offset: int, length: int}|array{_: 'messageEntityBankCard', offset: int, length: int}|array{_: 'messageEntitySpoiler', offset: int, length: int}|array{_: 'messageEntityCustomEmoji', offset: int, length: int, document_id: int}>, date: int}}>, messages: list<array{_: 'messageEmpty', id: int, peer_id?: array{_: 'peerUser', user_id: int}|array{_: 'peerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}}|array{_: 'peerChannel', channel_id: int}}|array{_: 'message', peer_id: array{_: 'peerUser', user_id: int}|array{_: 'peerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}}|array{_: 'peerChannel', channel_id: int}, out: bool, mentioned: bool, media_unread: bool, silent: bool, post: bool, from_scheduled: bool, legacy: bool, edit_hide: bool, pinned: bool, noforwards: bool, id: int, from_id?: array{_: 'peerUser', user_id: int}|array{_: 'peerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}}|array{_: 'peerChannel', channel_id: int}, fwd_from?: array{_: 'messageFwdHeader', imported: bool, from_id?: array{_: 'peerUser', user_id: int}|array{_: 'peerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}}|array{_: 'peerChannel', channel_id: int}, from_name: string, date: int, channel_post: int, post_author: string, saved_from_peer?: array{_: 'peerUser', user_id: int}|array{_: 'peerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}}|array{_: 'peerChannel', channel_id: int}, saved_from_msg_id: int, psa_type: string}, via_bot_id: int, reply_to?: array{_: 'messageReplyHeader', reply_to_scheduled: bool, forum_topic: bool, reply_to_msg_id: int, reply_to_peer_id?: array{_: 'peerUser', user_id: int}|array{_: 'peerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}}|array{_: 'peerChannel', channel_id: int}, reply_to_top_id: int}, date: int, message: string, media?: array{_: 'messageMediaEmpty'}|array{_: 'messageMediaPhoto', spoiler: bool, photo?: array{_: 'photoEmpty', id: int}|array{_: 'photo', has_stickers: bool, id: int, access_hash: int, file_reference: string, date: int, sizes: list<array{_: 'photoSizeEmpty', type: string}|array{_: 'photoSize', type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', type: string, w: int, h: int, bytes: string}|array{_: 'photoStrippedSize', type: string, bytes: string}|array{_: 'photoSizeProgressive', type: string, w: int, h: int, sizes: list<int>}|array{_: 'photoPathSize', type: string, bytes: string}|array{_: 'photoSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, bytes: string}>, video_sizes: list<array{_: 'videoSize', type: string, w: int, h: int, size: int, video_start_ts?: float}>, dc_id: int}, ttl_seconds: int}|array{_: 'messageMediaGeo', geo: array{_: 'geoPointEmpty'}|array{_: 'geoPoint', long: float, lat: float, access_hash: int, accuracy_radius: int}}|array{_: 'messageMediaContact', phone_number: string, first_name: string, last_name: string, vcard: string, user_id: int}|array{_: 'messageMediaUnsupported'}|array{_: 'messageMediaDocument', nopremium: bool, spoiler: bool, document?: array{_: 'documentEmpty', id: int}|array{_: 'document', id: int, access_hash: int, file_reference: string, date: int, mime_type: string, size: int, thumbs: list<array{_: 'photoSizeEmpty', type: string}|array{_: 'photoSize', type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', type: string, w: int, h: int, bytes: string}|array{_: 'photoStrippedSize', type: string, bytes: string}|array{_: 'photoSizeProgressive', type: string, w: int, h: int, sizes: list<int>}|array{_: 'photoPathSize', type: string, bytes: string}|array{_: 'photoSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, bytes: string}>, video_thumbs: list<array{_: 'videoSize', type: string, w: int, h: int, size: int, video_start_ts?: float}>, dc_id: int, attributes: list<array{_: 'documentAttributeImageSize', w: int, h: int}|array{_: 'documentAttributeAnimated'}|array{_: 'documentAttributeSticker', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, mask: bool, alt: string, mask_coords?: array{_: 'maskCoords', x: float, y: float, zoom: float, n: int}}|array{_: 'documentAttributeVideo', round_message: bool, supports_streaming: bool, duration: int, w: int, h: int}|array{_: 'documentAttributeAudio', voice: bool, duration: int, title: string, performer: string, waveform: string}|array{_: 'documentAttributeFilename', file_name: string}|array{_: 'documentAttributeHasStickers'}|array{_: 'documentAttributeCustomEmoji', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, free: bool, text_color: bool, alt: string}|array{_: 'documentAttributeSticker'}|array{_: 'documentAttributeVideo', duration: int, w: int, h: int}|array{_: 'documentAttributeAudio', duration: int}|array{_: 'documentAttributeSticker', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, alt: string}|array{_: 'documentAttributeAudio', duration: int, title: string, performer: string}>}, ttl_seconds: int}|array{_: 'messageMediaWebPage', webpage: array{_: 'webPageEmpty', id: int}|array{_: 'webPagePending', id: int, date: int}|array{_: 'webPage', id: int, url: string, display_url: string, hash: int, type: string, site_name: string, title: string, description: string, photo?: array{_: 'photoEmpty', id: int}|array{_: 'photo', has_stickers: bool, id: int, access_hash: int, file_reference: string, date: int, sizes: list<array{_: 'photoSizeEmpty', type: string}|array{_: 'photoSize', type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', type: string, w: int, h: int, bytes: string}|array{_: 'photoStrippedSize', type: string, bytes: string}|array{_: 'photoSizeProgressive', type: string, w: int, h: int, sizes: list<int>}|array{_: 'photoPathSize', type: string, bytes: string}|array{_: 'photoSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, bytes: string}>, video_sizes: list<array{_: 'videoSize', type: string, w: int, h: int, size: int, video_start_ts?: float}>, dc_id: int}, embed_url: string, embed_type: string, embed_width: int, embed_height: int, duration: int, author: string, document?: array{_: 'documentEmpty', id: int}|array{_: 'document', id: int, access_hash: int, file_reference: string, date: int, mime_type: string, size: int, thumbs: list<array{_: 'photoSizeEmpty', type: string}|array{_: 'photoSize', type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', type: string, w: int, h: int, bytes: string}|array{_: 'photoStrippedSize', type: string, bytes: string}|array{_: 'photoSizeProgressive', type: string, w: int, h: int, sizes: list<int>}|array{_: 'photoPathSize', type: string, bytes: string}|array{_: 'photoSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, bytes: string}>, video_thumbs: list<array{_: 'videoSize', type: string, w: int, h: int, size: int, video_start_ts?: float}>, dc_id: int, attributes: list<array{_: 'documentAttributeImageSize', w: int, h: int}|array{_: 'documentAttributeAnimated'}|array{_: 'documentAttributeSticker', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, mask: bool, alt: string, mask_coords?: array{_: 'maskCoords', x: float, y: float, zoom: float, n: int}}|array{_: 'documentAttributeVideo', round_message: bool, supports_streaming: bool, duration: int, w: int, h: int}|array{_: 'documentAttributeAudio', voice: bool, duration: int, title: string, performer: string, waveform: string}|array{_: 'documentAttributeFilename', file_name: string}|array{_: 'documentAttributeHasStickers'}|array{_: 'documentAttributeCustomEmoji', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, free: bool, text_color: bool, alt: string}|array{_: 'documentAttributeSticker'}|array{_: 'documentAttributeVideo', duration: int, w: int, h: int}|array{_: 'documentAttributeAudio', duration: int}|array{_: 'documentAttributeSticker', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, alt: string}|array{_: 'documentAttributeAudio', duration: int, title: string, performer: string}>}, cached_page?: array{_: 'page', part: bool, rtl: bool, v2: bool, url: string, blocks: list<array{_: 'pageBlockUnsupported'}|array{_: 'pageBlockTitle', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}|array{_: 'pageBlockSubtitle', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}|array{_: 'pageBlockAuthorDate', author: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, published_date: int}|array{_: 'pageBlockHeader', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}|array{_: 'pageBlockSubheader', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}|array{_: 'pageBlockParagraph', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}|array{_: 'pageBlockPreformatted', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, language: string}|array{_: 'pageBlockFooter', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}|array{_: 'pageBlockDivider'}|array{_: 'pageBlockAnchor', name: string}|array{_: 'pageBlockList', items: list<array{_: 'pageListItemText', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}>}|array{_: 'pageBlockBlockquote', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, caption: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}|array{_: 'pageBlockPullquote', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, caption: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}|array{_: 'pageBlockPhoto', caption: array{_: 'pageCaption', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, credit: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}, photo_id: int, url: string, webpage_id: int}|array{_: 'pageBlockVideo', caption: array{_: 'pageCaption', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, credit: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}, autoplay: bool, loop: bool, video_id: int}|array{_: 'pageBlockCover', cover: array{_: 'pageBlockUnsupported'}|array{_: 'pageBlockTitle', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}|array{_: 'pageBlockSubtitle', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}|array{_: 'pageBlockAuthorDate', author: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, published_date: int}|array{_: 'pageBlockHeader', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}|array{_: 'pageBlockSubheader', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}|array{_: 'pageBlockParagraph', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}|array{_: 'pageBlockPreformatted', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, language: string}|array{_: 'pageBlockFooter', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}|array{_: 'pageBlockDivider'}|array{_: 'pageBlockAnchor', name: string}|array{_: 'pageBlockList', items: list<array{_: 'pageListItemText', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}>}|array{_: 'pageBlockBlockquote', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, caption: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}|array{_: 'pageBlockPullquote', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, caption: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}|array{_: 'pageBlockPhoto', caption: array{_: 'pageCaption', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, credit: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}, photo_id: int, url: string, webpage_id: int}|array{_: 'pageBlockVideo', caption: array{_: 'pageCaption', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, credit: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}, autoplay: bool, loop: bool, video_id: int}|array{_: 'pageBlockEmbed', caption: array{_: 'pageCaption', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, credit: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}, full_width: bool, allow_scrolling: bool, url: string, html: string, poster_photo_id: int, w: int, h: int}|array{_: 'pageBlockChannel', channel: array{_: 'chatEmpty', id: int}|array{_: 'chat', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, deactivated: bool, call_active: bool, call_not_empty: bool, noforwards: bool, id: int, title: string, participants_count: int, date: int, version: int, migrated_to?: array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id: int, access_hash: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}, msg_id: int, channel_id: int}, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}}|array{_: 'chatForbidden', id: int, title: string}|array{_: 'channel', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, broadcast: bool, verified: bool, megagroup: bool, restricted: bool, signatures: bool, min: bool, scam: bool, has_link: bool, has_geo: bool, slowmode_enabled: bool, call_active: bool, call_not_empty: bool, fake: bool, gigagroup: bool, noforwards: bool, join_to_send: bool, join_request: bool, forum: bool, id: int, access_hash: int, title: string, username: string, date: int, restriction_reason: list<array{_: 'restrictionReason', platform: string, reason: string, text: string}>, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, participants_count: int, usernames: list<array{_: 'username', editable: bool, active: bool, username: string}>}|array{_: 'channelForbidden', broadcast: bool, megagroup: bool, id: int, access_hash: int, title: string, until_date: int}}|array{_: 'pageBlockAudio', caption: array{_: 'pageCaption', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, credit: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}, audio_id: int}|array{_: 'pageBlockKicker', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}|array{_: 'pageBlockTable', title: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, bordered: bool, striped: bool, rows: list<array{_: 'pageTableRow', cells: list<array{_: 'pageTableCell', header: bool, align_center: bool, align_right: bool, valign_middle: bool, valign_bottom: bool, text?: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, colspan: int, rowspan: int}>}>}|array{_: 'pageBlockOrderedList', items: list<array{_: 'pageListOrderedItemText', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, num: string}>}|array{_: 'pageBlockRelatedArticles', title: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, articles: list<array{_: 'pageRelatedArticle', url: string, webpage_id: int, title: string, description: string, photo_id: int, author: string, published_date: int}>}|array{_: 'pageBlockMap', geo: array{_: 'geoPointEmpty'}|array{_: 'geoPoint', long: float, lat: float, access_hash: int, accuracy_radius: int}, caption: array{_: 'pageCaption', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, credit: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}, zoom: int, w: int, h: int}}|array{_: 'pageBlockEmbed', caption: array{_: 'pageCaption', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, credit: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}, full_width: bool, allow_scrolling: bool, url: string, html: string, poster_photo_id: int, w: int, h: int}|array{_: 'pageBlockChannel', channel: array{_: 'chatEmpty', id: int}|array{_: 'chat', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, deactivated: bool, call_active: bool, call_not_empty: bool, noforwards: bool, id: int, title: string, participants_count: int, date: int, version: int, migrated_to?: array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id: int, access_hash: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}, msg_id: int, channel_id: int}, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}}|array{_: 'chatForbidden', id: int, title: string}|array{_: 'channel', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, broadcast: bool, verified: bool, megagroup: bool, restricted: bool, signatures: bool, min: bool, scam: bool, has_link: bool, has_geo: bool, slowmode_enabled: bool, call_active: bool, call_not_empty: bool, fake: bool, gigagroup: bool, noforwards: bool, join_to_send: bool, join_request: bool, forum: bool, id: int, access_hash: int, title: string, username: string, date: int, restriction_reason: list<array{_: 'restrictionReason', platform: string, reason: string, text: string}>, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, participants_count: int, usernames: list<array{_: 'username', editable: bool, active: bool, username: string}>}|array{_: 'channelForbidden', broadcast: bool, megagroup: bool, id: int, access_hash: int, title: string, until_date: int}}|array{_: 'pageBlockAudio', caption: array{_: 'pageCaption', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, credit: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}, audio_id: int}|array{_: 'pageBlockKicker', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}|array{_: 'pageBlockTable', title: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, bordered: bool, striped: bool, rows: list<array{_: 'pageTableRow', cells: list<array{_: 'pageTableCell', header: bool, align_center: bool, align_right: bool, valign_middle: bool, valign_bottom: bool, text?: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, colspan: int, rowspan: int}>}>}|array{_: 'pageBlockOrderedList', items: list<array{_: 'pageListOrderedItemText', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, num: string}>}|array{_: 'pageBlockRelatedArticles', title: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, articles: list<array{_: 'pageRelatedArticle', url: string, webpage_id: int, title: string, description: string, photo_id: int, author: string, published_date: int}>}|array{_: 'pageBlockMap', geo: array{_: 'geoPointEmpty'}|array{_: 'geoPoint', long: float, lat: float, access_hash: int, accuracy_radius: int}, caption: array{_: 'pageCaption', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, credit: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}, zoom: int, w: int, h: int}>, photos: list<array{_: 'photoEmpty', id: int}|array{_: 'photo', has_stickers: bool, id: int, access_hash: int, file_reference: string, date: int, sizes: list<array{_: 'photoSizeEmpty', type: string}|array{_: 'photoSize', type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', type: string, w: int, h: int, bytes: string}|array{_: 'photoStrippedSize', type: string, bytes: string}|array{_: 'photoSizeProgressive', type: string, w: int, h: int, sizes: list<int>}|array{_: 'photoPathSize', type: string, bytes: string}|array{_: 'photoSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, bytes: string}>, video_sizes: list<array{_: 'videoSize', type: string, w: int, h: int, size: int, video_start_ts?: float}>, dc_id: int}>, documents: list<array{_: 'documentEmpty', id: int}|array{_: 'document', id: int, access_hash: int, file_reference: string, date: int, mime_type: string, size: int, thumbs: list<array{_: 'photoSizeEmpty', type: string}|array{_: 'photoSize', type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', type: string, w: int, h: int, bytes: string}|array{_: 'photoStrippedSize', type: string, bytes: string}|array{_: 'photoSizeProgressive', type: string, w: int, h: int, sizes: list<int>}|array{_: 'photoPathSize', type: string, bytes: string}|array{_: 'photoSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, bytes: string}>, video_thumbs: list<array{_: 'videoSize', type: string, w: int, h: int, size: int, video_start_ts?: float}>, dc_id: int, attributes: list<array{_: 'documentAttributeImageSize', w: int, h: int}|array{_: 'documentAttributeAnimated'}|array{_: 'documentAttributeSticker', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, mask: bool, alt: string, mask_coords?: array{_: 'maskCoords', x: float, y: float, zoom: float, n: int}}|array{_: 'documentAttributeVideo', round_message: bool, supports_streaming: bool, duration: int, w: int, h: int}|array{_: 'documentAttributeAudio', voice: bool, duration: int, title: string, performer: string, waveform: string}|array{_: 'documentAttributeFilename', file_name: string}|array{_: 'documentAttributeHasStickers'}|array{_: 'documentAttributeCustomEmoji', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, free: bool, text_color: bool, alt: string}|array{_: 'documentAttributeSticker'}|array{_: 'documentAttributeVideo', duration: int, w: int, h: int}|array{_: 'documentAttributeAudio', duration: int}|array{_: 'documentAttributeSticker', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, alt: string}|array{_: 'documentAttributeAudio', duration: int, title: string, performer: string}>}>, views: int}, attributes: list<array{_: 'webPageAttributeTheme', documents: list<array{_: 'documentEmpty', id: int}|array{_: 'document', id: int, access_hash: int, file_reference: string, date: int, mime_type: string, size: int, thumbs: list<array{_: 'photoSizeEmpty', type: string}|array{_: 'photoSize', type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', type: string, w: int, h: int, bytes: string}|array{_: 'photoStrippedSize', type: string, bytes: string}|array{_: 'photoSizeProgressive', type: string, w: int, h: int, sizes: list<int>}|array{_: 'photoPathSize', type: string, bytes: string}|array{_: 'photoSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, bytes: string}>, video_thumbs: list<array{_: 'videoSize', type: string, w: int, h: int, size: int, video_start_ts?: float}>, dc_id: int, attributes: list<array{_: 'documentAttributeImageSize', w: int, h: int}|array{_: 'documentAttributeAnimated'}|array{_: 'documentAttributeSticker', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, mask: bool, alt: string, mask_coords?: array{_: 'maskCoords', x: float, y: float, zoom: float, n: int}}|array{_: 'documentAttributeVideo', round_message: bool, supports_streaming: bool, duration: int, w: int, h: int}|array{_: 'documentAttributeAudio', voice: bool, duration: int, title: string, performer: string, waveform: string}|array{_: 'documentAttributeFilename', file_name: string}|array{_: 'documentAttributeHasStickers'}|array{_: 'documentAttributeCustomEmoji', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, free: bool, text_color: bool, alt: string}|array{_: 'documentAttributeSticker'}|array{_: 'documentAttributeVideo', duration: int, w: int, h: int}|array{_: 'documentAttributeAudio', duration: int}|array{_: 'documentAttributeSticker', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, alt: string}|array{_: 'documentAttributeAudio', duration: int, title: string, performer: string}>}>, settings?: array{_: 'themeSettings', base_theme: array{_: 'baseThemeClassic'}|array{_: 'baseThemeDay'}|array{_: 'baseThemeNight'}|array{_: 'baseThemeTinted'}|array{_: 'baseThemeArctic'}, message_colors_animated: bool, accent_color: int, outbox_accent_color: int, message_colors: list<int>, wallpaper?: array{_: 'wallPaper', document: array{_: 'documentEmpty', id: int}|array{_: 'document', id: int, access_hash: int, file_reference: string, date: int, mime_type: string, size: int, thumbs: list<array{_: 'photoSizeEmpty', type: string}|array{_: 'photoSize', type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', type: string, w: int, h: int, bytes: string}|array{_: 'photoStrippedSize', type: string, bytes: string}|array{_: 'photoSizeProgressive', type: string, w: int, h: int, sizes: list<int>}|array{_: 'photoPathSize', type: string, bytes: string}|array{_: 'photoSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, bytes: string}>, video_thumbs: list<array{_: 'videoSize', type: string, w: int, h: int, size: int, video_start_ts?: float}>, dc_id: int, attributes: list<array{_: 'documentAttributeImageSize', w: int, h: int}|array{_: 'documentAttributeAnimated'}|array{_: 'documentAttributeSticker', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, mask: bool, alt: string, mask_coords?: array{_: 'maskCoords', x: float, y: float, zoom: float, n: int}}|array{_: 'documentAttributeVideo', round_message: bool, supports_streaming: bool, duration: int, w: int, h: int}|array{_: 'documentAttributeAudio', voice: bool, duration: int, title: string, performer: string, waveform: string}|array{_: 'documentAttributeFilename', file_name: string}|array{_: 'documentAttributeHasStickers'}|array{_: 'documentAttributeCustomEmoji', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, free: bool, text_color: bool, alt: string}|array{_: 'documentAttributeSticker'}|array{_: 'documentAttributeVideo', duration: int, w: int, h: int}|array{_: 'documentAttributeAudio', duration: int}|array{_: 'documentAttributeSticker', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, alt: string}|array{_: 'documentAttributeAudio', duration: int, title: string, performer: string}>}, id: int, creator: bool, default: bool, pattern: bool, dark: bool, access_hash: int, slug: string, settings?: array{_: 'wallPaperSettings', blur: bool, motion: bool, background_color: int, second_background_color: int, third_background_color: int, fourth_background_color: int, intensity: int, rotation: int}}|array{_: 'wallPaperNoFile', id: int, default: bool, dark: bool, settings?: array{_: 'wallPaperSettings', blur: bool, motion: bool, background_color: int, second_background_color: int, third_background_color: int, fourth_background_color: int, intensity: int, rotation: int}}}}>}|array{_: 'webPageNotModified', cached_page_views: int}}|array{_: 'messageMediaVenue', geo: array{_: 'geoPointEmpty'}|array{_: 'geoPoint', long: float, lat: float, access_hash: int, accuracy_radius: int}, title: string, address: string, provider: string, venue_id: string, venue_type: string}|array{_: 'messageMediaGame', game: array{_: 'game', photo: array{_: 'photoEmpty', id: int}|array{_: 'photo', has_stickers: bool, id: int, access_hash: int, file_reference: string, date: int, sizes: list<array{_: 'photoSizeEmpty', type: string}|array{_: 'photoSize', type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', type: string, w: int, h: int, bytes: string}|array{_: 'photoStrippedSize', type: string, bytes: string}|array{_: 'photoSizeProgressive', type: string, w: int, h: int, sizes: list<int>}|array{_: 'photoPathSize', type: string, bytes: string}|array{_: 'photoSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, bytes: string}>, video_sizes: list<array{_: 'videoSize', type: string, w: int, h: int, size: int, video_start_ts?: float}>, dc_id: int}, id: int, access_hash: int, short_name: string, title: string, description: string, document?: array{_: 'documentEmpty', id: int}|array{_: 'document', id: int, access_hash: int, file_reference: string, date: int, mime_type: string, size: int, thumbs: list<array{_: 'photoSizeEmpty', type: string}|array{_: 'photoSize', type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', type: string, w: int, h: int, bytes: string}|array{_: 'photoStrippedSize', type: string, bytes: string}|array{_: 'photoSizeProgressive', type: string, w: int, h: int, sizes: list<int>}|array{_: 'photoPathSize', type: string, bytes: string}|array{_: 'photoSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, bytes: string}>, video_thumbs: list<array{_: 'videoSize', type: string, w: int, h: int, size: int, video_start_ts?: float}>, dc_id: int, attributes: list<array{_: 'documentAttributeImageSize', w: int, h: int}|array{_: 'documentAttributeAnimated'}|array{_: 'documentAttributeSticker', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, mask: bool, alt: string, mask_coords?: array{_: 'maskCoords', x: float, y: float, zoom: float, n: int}}|array{_: 'documentAttributeVideo', round_message: bool, supports_streaming: bool, duration: int, w: int, h: int}|array{_: 'documentAttributeAudio', voice: bool, duration: int, title: string, performer: string, waveform: string}|array{_: 'documentAttributeFilename', file_name: string}|array{_: 'documentAttributeHasStickers'}|array{_: 'documentAttributeCustomEmoji', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, free: bool, text_color: bool, alt: string}|array{_: 'documentAttributeSticker'}|array{_: 'documentAttributeVideo', duration: int, w: int, h: int}|array{_: 'documentAttributeAudio', duration: int}|array{_: 'documentAttributeSticker', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, alt: string}|array{_: 'documentAttributeAudio', duration: int, title: string, performer: string}>}}}|array{_: 'messageMediaInvoice', shipping_address_requested: bool, test: bool, title: string, description: string, photo?: array{_: 'webDocument', url: string, access_hash: int, size: int, mime_type: string, attributes: list<array{_: 'documentAttributeImageSize', w: int, h: int}|array{_: 'documentAttributeAnimated'}|array{_: 'documentAttributeSticker', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, mask: bool, alt: string, mask_coords?: array{_: 'maskCoords', x: float, y: float, zoom: float, n: int}}|array{_: 'documentAttributeVideo', round_message: bool, supports_streaming: bool, duration: int, w: int, h: int}|array{_: 'documentAttributeAudio', voice: bool, duration: int, title: string, performer: string, waveform: string}|array{_: 'documentAttributeFilename', file_name: string}|array{_: 'documentAttributeHasStickers'}|array{_: 'documentAttributeCustomEmoji', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, free: bool, text_color: bool, alt: string}|array{_: 'documentAttributeSticker'}|array{_: 'documentAttributeVideo', duration: int, w: int, h: int}|array{_: 'documentAttributeAudio', duration: int}|array{_: 'documentAttributeSticker', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, alt: string}|array{_: 'documentAttributeAudio', duration: int, title: string, performer: string}>}|array{_: 'webDocumentNoProxy', url: string, size: int, mime_type: string, attributes: list<array{_: 'documentAttributeImageSize', w: int, h: int}|array{_: 'documentAttributeAnimated'}|array{_: 'documentAttributeSticker', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, mask: bool, alt: string, mask_coords?: array{_: 'maskCoords', x: float, y: float, zoom: float, n: int}}|array{_: 'documentAttributeVideo', round_message: bool, supports_streaming: bool, duration: int, w: int, h: int}|array{_: 'documentAttributeAudio', voice: bool, duration: int, title: string, performer: string, waveform: string}|array{_: 'documentAttributeFilename', file_name: string}|array{_: 'documentAttributeHasStickers'}|array{_: 'documentAttributeCustomEmoji', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, free: bool, text_color: bool, alt: string}|array{_: 'documentAttributeSticker'}|array{_: 'documentAttributeVideo', duration: int, w: int, h: int}|array{_: 'documentAttributeAudio', duration: int}|array{_: 'documentAttributeSticker', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, alt: string}|array{_: 'documentAttributeAudio', duration: int, title: string, performer: string}>}, receipt_msg_id: int, currency: string, total_amount: int, start_param: string, extended_media?: array{_: 'messageExtendedMediaPreview', w: int, h: int, thumb?: array{_: 'photoSizeEmpty', type: string}|array{_: 'photoSize', type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', type: string, w: int, h: int, bytes: string}|array{_: 'photoStrippedSize', type: string, bytes: string}|array{_: 'photoSizeProgressive', type: string, w: int, h: int, sizes: list<int>}|array{_: 'photoPathSize', type: string, bytes: string}|array{_: 'photoSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, bytes: string}, video_duration: int}}|array{_: 'messageMediaGeoLive', geo: array{_: 'geoPointEmpty'}|array{_: 'geoPoint', long: float, lat: float, access_hash: int, accuracy_radius: int}, heading: int, period: int, proximity_notification_radius: int}|array{_: 'messageMediaPoll', poll: array{_: 'poll', id: int, closed: bool, public_voters: bool, multiple_choice: bool, quiz: bool, question: string, answers: list<array{_: 'pollAnswer', text: string, option: string}>, close_period: int, close_date: int}, results: array{_: 'pollResults', min: bool, results: list<array{_: 'pollAnswerVoters', chosen: bool, correct: bool, option: string, voters: int}>, total_voters: int, recent_voters: list<int>, solution: string, solution_entities: list<array{_: 'messageEntityUnknown', offset: int, length: int}|array{_: 'messageEntityMention', offset: int, length: int}|array{_: 'messageEntityHashtag', offset: int, length: int}|array{_: 'messageEntityBotCommand', offset: int, length: int}|array{_: 'messageEntityUrl', offset: int, length: int}|array{_: 'messageEntityEmail', offset: int, length: int}|array{_: 'messageEntityBold', offset: int, length: int}|array{_: 'messageEntityItalic', offset: int, length: int}|array{_: 'messageEntityCode', offset: int, length: int}|array{_: 'messageEntityPre', offset: int, length: int, language: string}|array{_: 'messageEntityTextUrl', offset: int, length: int, url: string}|array{_: 'messageEntityMentionName', offset: int, length: int, user_id: int}|array{_: 'inputMessageEntityMentionName', user_id: array{_: 'inputUserEmpty'}|array{_: 'inputUserSelf'}|array{_: 'inputUser', user_id: int, access_hash: int}|array{_: 'inputUserFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}, msg_id: int, user_id: int}, offset: int, length: int}|array{_: 'messageEntityPhone', offset: int, length: int}|array{_: 'messageEntityCashtag', offset: int, length: int}|array{_: 'messageEntityUnderline', offset: int, length: int}|array{_: 'messageEntityStrike', offset: int, length: int}|array{_: 'messageEntityBlockquote', offset: int, length: int}|array{_: 'messageEntityBankCard', offset: int, length: int}|array{_: 'messageEntitySpoiler', offset: int, length: int}|array{_: 'messageEntityCustomEmoji', offset: int, length: int, document_id: int}>}}|array{_: 'messageMediaDice', value: int, emoticon: string}, reply_markup?: array{_: 'replyKeyboardHide', selective: bool}|array{_: 'replyKeyboardForceReply', single_use: bool, selective: bool, placeholder: string}|array{_: 'replyKeyboardMarkup', resize: bool, single_use: bool, selective: bool, persistent: bool, rows: list<array{_: 'keyboardButtonRow', buttons: list<array>}>, placeholder: string}|array{_: 'replyInlineMarkup', rows: list<array{_: 'keyboardButtonRow', buttons: list<array>}>}, entities: list<array{_: 'messageEntityUnknown', offset: int, length: int}|array{_: 'messageEntityMention', offset: int, length: int}|array{_: 'messageEntityHashtag', offset: int, length: int}|array{_: 'messageEntityBotCommand', offset: int, length: int}|array{_: 'messageEntityUrl', offset: int, length: int}|array{_: 'messageEntityEmail', offset: int, length: int}|array{_: 'messageEntityBold', offset: int, length: int}|array{_: 'messageEntityItalic', offset: int, length: int}|array{_: 'messageEntityCode', offset: int, length: int}|array{_: 'messageEntityPre', offset: int, length: int, language: string}|array{_: 'messageEntityTextUrl', offset: int, length: int, url: string}|array{_: 'messageEntityMentionName', offset: int, length: int, user_id: int}|array{_: 'inputMessageEntityMentionName', user_id: array{_: 'inputUserEmpty'}|array{_: 'inputUserSelf'}|array{_: 'inputUser', user_id: int, access_hash: int}|array{_: 'inputUserFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}, msg_id: int, user_id: int}, offset: int, length: int}|array{_: 'messageEntityPhone', offset: int, length: int}|array{_: 'messageEntityCashtag', offset: int, length: int}|array{_: 'messageEntityUnderline', offset: int, length: int}|array{_: 'messageEntityStrike', offset: int, length: int}|array{_: 'messageEntityBlockquote', offset: int, length: int}|array{_: 'messageEntityBankCard', offset: int, length: int}|array{_: 'messageEntitySpoiler', offset: int, length: int}|array{_: 'messageEntityCustomEmoji', offset: int, length: int, document_id: int}>, views: int, forwards: int, replies?: array{_: 'messageReplies', comments: bool, replies: int, replies_pts: int, recent_repliers: list<array{_: 'peerUser', user_id: int}|array{_: 'peerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}}|array{_: 'peerChannel', channel_id: int}>, channel_id: int, max_id: int, read_max_id: int}, edit_date: int, post_author: string, grouped_id: int, reactions?: array{_: 'messageReactions', min: bool, can_see_list: bool, results: list<array{_: 'reactionCount', reaction: array{_: 'reactionEmpty'}|array{_: 'reactionEmoji', emoticon: string}|array{_: 'reactionCustomEmoji', document_id: int}, chosen_order: int, count: int}>, recent_reactions: list<array{_: 'messagePeerReaction', peer_id: array{_: 'peerUser', user_id: int}|array{_: 'peerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}}|array{_: 'peerChannel', channel_id: int}, reaction: array{_: 'reactionEmpty'}|array{_: 'reactionEmoji', emoticon: string}|array{_: 'reactionCustomEmoji', document_id: int}, big: bool, unread: bool}>}, restriction_reason: list<array{_: 'restrictionReason', platform: string, reason: string, text: string}>, ttl_period: int}|array{_: 'messageService', peer_id: array{_: 'peerUser', user_id: int}|array{_: 'peerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}}|array{_: 'peerChannel', channel_id: int}, action: array{_: 'messageActionEmpty'}|array{_: 'messageActionChatCreate', title: string, users: list<int>}|array{_: 'messageActionChatEditTitle', title: string}|array{_: 'messageActionChatEditPhoto', photo: array{_: 'photoEmpty', id: int}|array{_: 'photo', has_stickers: bool, id: int, access_hash: int, file_reference: string, date: int, sizes: list<array{_: 'photoSizeEmpty', type: string}|array{_: 'photoSize', type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', type: string, w: int, h: int, bytes: string}|array{_: 'photoStrippedSize', type: string, bytes: string}|array{_: 'photoSizeProgressive', type: string, w: int, h: int, sizes: list<int>}|array{_: 'photoPathSize', type: string, bytes: string}|array{_: 'photoSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, bytes: string}>, video_sizes: list<array{_: 'videoSize', type: string, w: int, h: int, size: int, video_start_ts?: float}>, dc_id: int}}|array{_: 'messageActionChatDeletePhoto'}|array{_: 'messageActionChatAddUser', users: list<int>}|array{_: 'messageActionChatDeleteUser', user_id: int}|array{_: 'messageActionChatJoinedByLink', inviter_id: int}|array{_: 'messageActionChannelCreate', title: string}|array{_: 'messageActionChatMigrateTo', channel_id: int}|array{_: 'messageActionChannelMigrateFrom', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}, title: string}|array{_: 'messageActionPinMessage'}|array{_: 'messageActionHistoryClear'}|array{_: 'messageActionGameScore', game_id: int, score: int}|array{_: 'messageActionPaymentSentMe', charge: array{_: 'paymentCharge', id: string, provider_charge_id: string}, recurring_init: bool, recurring_used: bool, currency: string, total_amount: int, payload: string, info?: array{_: 'paymentRequestedInfo', name: string, phone: string, email: string, shipping_address?: array{_: 'postAddress', street_line1: string, street_line2: string, city: string, state: string, country_iso2: string, post_code: string}}, shipping_option_id: string}|array{_: 'messageActionPaymentSent', recurring_init: bool, recurring_used: bool, currency: string, total_amount: int, invoice_slug: string}|array{_: 'messageActionPhoneCall', video: bool, call_id: int, reason?: array{_: 'phoneCallDiscardReasonMissed'}|array{_: 'phoneCallDiscardReasonDisconnect'}|array{_: 'phoneCallDiscardReasonHangup'}|array{_: 'phoneCallDiscardReasonBusy'}, duration: int}|array{_: 'messageActionScreenshotTaken'}|array{_: 'messageActionCustomAction', message: string}|array{_: 'messageActionBotAllowed', domain: string}|array{_: 'messageActionSecureValuesSentMe', credentials: array{_: 'secureCredentialsEncrypted', data: string, hash: string, secret: string}, values: list<array{_: 'secureValue', type: array{_: 'secureValueTypePersonalDetails'}|array{_: 'secureValueTypePassport'}|array{_: 'secureValueTypeDriverLicense'}|array{_: 'secureValueTypeIdentityCard'}|array{_: 'secureValueTypeInternalPassport'}|array{_: 'secureValueTypeAddress'}|array{_: 'secureValueTypeUtilityBill'}|array{_: 'secureValueTypeBankStatement'}|array{_: 'secureValueTypeRentalAgreement'}|array{_: 'secureValueTypePassportRegistration'}|array{_: 'secureValueTypeTemporaryRegistration'}|array{_: 'secureValueTypePhone'}|array{_: 'secureValueTypeEmail'}, data?: array{_: 'secureData', data: string, data_hash: string, secret: string}, front_side?: array{_: 'secureFileEmpty'}|array{_: 'secureFile', id: int, access_hash: int, size: int, dc_id: int, date: int, file_hash: string, secret: string}, reverse_side?: array{_: 'secureFileEmpty'}|array{_: 'secureFile', id: int, access_hash: int, size: int, dc_id: int, date: int, file_hash: string, secret: string}, selfie?: array{_: 'secureFileEmpty'}|array{_: 'secureFile', id: int, access_hash: int, size: int, dc_id: int, date: int, file_hash: string, secret: string}, translation: list<array{_: 'secureFileEmpty'}|array{_: 'secureFile', id: int, access_hash: int, size: int, dc_id: int, date: int, file_hash: string, secret: string}>, files: list<array{_: 'secureFileEmpty'}|array{_: 'secureFile', id: int, access_hash: int, size: int, dc_id: int, date: int, file_hash: string, secret: string}>, plain_data?: array{_: 'securePlainPhone', phone: string}|array{_: 'securePlainEmail', email: string}, hash: string}>}|array{_: 'messageActionSecureValuesSent', types: list<array{_: 'secureValueTypePersonalDetails'}|array{_: 'secureValueTypePassport'}|array{_: 'secureValueTypeDriverLicense'}|array{_: 'secureValueTypeIdentityCard'}|array{_: 'secureValueTypeInternalPassport'}|array{_: 'secureValueTypeAddress'}|array{_: 'secureValueTypeUtilityBill'}|array{_: 'secureValueTypeBankStatement'}|array{_: 'secureValueTypeRentalAgreement'}|array{_: 'secureValueTypePassportRegistration'}|array{_: 'secureValueTypeTemporaryRegistration'}|array{_: 'secureValueTypePhone'}|array{_: 'secureValueTypeEmail'}>}|array{_: 'messageActionContactSignUp'}|array{_: 'messageActionGeoProximityReached', from_id: array{_: 'peerUser', user_id: int}|array{_: 'peerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}}|array{_: 'peerChannel', channel_id: int}, to_id: array{_: 'peerUser', user_id: int}|array{_: 'peerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}}|array{_: 'peerChannel', channel_id: int}, distance: int}|array{_: 'messageActionGroupCall', call: array{_: 'inputGroupCall', id: int, access_hash: int}, duration: int}|array{_: 'messageActionInviteToGroupCall', call: array{_: 'inputGroupCall', id: int, access_hash: int}, users: list<int>}|array{_: 'messageActionSetMessagesTTL', period: int, auto_setting_from: int}|array{_: 'messageActionGroupCallScheduled', call: array{_: 'inputGroupCall', id: int, access_hash: int}, schedule_date: int}|array{_: 'messageActionSetChatTheme', emoticon: string}|array{_: 'messageActionChatJoinedByRequest'}|array{_: 'messageActionWebViewDataSentMe', text: string, data: string}|array{_: 'messageActionWebViewDataSent', text: string}|array{_: 'messageActionGiftPremium', currency: string, amount: int, months: int}|array{_: 'messageActionTopicCreate', title: string, icon_color: int, icon_emoji_id: int}|array{_: 'messageActionTopicEdit', title: string, icon_emoji_id: int, closed?: bool, hidden?: bool}|array{_: 'messageActionSuggestProfilePhoto', photo: array{_: 'photoEmpty', id: int}|array{_: 'photo', has_stickers: bool, id: int, access_hash: int, file_reference: string, date: int, sizes: list<array{_: 'photoSizeEmpty', type: string}|array{_: 'photoSize', type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', type: string, w: int, h: int, bytes: string}|array{_: 'photoStrippedSize', type: string, bytes: string}|array{_: 'photoSizeProgressive', type: string, w: int, h: int, sizes: list<int>}|array{_: 'photoPathSize', type: string, bytes: string}|array{_: 'photoSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, bytes: string}>, video_sizes: list<array{_: 'videoSize', type: string, w: int, h: int, size: int, video_start_ts?: float}>, dc_id: int}}|array{_: 'messageActionAttachMenuBotAllowed'}, out: bool, mentioned: bool, media_unread: bool, silent: bool, post: bool, legacy: bool, id: int, from_id?: array{_: 'peerUser', user_id: int}|array{_: 'peerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}}|array{_: 'peerChannel', channel_id: int}, reply_to?: array{_: 'messageReplyHeader', reply_to_scheduled: bool, forum_topic: bool, reply_to_msg_id: int, reply_to_peer_id?: array{_: 'peerUser', user_id: int}|array{_: 'peerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}}|array{_: 'peerChannel', channel_id: int}, reply_to_top_id: int}, date: int, ttl_period: int}>, chats: list<array{_: 'chatEmpty', id: int}|array{_: 'chat', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, deactivated: bool, call_active: bool, call_not_empty: bool, noforwards: bool, id: int, title: string, participants_count: int, date: int, version: int, migrated_to?: array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id: int, access_hash: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}, msg_id: int, channel_id: int}, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}}|array{_: 'chatForbidden', id: int, title: string}|array{_: 'channel', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, broadcast: bool, verified: bool, megagroup: bool, restricted: bool, signatures: bool, min: bool, scam: bool, has_link: bool, has_geo: bool, slowmode_enabled: bool, call_active: bool, call_not_empty: bool, fake: bool, gigagroup: bool, noforwards: bool, join_to_send: bool, join_request: bool, forum: bool, id: int, access_hash: int, title: string, username: string, date: int, restriction_reason: list<array{_: 'restrictionReason', platform: string, reason: string, text: string}>, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, participants_count: int, usernames: list<array{_: 'username', editable: bool, active: bool, username: string}>}|array{_: 'channelForbidden', broadcast: bool, megagroup: bool, id: int, access_hash: int, title: string, until_date: int}>, users: list<array{_: 'userEmpty', id: int}|array{_: 'user', self: bool, contact: bool, mutual_contact: bool, deleted: bool, bot: bool, bot_chat_history: bool, bot_nochats: bool, verified: bool, restricted: bool, min: bool, bot_inline_geo: bool, support: bool, scam: bool, apply_min_photo: bool, fake: bool, bot_attach_menu: bool, premium: bool, attach_menu_enabled: bool, id: int, access_hash: int, first_name: string, last_name: string, username: string, phone: string, photo?: array{_: 'userProfilePhotoEmpty'}|array{_: 'userProfilePhoto', has_video: bool, personal: bool, photo_id: int, stripped_thumb: string, dc_id: int}, status?: array{_: 'userStatusEmpty'}|array{_: 'userStatusOnline', expires: int}|array{_: 'userStatusOffline', was_online: int}|array{_: 'userStatusRecently'}|array{_: 'userStatusLastWeek'}|array{_: 'userStatusLastMonth'}, bot_info_version: int, restriction_reason: list<array{_: 'restrictionReason', platform: string, reason: string, text: string}>, bot_inline_placeholder: string, lang_code: string, emoji_status?: array{_: 'emojiStatusEmpty'}|array{_: 'emojiStatus', document_id: int}|array{_: 'emojiStatusUntil', document_id: int, until: int}, usernames: list<array{_: 'username', editable: bool, active: bool, username: string}>}>, pts: int} @see https://docs.madelineproto.xyz/API_docs/types/messages.ForumTopics.html
     */
    public function getForumTopics(array $channel, string $q = '', int $offset_date = 0, int $offset_id = 0, int $offset_topic = 0, int $limit = 0): array;

    /**
     * 
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param list<int>|array<never, never> $topics 
     * 
     *
     * @return array{_: 'messages.forumTopics', order_by_create_date: bool, count: int, topics: list<array{_: 'forumTopicDeleted', id: int}|array{_: 'forumTopic', from_id: array{_: 'peerUser', user_id: int}|array{_: 'peerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}}|array{_: 'peerChannel', channel_id: int}, notify_settings: array{_: 'peerNotifySettings', show_previews?: bool, silent?: bool, mute_until: int, ios_sound?: array{_: 'notificationSoundDefault'}|array{_: 'notificationSoundNone'}|array{_: 'notificationSoundLocal', title: string, data: string}|array{_: 'notificationSoundRingtone', id: int}, android_sound?: array{_: 'notificationSoundDefault'}|array{_: 'notificationSoundNone'}|array{_: 'notificationSoundLocal', title: string, data: string}|array{_: 'notificationSoundRingtone', id: int}, other_sound?: array{_: 'notificationSoundDefault'}|array{_: 'notificationSoundNone'}|array{_: 'notificationSoundLocal', title: string, data: string}|array{_: 'notificationSoundRingtone', id: int}}, my: bool, closed: bool, pinned: bool, short: bool, hidden: bool, id: int, date: int, title: string, icon_color: int, icon_emoji_id: int, top_message: int, read_inbox_max_id: int, read_outbox_max_id: int, unread_count: int, unread_mentions_count: int, unread_reactions_count: int, draft?: array{_: 'draftMessageEmpty', date: int}|array{_: 'draftMessage', no_webpage: bool, reply_to_msg_id: int, message: string, entities: list<array{_: 'messageEntityUnknown', offset: int, length: int}|array{_: 'messageEntityMention', offset: int, length: int}|array{_: 'messageEntityHashtag', offset: int, length: int}|array{_: 'messageEntityBotCommand', offset: int, length: int}|array{_: 'messageEntityUrl', offset: int, length: int}|array{_: 'messageEntityEmail', offset: int, length: int}|array{_: 'messageEntityBold', offset: int, length: int}|array{_: 'messageEntityItalic', offset: int, length: int}|array{_: 'messageEntityCode', offset: int, length: int}|array{_: 'messageEntityPre', offset: int, length: int, language: string}|array{_: 'messageEntityTextUrl', offset: int, length: int, url: string}|array{_: 'messageEntityMentionName', offset: int, length: int, user_id: int}|array{_: 'inputMessageEntityMentionName', user_id: array{_: 'inputUserEmpty'}|array{_: 'inputUserSelf'}|array{_: 'inputUser', user_id: int, access_hash: int}|array{_: 'inputUserFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}, msg_id: int, user_id: int}, offset: int, length: int}|array{_: 'messageEntityPhone', offset: int, length: int}|array{_: 'messageEntityCashtag', offset: int, length: int}|array{_: 'messageEntityUnderline', offset: int, length: int}|array{_: 'messageEntityStrike', offset: int, length: int}|array{_: 'messageEntityBlockquote', offset: int, length: int}|array{_: 'messageEntityBankCard', offset: int, length: int}|array{_: 'messageEntitySpoiler', offset: int, length: int}|array{_: 'messageEntityCustomEmoji', offset: int, length: int, document_id: int}>, date: int}}>, messages: list<array{_: 'messageEmpty', id: int, peer_id?: array{_: 'peerUser', user_id: int}|array{_: 'peerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}}|array{_: 'peerChannel', channel_id: int}}|array{_: 'message', peer_id: array{_: 'peerUser', user_id: int}|array{_: 'peerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}}|array{_: 'peerChannel', channel_id: int}, out: bool, mentioned: bool, media_unread: bool, silent: bool, post: bool, from_scheduled: bool, legacy: bool, edit_hide: bool, pinned: bool, noforwards: bool, id: int, from_id?: array{_: 'peerUser', user_id: int}|array{_: 'peerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}}|array{_: 'peerChannel', channel_id: int}, fwd_from?: array{_: 'messageFwdHeader', imported: bool, from_id?: array{_: 'peerUser', user_id: int}|array{_: 'peerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}}|array{_: 'peerChannel', channel_id: int}, from_name: string, date: int, channel_post: int, post_author: string, saved_from_peer?: array{_: 'peerUser', user_id: int}|array{_: 'peerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}}|array{_: 'peerChannel', channel_id: int}, saved_from_msg_id: int, psa_type: string}, via_bot_id: int, reply_to?: array{_: 'messageReplyHeader', reply_to_scheduled: bool, forum_topic: bool, reply_to_msg_id: int, reply_to_peer_id?: array{_: 'peerUser', user_id: int}|array{_: 'peerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}}|array{_: 'peerChannel', channel_id: int}, reply_to_top_id: int}, date: int, message: string, media?: array{_: 'messageMediaEmpty'}|array{_: 'messageMediaPhoto', spoiler: bool, photo?: array{_: 'photoEmpty', id: int}|array{_: 'photo', has_stickers: bool, id: int, access_hash: int, file_reference: string, date: int, sizes: list<array{_: 'photoSizeEmpty', type: string}|array{_: 'photoSize', type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', type: string, w: int, h: int, bytes: string}|array{_: 'photoStrippedSize', type: string, bytes: string}|array{_: 'photoSizeProgressive', type: string, w: int, h: int, sizes: list<int>}|array{_: 'photoPathSize', type: string, bytes: string}|array{_: 'photoSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, bytes: string}>, video_sizes: list<array{_: 'videoSize', type: string, w: int, h: int, size: int, video_start_ts?: float}>, dc_id: int}, ttl_seconds: int}|array{_: 'messageMediaGeo', geo: array{_: 'geoPointEmpty'}|array{_: 'geoPoint', long: float, lat: float, access_hash: int, accuracy_radius: int}}|array{_: 'messageMediaContact', phone_number: string, first_name: string, last_name: string, vcard: string, user_id: int}|array{_: 'messageMediaUnsupported'}|array{_: 'messageMediaDocument', nopremium: bool, spoiler: bool, document?: array{_: 'documentEmpty', id: int}|array{_: 'document', id: int, access_hash: int, file_reference: string, date: int, mime_type: string, size: int, thumbs: list<array{_: 'photoSizeEmpty', type: string}|array{_: 'photoSize', type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', type: string, w: int, h: int, bytes: string}|array{_: 'photoStrippedSize', type: string, bytes: string}|array{_: 'photoSizeProgressive', type: string, w: int, h: int, sizes: list<int>}|array{_: 'photoPathSize', type: string, bytes: string}|array{_: 'photoSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, bytes: string}>, video_thumbs: list<array{_: 'videoSize', type: string, w: int, h: int, size: int, video_start_ts?: float}>, dc_id: int, attributes: list<array{_: 'documentAttributeImageSize', w: int, h: int}|array{_: 'documentAttributeAnimated'}|array{_: 'documentAttributeSticker', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, mask: bool, alt: string, mask_coords?: array{_: 'maskCoords', x: float, y: float, zoom: float, n: int}}|array{_: 'documentAttributeVideo', round_message: bool, supports_streaming: bool, duration: int, w: int, h: int}|array{_: 'documentAttributeAudio', voice: bool, duration: int, title: string, performer: string, waveform: string}|array{_: 'documentAttributeFilename', file_name: string}|array{_: 'documentAttributeHasStickers'}|array{_: 'documentAttributeCustomEmoji', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, free: bool, text_color: bool, alt: string}|array{_: 'documentAttributeSticker'}|array{_: 'documentAttributeVideo', duration: int, w: int, h: int}|array{_: 'documentAttributeAudio', duration: int}|array{_: 'documentAttributeSticker', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, alt: string}|array{_: 'documentAttributeAudio', duration: int, title: string, performer: string}>}, ttl_seconds: int}|array{_: 'messageMediaWebPage', webpage: array{_: 'webPageEmpty', id: int}|array{_: 'webPagePending', id: int, date: int}|array{_: 'webPage', id: int, url: string, display_url: string, hash: int, type: string, site_name: string, title: string, description: string, photo?: array{_: 'photoEmpty', id: int}|array{_: 'photo', has_stickers: bool, id: int, access_hash: int, file_reference: string, date: int, sizes: list<array{_: 'photoSizeEmpty', type: string}|array{_: 'photoSize', type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', type: string, w: int, h: int, bytes: string}|array{_: 'photoStrippedSize', type: string, bytes: string}|array{_: 'photoSizeProgressive', type: string, w: int, h: int, sizes: list<int>}|array{_: 'photoPathSize', type: string, bytes: string}|array{_: 'photoSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, bytes: string}>, video_sizes: list<array{_: 'videoSize', type: string, w: int, h: int, size: int, video_start_ts?: float}>, dc_id: int}, embed_url: string, embed_type: string, embed_width: int, embed_height: int, duration: int, author: string, document?: array{_: 'documentEmpty', id: int}|array{_: 'document', id: int, access_hash: int, file_reference: string, date: int, mime_type: string, size: int, thumbs: list<array{_: 'photoSizeEmpty', type: string}|array{_: 'photoSize', type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', type: string, w: int, h: int, bytes: string}|array{_: 'photoStrippedSize', type: string, bytes: string}|array{_: 'photoSizeProgressive', type: string, w: int, h: int, sizes: list<int>}|array{_: 'photoPathSize', type: string, bytes: string}|array{_: 'photoSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, bytes: string}>, video_thumbs: list<array{_: 'videoSize', type: string, w: int, h: int, size: int, video_start_ts?: float}>, dc_id: int, attributes: list<array{_: 'documentAttributeImageSize', w: int, h: int}|array{_: 'documentAttributeAnimated'}|array{_: 'documentAttributeSticker', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, mask: bool, alt: string, mask_coords?: array{_: 'maskCoords', x: float, y: float, zoom: float, n: int}}|array{_: 'documentAttributeVideo', round_message: bool, supports_streaming: bool, duration: int, w: int, h: int}|array{_: 'documentAttributeAudio', voice: bool, duration: int, title: string, performer: string, waveform: string}|array{_: 'documentAttributeFilename', file_name: string}|array{_: 'documentAttributeHasStickers'}|array{_: 'documentAttributeCustomEmoji', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, free: bool, text_color: bool, alt: string}|array{_: 'documentAttributeSticker'}|array{_: 'documentAttributeVideo', duration: int, w: int, h: int}|array{_: 'documentAttributeAudio', duration: int}|array{_: 'documentAttributeSticker', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, alt: string}|array{_: 'documentAttributeAudio', duration: int, title: string, performer: string}>}, cached_page?: array{_: 'page', part: bool, rtl: bool, v2: bool, url: string, blocks: list<array{_: 'pageBlockUnsupported'}|array{_: 'pageBlockTitle', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}|array{_: 'pageBlockSubtitle', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}|array{_: 'pageBlockAuthorDate', author: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, published_date: int}|array{_: 'pageBlockHeader', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}|array{_: 'pageBlockSubheader', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}|array{_: 'pageBlockParagraph', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}|array{_: 'pageBlockPreformatted', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, language: string}|array{_: 'pageBlockFooter', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}|array{_: 'pageBlockDivider'}|array{_: 'pageBlockAnchor', name: string}|array{_: 'pageBlockList', items: list<array{_: 'pageListItemText', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}>}|array{_: 'pageBlockBlockquote', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, caption: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}|array{_: 'pageBlockPullquote', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, caption: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}|array{_: 'pageBlockPhoto', caption: array{_: 'pageCaption', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, credit: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}, photo_id: int, url: string, webpage_id: int}|array{_: 'pageBlockVideo', caption: array{_: 'pageCaption', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, credit: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}, autoplay: bool, loop: bool, video_id: int}|array{_: 'pageBlockCover', cover: array{_: 'pageBlockUnsupported'}|array{_: 'pageBlockTitle', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}|array{_: 'pageBlockSubtitle', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}|array{_: 'pageBlockAuthorDate', author: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, published_date: int}|array{_: 'pageBlockHeader', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}|array{_: 'pageBlockSubheader', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}|array{_: 'pageBlockParagraph', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}|array{_: 'pageBlockPreformatted', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, language: string}|array{_: 'pageBlockFooter', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}|array{_: 'pageBlockDivider'}|array{_: 'pageBlockAnchor', name: string}|array{_: 'pageBlockList', items: list<array{_: 'pageListItemText', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}>}|array{_: 'pageBlockBlockquote', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, caption: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}|array{_: 'pageBlockPullquote', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, caption: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}|array{_: 'pageBlockPhoto', caption: array{_: 'pageCaption', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, credit: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}, photo_id: int, url: string, webpage_id: int}|array{_: 'pageBlockVideo', caption: array{_: 'pageCaption', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, credit: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}, autoplay: bool, loop: bool, video_id: int}|array{_: 'pageBlockEmbed', caption: array{_: 'pageCaption', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, credit: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}, full_width: bool, allow_scrolling: bool, url: string, html: string, poster_photo_id: int, w: int, h: int}|array{_: 'pageBlockChannel', channel: array{_: 'chatEmpty', id: int}|array{_: 'chat', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, deactivated: bool, call_active: bool, call_not_empty: bool, noforwards: bool, id: int, title: string, participants_count: int, date: int, version: int, migrated_to?: array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id: int, access_hash: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}, msg_id: int, channel_id: int}, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}}|array{_: 'chatForbidden', id: int, title: string}|array{_: 'channel', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, broadcast: bool, verified: bool, megagroup: bool, restricted: bool, signatures: bool, min: bool, scam: bool, has_link: bool, has_geo: bool, slowmode_enabled: bool, call_active: bool, call_not_empty: bool, fake: bool, gigagroup: bool, noforwards: bool, join_to_send: bool, join_request: bool, forum: bool, id: int, access_hash: int, title: string, username: string, date: int, restriction_reason: list<array{_: 'restrictionReason', platform: string, reason: string, text: string}>, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, participants_count: int, usernames: list<array{_: 'username', editable: bool, active: bool, username: string}>}|array{_: 'channelForbidden', broadcast: bool, megagroup: bool, id: int, access_hash: int, title: string, until_date: int}}|array{_: 'pageBlockAudio', caption: array{_: 'pageCaption', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, credit: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}, audio_id: int}|array{_: 'pageBlockKicker', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}|array{_: 'pageBlockTable', title: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, bordered: bool, striped: bool, rows: list<array{_: 'pageTableRow', cells: list<array{_: 'pageTableCell', header: bool, align_center: bool, align_right: bool, valign_middle: bool, valign_bottom: bool, text?: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, colspan: int, rowspan: int}>}>}|array{_: 'pageBlockOrderedList', items: list<array{_: 'pageListOrderedItemText', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, num: string}>}|array{_: 'pageBlockRelatedArticles', title: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, articles: list<array{_: 'pageRelatedArticle', url: string, webpage_id: int, title: string, description: string, photo_id: int, author: string, published_date: int}>}|array{_: 'pageBlockMap', geo: array{_: 'geoPointEmpty'}|array{_: 'geoPoint', long: float, lat: float, access_hash: int, accuracy_radius: int}, caption: array{_: 'pageCaption', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, credit: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}, zoom: int, w: int, h: int}}|array{_: 'pageBlockEmbed', caption: array{_: 'pageCaption', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, credit: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}, full_width: bool, allow_scrolling: bool, url: string, html: string, poster_photo_id: int, w: int, h: int}|array{_: 'pageBlockChannel', channel: array{_: 'chatEmpty', id: int}|array{_: 'chat', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, deactivated: bool, call_active: bool, call_not_empty: bool, noforwards: bool, id: int, title: string, participants_count: int, date: int, version: int, migrated_to?: array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id: int, access_hash: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}, msg_id: int, channel_id: int}, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}}|array{_: 'chatForbidden', id: int, title: string}|array{_: 'channel', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, broadcast: bool, verified: bool, megagroup: bool, restricted: bool, signatures: bool, min: bool, scam: bool, has_link: bool, has_geo: bool, slowmode_enabled: bool, call_active: bool, call_not_empty: bool, fake: bool, gigagroup: bool, noforwards: bool, join_to_send: bool, join_request: bool, forum: bool, id: int, access_hash: int, title: string, username: string, date: int, restriction_reason: list<array{_: 'restrictionReason', platform: string, reason: string, text: string}>, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, participants_count: int, usernames: list<array{_: 'username', editable: bool, active: bool, username: string}>}|array{_: 'channelForbidden', broadcast: bool, megagroup: bool, id: int, access_hash: int, title: string, until_date: int}}|array{_: 'pageBlockAudio', caption: array{_: 'pageCaption', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, credit: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}, audio_id: int}|array{_: 'pageBlockKicker', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}|array{_: 'pageBlockTable', title: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, bordered: bool, striped: bool, rows: list<array{_: 'pageTableRow', cells: list<array{_: 'pageTableCell', header: bool, align_center: bool, align_right: bool, valign_middle: bool, valign_bottom: bool, text?: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, colspan: int, rowspan: int}>}>}|array{_: 'pageBlockOrderedList', items: list<array{_: 'pageListOrderedItemText', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, num: string}>}|array{_: 'pageBlockRelatedArticles', title: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, articles: list<array{_: 'pageRelatedArticle', url: string, webpage_id: int, title: string, description: string, photo_id: int, author: string, published_date: int}>}|array{_: 'pageBlockMap', geo: array{_: 'geoPointEmpty'}|array{_: 'geoPoint', long: float, lat: float, access_hash: int, accuracy_radius: int}, caption: array{_: 'pageCaption', text: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}, credit: array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textConcat', texts: list<array{_: 'textEmpty'}|array{_: 'textPlain', text: string}|array{_: 'textImage', document_id: int, w: int, h: int}>}|array{_: 'textImage', document_id: int, w: int, h: int}}, zoom: int, w: int, h: int}>, photos: list<array{_: 'photoEmpty', id: int}|array{_: 'photo', has_stickers: bool, id: int, access_hash: int, file_reference: string, date: int, sizes: list<array{_: 'photoSizeEmpty', type: string}|array{_: 'photoSize', type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', type: string, w: int, h: int, bytes: string}|array{_: 'photoStrippedSize', type: string, bytes: string}|array{_: 'photoSizeProgressive', type: string, w: int, h: int, sizes: list<int>}|array{_: 'photoPathSize', type: string, bytes: string}|array{_: 'photoSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, bytes: string}>, video_sizes: list<array{_: 'videoSize', type: string, w: int, h: int, size: int, video_start_ts?: float}>, dc_id: int}>, documents: list<array{_: 'documentEmpty', id: int}|array{_: 'document', id: int, access_hash: int, file_reference: string, date: int, mime_type: string, size: int, thumbs: list<array{_: 'photoSizeEmpty', type: string}|array{_: 'photoSize', type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', type: string, w: int, h: int, bytes: string}|array{_: 'photoStrippedSize', type: string, bytes: string}|array{_: 'photoSizeProgressive', type: string, w: int, h: int, sizes: list<int>}|array{_: 'photoPathSize', type: string, bytes: string}|array{_: 'photoSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, bytes: string}>, video_thumbs: list<array{_: 'videoSize', type: string, w: int, h: int, size: int, video_start_ts?: float}>, dc_id: int, attributes: list<array{_: 'documentAttributeImageSize', w: int, h: int}|array{_: 'documentAttributeAnimated'}|array{_: 'documentAttributeSticker', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, mask: bool, alt: string, mask_coords?: array{_: 'maskCoords', x: float, y: float, zoom: float, n: int}}|array{_: 'documentAttributeVideo', round_message: bool, supports_streaming: bool, duration: int, w: int, h: int}|array{_: 'documentAttributeAudio', voice: bool, duration: int, title: string, performer: string, waveform: string}|array{_: 'documentAttributeFilename', file_name: string}|array{_: 'documentAttributeHasStickers'}|array{_: 'documentAttributeCustomEmoji', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, free: bool, text_color: bool, alt: string}|array{_: 'documentAttributeSticker'}|array{_: 'documentAttributeVideo', duration: int, w: int, h: int}|array{_: 'documentAttributeAudio', duration: int}|array{_: 'documentAttributeSticker', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, alt: string}|array{_: 'documentAttributeAudio', duration: int, title: string, performer: string}>}>, views: int}, attributes: list<array{_: 'webPageAttributeTheme', documents: list<array{_: 'documentEmpty', id: int}|array{_: 'document', id: int, access_hash: int, file_reference: string, date: int, mime_type: string, size: int, thumbs: list<array{_: 'photoSizeEmpty', type: string}|array{_: 'photoSize', type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', type: string, w: int, h: int, bytes: string}|array{_: 'photoStrippedSize', type: string, bytes: string}|array{_: 'photoSizeProgressive', type: string, w: int, h: int, sizes: list<int>}|array{_: 'photoPathSize', type: string, bytes: string}|array{_: 'photoSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, bytes: string}>, video_thumbs: list<array{_: 'videoSize', type: string, w: int, h: int, size: int, video_start_ts?: float}>, dc_id: int, attributes: list<array{_: 'documentAttributeImageSize', w: int, h: int}|array{_: 'documentAttributeAnimated'}|array{_: 'documentAttributeSticker', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, mask: bool, alt: string, mask_coords?: array{_: 'maskCoords', x: float, y: float, zoom: float, n: int}}|array{_: 'documentAttributeVideo', round_message: bool, supports_streaming: bool, duration: int, w: int, h: int}|array{_: 'documentAttributeAudio', voice: bool, duration: int, title: string, performer: string, waveform: string}|array{_: 'documentAttributeFilename', file_name: string}|array{_: 'documentAttributeHasStickers'}|array{_: 'documentAttributeCustomEmoji', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, free: bool, text_color: bool, alt: string}|array{_: 'documentAttributeSticker'}|array{_: 'documentAttributeVideo', duration: int, w: int, h: int}|array{_: 'documentAttributeAudio', duration: int}|array{_: 'documentAttributeSticker', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, alt: string}|array{_: 'documentAttributeAudio', duration: int, title: string, performer: string}>}>, settings?: array{_: 'themeSettings', base_theme: array{_: 'baseThemeClassic'}|array{_: 'baseThemeDay'}|array{_: 'baseThemeNight'}|array{_: 'baseThemeTinted'}|array{_: 'baseThemeArctic'}, message_colors_animated: bool, accent_color: int, outbox_accent_color: int, message_colors: list<int>, wallpaper?: array{_: 'wallPaper', document: array{_: 'documentEmpty', id: int}|array{_: 'document', id: int, access_hash: int, file_reference: string, date: int, mime_type: string, size: int, thumbs: list<array{_: 'photoSizeEmpty', type: string}|array{_: 'photoSize', type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', type: string, w: int, h: int, bytes: string}|array{_: 'photoStrippedSize', type: string, bytes: string}|array{_: 'photoSizeProgressive', type: string, w: int, h: int, sizes: list<int>}|array{_: 'photoPathSize', type: string, bytes: string}|array{_: 'photoSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, bytes: string}>, video_thumbs: list<array{_: 'videoSize', type: string, w: int, h: int, size: int, video_start_ts?: float}>, dc_id: int, attributes: list<array{_: 'documentAttributeImageSize', w: int, h: int}|array{_: 'documentAttributeAnimated'}|array{_: 'documentAttributeSticker', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, mask: bool, alt: string, mask_coords?: array{_: 'maskCoords', x: float, y: float, zoom: float, n: int}}|array{_: 'documentAttributeVideo', round_message: bool, supports_streaming: bool, duration: int, w: int, h: int}|array{_: 'documentAttributeAudio', voice: bool, duration: int, title: string, performer: string, waveform: string}|array{_: 'documentAttributeFilename', file_name: string}|array{_: 'documentAttributeHasStickers'}|array{_: 'documentAttributeCustomEmoji', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, free: bool, text_color: bool, alt: string}|array{_: 'documentAttributeSticker'}|array{_: 'documentAttributeVideo', duration: int, w: int, h: int}|array{_: 'documentAttributeAudio', duration: int}|array{_: 'documentAttributeSticker', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, alt: string}|array{_: 'documentAttributeAudio', duration: int, title: string, performer: string}>}, id: int, creator: bool, default: bool, pattern: bool, dark: bool, access_hash: int, slug: string, settings?: array{_: 'wallPaperSettings', blur: bool, motion: bool, background_color: int, second_background_color: int, third_background_color: int, fourth_background_color: int, intensity: int, rotation: int}}|array{_: 'wallPaperNoFile', id: int, default: bool, dark: bool, settings?: array{_: 'wallPaperSettings', blur: bool, motion: bool, background_color: int, second_background_color: int, third_background_color: int, fourth_background_color: int, intensity: int, rotation: int}}}}>}|array{_: 'webPageNotModified', cached_page_views: int}}|array{_: 'messageMediaVenue', geo: array{_: 'geoPointEmpty'}|array{_: 'geoPoint', long: float, lat: float, access_hash: int, accuracy_radius: int}, title: string, address: string, provider: string, venue_id: string, venue_type: string}|array{_: 'messageMediaGame', game: array{_: 'game', photo: array{_: 'photoEmpty', id: int}|array{_: 'photo', has_stickers: bool, id: int, access_hash: int, file_reference: string, date: int, sizes: list<array{_: 'photoSizeEmpty', type: string}|array{_: 'photoSize', type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', type: string, w: int, h: int, bytes: string}|array{_: 'photoStrippedSize', type: string, bytes: string}|array{_: 'photoSizeProgressive', type: string, w: int, h: int, sizes: list<int>}|array{_: 'photoPathSize', type: string, bytes: string}|array{_: 'photoSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, bytes: string}>, video_sizes: list<array{_: 'videoSize', type: string, w: int, h: int, size: int, video_start_ts?: float}>, dc_id: int}, id: int, access_hash: int, short_name: string, title: string, description: string, document?: array{_: 'documentEmpty', id: int}|array{_: 'document', id: int, access_hash: int, file_reference: string, date: int, mime_type: string, size: int, thumbs: list<array{_: 'photoSizeEmpty', type: string}|array{_: 'photoSize', type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', type: string, w: int, h: int, bytes: string}|array{_: 'photoStrippedSize', type: string, bytes: string}|array{_: 'photoSizeProgressive', type: string, w: int, h: int, sizes: list<int>}|array{_: 'photoPathSize', type: string, bytes: string}|array{_: 'photoSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, bytes: string}>, video_thumbs: list<array{_: 'videoSize', type: string, w: int, h: int, size: int, video_start_ts?: float}>, dc_id: int, attributes: list<array{_: 'documentAttributeImageSize', w: int, h: int}|array{_: 'documentAttributeAnimated'}|array{_: 'documentAttributeSticker', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, mask: bool, alt: string, mask_coords?: array{_: 'maskCoords', x: float, y: float, zoom: float, n: int}}|array{_: 'documentAttributeVideo', round_message: bool, supports_streaming: bool, duration: int, w: int, h: int}|array{_: 'documentAttributeAudio', voice: bool, duration: int, title: string, performer: string, waveform: string}|array{_: 'documentAttributeFilename', file_name: string}|array{_: 'documentAttributeHasStickers'}|array{_: 'documentAttributeCustomEmoji', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, free: bool, text_color: bool, alt: string}|array{_: 'documentAttributeSticker'}|array{_: 'documentAttributeVideo', duration: int, w: int, h: int}|array{_: 'documentAttributeAudio', duration: int}|array{_: 'documentAttributeSticker', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, alt: string}|array{_: 'documentAttributeAudio', duration: int, title: string, performer: string}>}}}|array{_: 'messageMediaInvoice', shipping_address_requested: bool, test: bool, title: string, description: string, photo?: array{_: 'webDocument', url: string, access_hash: int, size: int, mime_type: string, attributes: list<array{_: 'documentAttributeImageSize', w: int, h: int}|array{_: 'documentAttributeAnimated'}|array{_: 'documentAttributeSticker', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, mask: bool, alt: string, mask_coords?: array{_: 'maskCoords', x: float, y: float, zoom: float, n: int}}|array{_: 'documentAttributeVideo', round_message: bool, supports_streaming: bool, duration: int, w: int, h: int}|array{_: 'documentAttributeAudio', voice: bool, duration: int, title: string, performer: string, waveform: string}|array{_: 'documentAttributeFilename', file_name: string}|array{_: 'documentAttributeHasStickers'}|array{_: 'documentAttributeCustomEmoji', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, free: bool, text_color: bool, alt: string}|array{_: 'documentAttributeSticker'}|array{_: 'documentAttributeVideo', duration: int, w: int, h: int}|array{_: 'documentAttributeAudio', duration: int}|array{_: 'documentAttributeSticker', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, alt: string}|array{_: 'documentAttributeAudio', duration: int, title: string, performer: string}>}|array{_: 'webDocumentNoProxy', url: string, size: int, mime_type: string, attributes: list<array{_: 'documentAttributeImageSize', w: int, h: int}|array{_: 'documentAttributeAnimated'}|array{_: 'documentAttributeSticker', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, mask: bool, alt: string, mask_coords?: array{_: 'maskCoords', x: float, y: float, zoom: float, n: int}}|array{_: 'documentAttributeVideo', round_message: bool, supports_streaming: bool, duration: int, w: int, h: int}|array{_: 'documentAttributeAudio', voice: bool, duration: int, title: string, performer: string, waveform: string}|array{_: 'documentAttributeFilename', file_name: string}|array{_: 'documentAttributeHasStickers'}|array{_: 'documentAttributeCustomEmoji', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, free: bool, text_color: bool, alt: string}|array{_: 'documentAttributeSticker'}|array{_: 'documentAttributeVideo', duration: int, w: int, h: int}|array{_: 'documentAttributeAudio', duration: int}|array{_: 'documentAttributeSticker', stickerset: array{_: 'inputStickerSetEmpty'}|array{_: 'inputStickerSetID', id: int, access_hash: int}|array{_: 'inputStickerSetShortName', short_name: string}|array{_: 'inputStickerSetAnimatedEmoji'}|array{_: 'inputStickerSetDice', emoticon: string}|array{_: 'inputStickerSetAnimatedEmojiAnimations'}|array{_: 'inputStickerSetPremiumGifts'}|array{_: 'inputStickerSetEmojiGenericAnimations'}|array{_: 'inputStickerSetEmojiDefaultStatuses'}|array{_: 'inputStickerSetEmojiDefaultTopicIcons'}, alt: string}|array{_: 'documentAttributeAudio', duration: int, title: string, performer: string}>}, receipt_msg_id: int, currency: string, total_amount: int, start_param: string, extended_media?: array{_: 'messageExtendedMediaPreview', w: int, h: int, thumb?: array{_: 'photoSizeEmpty', type: string}|array{_: 'photoSize', type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', type: string, w: int, h: int, bytes: string}|array{_: 'photoStrippedSize', type: string, bytes: string}|array{_: 'photoSizeProgressive', type: string, w: int, h: int, sizes: list<int>}|array{_: 'photoPathSize', type: string, bytes: string}|array{_: 'photoSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, bytes: string}, video_duration: int}}|array{_: 'messageMediaGeoLive', geo: array{_: 'geoPointEmpty'}|array{_: 'geoPoint', long: float, lat: float, access_hash: int, accuracy_radius: int}, heading: int, period: int, proximity_notification_radius: int}|array{_: 'messageMediaPoll', poll: array{_: 'poll', id: int, closed: bool, public_voters: bool, multiple_choice: bool, quiz: bool, question: string, answers: list<array{_: 'pollAnswer', text: string, option: string}>, close_period: int, close_date: int}, results: array{_: 'pollResults', min: bool, results: list<array{_: 'pollAnswerVoters', chosen: bool, correct: bool, option: string, voters: int}>, total_voters: int, recent_voters: list<int>, solution: string, solution_entities: list<array{_: 'messageEntityUnknown', offset: int, length: int}|array{_: 'messageEntityMention', offset: int, length: int}|array{_: 'messageEntityHashtag', offset: int, length: int}|array{_: 'messageEntityBotCommand', offset: int, length: int}|array{_: 'messageEntityUrl', offset: int, length: int}|array{_: 'messageEntityEmail', offset: int, length: int}|array{_: 'messageEntityBold', offset: int, length: int}|array{_: 'messageEntityItalic', offset: int, length: int}|array{_: 'messageEntityCode', offset: int, length: int}|array{_: 'messageEntityPre', offset: int, length: int, language: string}|array{_: 'messageEntityTextUrl', offset: int, length: int, url: string}|array{_: 'messageEntityMentionName', offset: int, length: int, user_id: int}|array{_: 'inputMessageEntityMentionName', user_id: array{_: 'inputUserEmpty'}|array{_: 'inputUserSelf'}|array{_: 'inputUser', user_id: int, access_hash: int}|array{_: 'inputUserFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}, msg_id: int, user_id: int}, offset: int, length: int}|array{_: 'messageEntityPhone', offset: int, length: int}|array{_: 'messageEntityCashtag', offset: int, length: int}|array{_: 'messageEntityUnderline', offset: int, length: int}|array{_: 'messageEntityStrike', offset: int, length: int}|array{_: 'messageEntityBlockquote', offset: int, length: int}|array{_: 'messageEntityBankCard', offset: int, length: int}|array{_: 'messageEntitySpoiler', offset: int, length: int}|array{_: 'messageEntityCustomEmoji', offset: int, length: int, document_id: int}>}}|array{_: 'messageMediaDice', value: int, emoticon: string}, reply_markup?: array{_: 'replyKeyboardHide', selective: bool}|array{_: 'replyKeyboardForceReply', single_use: bool, selective: bool, placeholder: string}|array{_: 'replyKeyboardMarkup', resize: bool, single_use: bool, selective: bool, persistent: bool, rows: list<array{_: 'keyboardButtonRow', buttons: list<array>}>, placeholder: string}|array{_: 'replyInlineMarkup', rows: list<array{_: 'keyboardButtonRow', buttons: list<array>}>}, entities: list<array{_: 'messageEntityUnknown', offset: int, length: int}|array{_: 'messageEntityMention', offset: int, length: int}|array{_: 'messageEntityHashtag', offset: int, length: int}|array{_: 'messageEntityBotCommand', offset: int, length: int}|array{_: 'messageEntityUrl', offset: int, length: int}|array{_: 'messageEntityEmail', offset: int, length: int}|array{_: 'messageEntityBold', offset: int, length: int}|array{_: 'messageEntityItalic', offset: int, length: int}|array{_: 'messageEntityCode', offset: int, length: int}|array{_: 'messageEntityPre', offset: int, length: int, language: string}|array{_: 'messageEntityTextUrl', offset: int, length: int, url: string}|array{_: 'messageEntityMentionName', offset: int, length: int, user_id: int}|array{_: 'inputMessageEntityMentionName', user_id: array{_: 'inputUserEmpty'}|array{_: 'inputUserSelf'}|array{_: 'inputUser', user_id: int, access_hash: int}|array{_: 'inputUserFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}, msg_id: int, user_id: int}, offset: int, length: int}|array{_: 'messageEntityPhone', offset: int, length: int}|array{_: 'messageEntityCashtag', offset: int, length: int}|array{_: 'messageEntityUnderline', offset: int, length: int}|array{_: 'messageEntityStrike', offset: int, length: int}|array{_: 'messageEntityBlockquote', offset: int, length: int}|array{_: 'messageEntityBankCard', offset: int, length: int}|array{_: 'messageEntitySpoiler', offset: int, length: int}|array{_: 'messageEntityCustomEmoji', offset: int, length: int, document_id: int}>, views: int, forwards: int, replies?: array{_: 'messageReplies', comments: bool, replies: int, replies_pts: int, recent_repliers: list<array{_: 'peerUser', user_id: int}|array{_: 'peerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}}|array{_: 'peerChannel', channel_id: int}>, channel_id: int, max_id: int, read_max_id: int}, edit_date: int, post_author: string, grouped_id: int, reactions?: array{_: 'messageReactions', min: bool, can_see_list: bool, results: list<array{_: 'reactionCount', reaction: array{_: 'reactionEmpty'}|array{_: 'reactionEmoji', emoticon: string}|array{_: 'reactionCustomEmoji', document_id: int}, chosen_order: int, count: int}>, recent_reactions: list<array{_: 'messagePeerReaction', peer_id: array{_: 'peerUser', user_id: int}|array{_: 'peerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}}|array{_: 'peerChannel', channel_id: int}, reaction: array{_: 'reactionEmpty'}|array{_: 'reactionEmoji', emoticon: string}|array{_: 'reactionCustomEmoji', document_id: int}, big: bool, unread: bool}>}, restriction_reason: list<array{_: 'restrictionReason', platform: string, reason: string, text: string}>, ttl_period: int}|array{_: 'messageService', peer_id: array{_: 'peerUser', user_id: int}|array{_: 'peerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}}|array{_: 'peerChannel', channel_id: int}, action: array{_: 'messageActionEmpty'}|array{_: 'messageActionChatCreate', title: string, users: list<int>}|array{_: 'messageActionChatEditTitle', title: string}|array{_: 'messageActionChatEditPhoto', photo: array{_: 'photoEmpty', id: int}|array{_: 'photo', has_stickers: bool, id: int, access_hash: int, file_reference: string, date: int, sizes: list<array{_: 'photoSizeEmpty', type: string}|array{_: 'photoSize', type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', type: string, w: int, h: int, bytes: string}|array{_: 'photoStrippedSize', type: string, bytes: string}|array{_: 'photoSizeProgressive', type: string, w: int, h: int, sizes: list<int>}|array{_: 'photoPathSize', type: string, bytes: string}|array{_: 'photoSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, bytes: string}>, video_sizes: list<array{_: 'videoSize', type: string, w: int, h: int, size: int, video_start_ts?: float}>, dc_id: int}}|array{_: 'messageActionChatDeletePhoto'}|array{_: 'messageActionChatAddUser', users: list<int>}|array{_: 'messageActionChatDeleteUser', user_id: int}|array{_: 'messageActionChatJoinedByLink', inviter_id: int}|array{_: 'messageActionChannelCreate', title: string}|array{_: 'messageActionChatMigrateTo', channel_id: int}|array{_: 'messageActionChannelMigrateFrom', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}, title: string}|array{_: 'messageActionPinMessage'}|array{_: 'messageActionHistoryClear'}|array{_: 'messageActionGameScore', game_id: int, score: int}|array{_: 'messageActionPaymentSentMe', charge: array{_: 'paymentCharge', id: string, provider_charge_id: string}, recurring_init: bool, recurring_used: bool, currency: string, total_amount: int, payload: string, info?: array{_: 'paymentRequestedInfo', name: string, phone: string, email: string, shipping_address?: array{_: 'postAddress', street_line1: string, street_line2: string, city: string, state: string, country_iso2: string, post_code: string}}, shipping_option_id: string}|array{_: 'messageActionPaymentSent', recurring_init: bool, recurring_used: bool, currency: string, total_amount: int, invoice_slug: string}|array{_: 'messageActionPhoneCall', video: bool, call_id: int, reason?: array{_: 'phoneCallDiscardReasonMissed'}|array{_: 'phoneCallDiscardReasonDisconnect'}|array{_: 'phoneCallDiscardReasonHangup'}|array{_: 'phoneCallDiscardReasonBusy'}, duration: int}|array{_: 'messageActionScreenshotTaken'}|array{_: 'messageActionCustomAction', message: string}|array{_: 'messageActionBotAllowed', domain: string}|array{_: 'messageActionSecureValuesSentMe', credentials: array{_: 'secureCredentialsEncrypted', data: string, hash: string, secret: string}, values: list<array{_: 'secureValue', type: array{_: 'secureValueTypePersonalDetails'}|array{_: 'secureValueTypePassport'}|array{_: 'secureValueTypeDriverLicense'}|array{_: 'secureValueTypeIdentityCard'}|array{_: 'secureValueTypeInternalPassport'}|array{_: 'secureValueTypeAddress'}|array{_: 'secureValueTypeUtilityBill'}|array{_: 'secureValueTypeBankStatement'}|array{_: 'secureValueTypeRentalAgreement'}|array{_: 'secureValueTypePassportRegistration'}|array{_: 'secureValueTypeTemporaryRegistration'}|array{_: 'secureValueTypePhone'}|array{_: 'secureValueTypeEmail'}, data?: array{_: 'secureData', data: string, data_hash: string, secret: string}, front_side?: array{_: 'secureFileEmpty'}|array{_: 'secureFile', id: int, access_hash: int, size: int, dc_id: int, date: int, file_hash: string, secret: string}, reverse_side?: array{_: 'secureFileEmpty'}|array{_: 'secureFile', id: int, access_hash: int, size: int, dc_id: int, date: int, file_hash: string, secret: string}, selfie?: array{_: 'secureFileEmpty'}|array{_: 'secureFile', id: int, access_hash: int, size: int, dc_id: int, date: int, file_hash: string, secret: string}, translation: list<array{_: 'secureFileEmpty'}|array{_: 'secureFile', id: int, access_hash: int, size: int, dc_id: int, date: int, file_hash: string, secret: string}>, files: list<array{_: 'secureFileEmpty'}|array{_: 'secureFile', id: int, access_hash: int, size: int, dc_id: int, date: int, file_hash: string, secret: string}>, plain_data?: array{_: 'securePlainPhone', phone: string}|array{_: 'securePlainEmail', email: string}, hash: string}>}|array{_: 'messageActionSecureValuesSent', types: list<array{_: 'secureValueTypePersonalDetails'}|array{_: 'secureValueTypePassport'}|array{_: 'secureValueTypeDriverLicense'}|array{_: 'secureValueTypeIdentityCard'}|array{_: 'secureValueTypeInternalPassport'}|array{_: 'secureValueTypeAddress'}|array{_: 'secureValueTypeUtilityBill'}|array{_: 'secureValueTypeBankStatement'}|array{_: 'secureValueTypeRentalAgreement'}|array{_: 'secureValueTypePassportRegistration'}|array{_: 'secureValueTypeTemporaryRegistration'}|array{_: 'secureValueTypePhone'}|array{_: 'secureValueTypeEmail'}>}|array{_: 'messageActionContactSignUp'}|array{_: 'messageActionGeoProximityReached', from_id: array{_: 'peerUser', user_id: int}|array{_: 'peerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}}|array{_: 'peerChannel', channel_id: int}, to_id: array{_: 'peerUser', user_id: int}|array{_: 'peerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}}|array{_: 'peerChannel', channel_id: int}, distance: int}|array{_: 'messageActionGroupCall', call: array{_: 'inputGroupCall', id: int, access_hash: int}, duration: int}|array{_: 'messageActionInviteToGroupCall', call: array{_: 'inputGroupCall', id: int, access_hash: int}, users: list<int>}|array{_: 'messageActionSetMessagesTTL', period: int, auto_setting_from: int}|array{_: 'messageActionGroupCallScheduled', call: array{_: 'inputGroupCall', id: int, access_hash: int}, schedule_date: int}|array{_: 'messageActionSetChatTheme', emoticon: string}|array{_: 'messageActionChatJoinedByRequest'}|array{_: 'messageActionWebViewDataSentMe', text: string, data: string}|array{_: 'messageActionWebViewDataSent', text: string}|array{_: 'messageActionGiftPremium', currency: string, amount: int, months: int}|array{_: 'messageActionTopicCreate', title: string, icon_color: int, icon_emoji_id: int}|array{_: 'messageActionTopicEdit', title: string, icon_emoji_id: int, closed?: bool, hidden?: bool}|array{_: 'messageActionSuggestProfilePhoto', photo: array{_: 'photoEmpty', id: int}|array{_: 'photo', has_stickers: bool, id: int, access_hash: int, file_reference: string, date: int, sizes: list<array{_: 'photoSizeEmpty', type: string}|array{_: 'photoSize', type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', type: string, w: int, h: int, bytes: string}|array{_: 'photoStrippedSize', type: string, bytes: string}|array{_: 'photoSizeProgressive', type: string, w: int, h: int, sizes: list<int>}|array{_: 'photoPathSize', type: string, bytes: string}|array{_: 'photoSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, size: int}|array{_: 'photoCachedSize', location: array{_: 'fileLocationUnavailable', volume_id: int, local_id: int, secret: int}|array{_: 'fileLocation', dc_id: int, volume_id: int, local_id: int, secret: int}, type: string, w: int, h: int, bytes: string}>, video_sizes: list<array{_: 'videoSize', type: string, w: int, h: int, size: int, video_start_ts?: float}>, dc_id: int}}|array{_: 'messageActionAttachMenuBotAllowed'}, out: bool, mentioned: bool, media_unread: bool, silent: bool, post: bool, legacy: bool, id: int, from_id?: array{_: 'peerUser', user_id: int}|array{_: 'peerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}}|array{_: 'peerChannel', channel_id: int}, reply_to?: array{_: 'messageReplyHeader', reply_to_scheduled: bool, forum_topic: bool, reply_to_msg_id: int, reply_to_peer_id?: array{_: 'peerUser', user_id: int}|array{_: 'peerChat', chat_id: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}}|array{_: 'peerChannel', channel_id: int}, reply_to_top_id: int}, date: int, ttl_period: int}>, chats: list<array{_: 'chatEmpty', id: int}|array{_: 'chat', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, deactivated: bool, call_active: bool, call_not_empty: bool, noforwards: bool, id: int, title: string, participants_count: int, date: int, version: int, migrated_to?: array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id: int, access_hash: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id: int, access_hash: int}|array{_: 'inputPeerChannel', channel_id: int, access_hash: int}, msg_id: int, channel_id: int}, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}}|array{_: 'chatForbidden', id: int, title: string}|array{_: 'channel', photo: array{_: 'chatPhotoEmpty'}|array{_: 'chatPhoto', has_video: bool, photo_id: int, stripped_thumb: string, dc_id: int}, creator: bool, left: bool, broadcast: bool, verified: bool, megagroup: bool, restricted: bool, signatures: bool, min: bool, scam: bool, has_link: bool, has_geo: bool, slowmode_enabled: bool, call_active: bool, call_not_empty: bool, fake: bool, gigagroup: bool, noforwards: bool, join_to_send: bool, join_request: bool, forum: bool, id: int, access_hash: int, title: string, username: string, date: int, restriction_reason: list<array{_: 'restrictionReason', platform: string, reason: string, text: string}>, admin_rights?: array{_: 'chatAdminRights', change_info: bool, post_messages: bool, edit_messages: bool, delete_messages: bool, ban_users: bool, invite_users: bool, pin_messages: bool, add_admins: bool, anonymous: bool, manage_call: bool, other: bool, manage_topics: bool}, banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, default_banned_rights?: array{_: 'chatBannedRights', view_messages: bool, send_messages: bool, send_media: bool, send_stickers: bool, send_gifs: bool, send_games: bool, send_inline: bool, embed_links: bool, send_polls: bool, change_info: bool, invite_users: bool, pin_messages: bool, manage_topics: bool, until_date: int}, participants_count: int, usernames: list<array{_: 'username', editable: bool, active: bool, username: string}>}|array{_: 'channelForbidden', broadcast: bool, megagroup: bool, id: int, access_hash: int, title: string, until_date: int}>, users: list<array{_: 'userEmpty', id: int}|array{_: 'user', self: bool, contact: bool, mutual_contact: bool, deleted: bool, bot: bool, bot_chat_history: bool, bot_nochats: bool, verified: bool, restricted: bool, min: bool, bot_inline_geo: bool, support: bool, scam: bool, apply_min_photo: bool, fake: bool, bot_attach_menu: bool, premium: bool, attach_menu_enabled: bool, id: int, access_hash: int, first_name: string, last_name: string, username: string, phone: string, photo?: array{_: 'userProfilePhotoEmpty'}|array{_: 'userProfilePhoto', has_video: bool, personal: bool, photo_id: int, stripped_thumb: string, dc_id: int}, status?: array{_: 'userStatusEmpty'}|array{_: 'userStatusOnline', expires: int}|array{_: 'userStatusOffline', was_online: int}|array{_: 'userStatusRecently'}|array{_: 'userStatusLastWeek'}|array{_: 'userStatusLastMonth'}, bot_info_version: int, restriction_reason: list<array{_: 'restrictionReason', platform: string, reason: string, text: string}>, bot_inline_placeholder: string, lang_code: string, emoji_status?: array{_: 'emojiStatusEmpty'}|array{_: 'emojiStatus', document_id: int}|array{_: 'emojiStatusUntil', document_id: int, until: int}, usernames: list<array{_: 'username', editable: bool, active: bool, username: string}>}>, pts: int} @see https://docs.madelineproto.xyz/API_docs/types/messages.ForumTopics.html
     */
    public function getForumTopicsByID(array $channel, array $topics = []): array;

    /**
     * 
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param int $topic_id 
     * 
     *
     * @param string $title 
     * 
     *
     * @param int $icon_emoji_id 
     * 
     *
     * @param bool $closed 
     * 
     *
     * @param bool $hidden 
     * 
     *
     * @return array @see https://docs.madelineproto.xyz/API_docs/types/Updates.html
     */
    public function editForumTopic(array $channel, int $topic_id = 0, string $title = '', int $icon_emoji_id = 0, bool $closed = false, bool $hidden = false): array;

    /**
     * 
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param bool $pinned 
     * 
     *
     * @param int $topic_id 
     * 
     *
     * @return array @see https://docs.madelineproto.xyz/API_docs/types/Updates.html
     */
    public function updatePinnedForumTopic(array $channel, bool $pinned, int $topic_id = 0): array;

    /**
     * 
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param int $top_msg_id 
     * 
     *
     * @return array{_: 'messages.affectedHistory', pts: int, pts_count: int, offset: int} @see https://docs.madelineproto.xyz/API_docs/types/messages.AffectedHistory.html
     */
    public function deleteTopicHistory(array $channel, int $top_msg_id = 0): array;

    /**
     * 
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param bool $force 
     * 
     *
     * @param list<int>|array<never, never> $order 
     * 
     *
     * @return array @see https://docs.madelineproto.xyz/API_docs/types/Updates.html
     */
    public function reorderPinnedForumTopics(array $channel, bool $force = false, array $order = []): array;

    /**
     * 
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param bool $enabled 
     * 
     *
     * @return array @see https://docs.madelineproto.xyz/API_docs/types/Updates.html
     */
    public function toggleAntiSpam(array $channel, bool $enabled): array;

    /**
     * 
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param int $msg_id 
     * 
     *
     * @return bool 
     */
    public function reportAntiSpamFalsePositive(array $channel, int $msg_id = 0): bool;

    /**
     * 
     *
     * @param array{_: 'inputChannelEmpty'}|array{_: 'inputChannel', channel_id?: int, access_hash?: int}|array{_: 'inputChannelFromMessage', peer: array{_: 'inputPeerEmpty'}|array{_: 'inputPeerSelf'}|array{_: 'inputPeerUser', user_id?: int, access_hash?: int}|array{_: 'inputPeerChannel', channel_id?: int, access_hash?: int}, msg_id?: int, channel_id?: int} $channel @see https://docs.madelineproto.xyz/API_docs/types/InputChannel.html
     * 
     *
     * @param bool $enabled 
     * 
     *
     * @return array @see https://docs.madelineproto.xyz/API_docs/types/Updates.html
     */
    public function toggleParticipantsHidden(array $channel, bool $enabled): array;
}
